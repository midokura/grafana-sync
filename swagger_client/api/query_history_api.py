# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class QueryHistoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_query(self, body, **kwargs):  # noqa: E501
        """Add query to query history.  # noqa: E501

        Adds new query to query history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_query(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateQueryInQueryHistoryCommand body: (required)
        :return: QueryHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_query_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_query_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_query_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add query to query history.  # noqa: E501

        Adds new query to query history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_query_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateQueryInQueryHistoryCommand body: (required)
        :return: QueryHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/query-history', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryHistoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_query(self, query_history_uid, **kwargs):  # noqa: E501
        """Delete query in query history.  # noqa: E501

        Deletes an existing query in query history as specified by the UID. This operation cannot be reverted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_query(query_history_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_history_uid: (required)
        :return: QueryHistoryDeleteQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_query_with_http_info(query_history_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_query_with_http_info(query_history_uid, **kwargs)  # noqa: E501
            return data

    def delete_query_with_http_info(self, query_history_uid, **kwargs):  # noqa: E501
        """Delete query in query history.  # noqa: E501

        Deletes an existing query in query history as specified by the UID. This operation cannot be reverted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_query_with_http_info(query_history_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_history_uid: (required)
        :return: QueryHistoryDeleteQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query_history_uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query_history_uid' is set
        if self.api_client.client_side_validation and ('query_history_uid' not in params or
                                                       params['query_history_uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query_history_uid` when calling `delete_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'query_history_uid' in params:
            path_params['query_history_uid'] = params['query_history_uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/query-history/{query_history_uid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryHistoryDeleteQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def migrate_queries(self, body, **kwargs):  # noqa: E501
        """Migrate queries to query history.  # noqa: E501

        Adds multiple queries to query history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_queries(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MigrateQueriesToQueryHistoryCommand body: (required)
        :return: QueryHistoryMigrationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.migrate_queries_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.migrate_queries_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def migrate_queries_with_http_info(self, body, **kwargs):  # noqa: E501
        """Migrate queries to query history.  # noqa: E501

        Adds multiple queries to query history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_queries_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MigrateQueriesToQueryHistoryCommand body: (required)
        :return: QueryHistoryMigrationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method migrate_queries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `migrate_queries`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/query-history/migrate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryHistoryMigrationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_query_comment(self, query_history_uid, body, **kwargs):  # noqa: E501
        """Update comment for query in query history.  # noqa: E501

        Updates comment for query in query history as specified by the UID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_query_comment(query_history_uid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_history_uid: (required)
        :param PatchQueryCommentInQueryHistoryCommand body: (required)
        :return: QueryHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_query_comment_with_http_info(query_history_uid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_query_comment_with_http_info(query_history_uid, body, **kwargs)  # noqa: E501
            return data

    def patch_query_comment_with_http_info(self, query_history_uid, body, **kwargs):  # noqa: E501
        """Update comment for query in query history.  # noqa: E501

        Updates comment for query in query history as specified by the UID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_query_comment_with_http_info(query_history_uid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_history_uid: (required)
        :param PatchQueryCommentInQueryHistoryCommand body: (required)
        :return: QueryHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query_history_uid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_query_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query_history_uid' is set
        if self.api_client.client_side_validation and ('query_history_uid' not in params or
                                                       params['query_history_uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query_history_uid` when calling `patch_query_comment`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `patch_query_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'query_history_uid' in params:
            path_params['query_history_uid'] = params['query_history_uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/query-history/{query_history_uid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryHistoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_queries(self, **kwargs):  # noqa: E501
        """Query history search.  # noqa: E501

        Returns a list of queries in the query history that matches the search criteria. Query history search supports pagination. Use the `limit` parameter to control the maximum number of queries returned; the default limit is 100. You can also use the `page` query parameter to fetch queries from any page other than the first one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_queries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] datasource_uid: List of data source UIDs to search for
        :param str search_string: Text inside query or comments that is searched for
        :param bool only_starred: Flag indicating if only starred queries should be returned
        :param str sort: Sort method
        :param int page: Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size.
        :param int limit: Limit the number of returned results
        :param int _from: From range for the query history search
        :param int to: To range for the query history search
        :return: QueryHistorySearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_queries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_queries_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_queries_with_http_info(self, **kwargs):  # noqa: E501
        """Query history search.  # noqa: E501

        Returns a list of queries in the query history that matches the search criteria. Query history search supports pagination. Use the `limit` parameter to control the maximum number of queries returned; the default limit is 100. You can also use the `page` query parameter to fetch queries from any page other than the first one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_queries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] datasource_uid: List of data source UIDs to search for
        :param str search_string: Text inside query or comments that is searched for
        :param bool only_starred: Flag indicating if only starred queries should be returned
        :param str sort: Sort method
        :param int page: Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size.
        :param int limit: Limit the number of returned results
        :param int _from: From range for the query history search
        :param int to: To range for the query history search
        :return: QueryHistorySearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datasource_uid', 'search_string', 'only_starred', 'sort', 'page', 'limit', '_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_queries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource_uid' in params:
            query_params.append(('datasourceUid', params['datasource_uid']))  # noqa: E501
            collection_formats['datasourceUid'] = 'multi'  # noqa: E501
        if 'search_string' in params:
            query_params.append(('searchString', params['search_string']))  # noqa: E501
        if 'only_starred' in params:
            query_params.append(('onlyStarred', params['only_starred']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/query-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryHistorySearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def star_query(self, query_history_uid, **kwargs):  # noqa: E501
        """Add star to query in query history.  # noqa: E501

        Adds star to query in query history as specified by the UID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.star_query(query_history_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_history_uid: (required)
        :return: QueryHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.star_query_with_http_info(query_history_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.star_query_with_http_info(query_history_uid, **kwargs)  # noqa: E501
            return data

    def star_query_with_http_info(self, query_history_uid, **kwargs):  # noqa: E501
        """Add star to query in query history.  # noqa: E501

        Adds star to query in query history as specified by the UID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.star_query_with_http_info(query_history_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_history_uid: (required)
        :return: QueryHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query_history_uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method star_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query_history_uid' is set
        if self.api_client.client_side_validation and ('query_history_uid' not in params or
                                                       params['query_history_uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query_history_uid` when calling `star_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'query_history_uid' in params:
            path_params['query_history_uid'] = params['query_history_uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/query-history/star/{query_history_uid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryHistoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unstar_query(self, query_history_uid, **kwargs):  # noqa: E501
        """Remove star to query in query history.  # noqa: E501

        Removes star from query in query history as specified by the UID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unstar_query(query_history_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_history_uid: (required)
        :return: QueryHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unstar_query_with_http_info(query_history_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.unstar_query_with_http_info(query_history_uid, **kwargs)  # noqa: E501
            return data

    def unstar_query_with_http_info(self, query_history_uid, **kwargs):  # noqa: E501
        """Remove star to query in query history.  # noqa: E501

        Removes star from query in query history as specified by the UID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unstar_query_with_http_info(query_history_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_history_uid: (required)
        :return: QueryHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query_history_uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unstar_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query_history_uid' is set
        if self.api_client.client_side_validation and ('query_history_uid' not in params or
                                                       params['query_history_uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query_history_uid` when calling `unstar_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'query_history_uid' in params:
            path_params['query_history_uid'] = params['query_history_uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/query-history/star/{query_history_uid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryHistoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
