# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LegacyAlertsNotificationChannelsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_alert_notification_channel(self, body, **kwargs):  # noqa: E501
        """Create notification channel.  # noqa: E501

        You can find the full list of [supported notifiers](https://grafana.com/docs/grafana/latest/alerting/old-alerting/notifications/#list-of-supported-notifiers) on the alert notifiers page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_alert_notification_channel(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAlertNotificationCommand body: (required)
        :return: AlertNotification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_alert_notification_channel_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_alert_notification_channel_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_alert_notification_channel_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create notification channel.  # noqa: E501

        You can find the full list of [supported notifiers](https://grafana.com/docs/grafana/latest/alerting/old-alerting/notifications/#list-of-supported-notifiers) on the alert notifiers page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_alert_notification_channel_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateAlertNotificationCommand body: (required)
        :return: AlertNotification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_alert_notification_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_alert_notification_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/alert-notifications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertNotification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_alert_notification_channel(self, notification_channel_id, **kwargs):  # noqa: E501
        """Delete alert notification by ID.  # noqa: E501

        Deletes an existing notification channel identified by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_alert_notification_channel(notification_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int notification_channel_id: (required)
        :return: SuccessResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_alert_notification_channel_with_http_info(notification_channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_alert_notification_channel_with_http_info(notification_channel_id, **kwargs)  # noqa: E501
            return data

    def delete_alert_notification_channel_with_http_info(self, notification_channel_id, **kwargs):  # noqa: E501
        """Delete alert notification by ID.  # noqa: E501

        Deletes an existing notification channel identified by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_alert_notification_channel_with_http_info(notification_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int notification_channel_id: (required)
        :return: SuccessResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_alert_notification_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_channel_id' is set
        if self.api_client.client_side_validation and ('notification_channel_id' not in params or
                                                       params['notification_channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_channel_id` when calling `delete_alert_notification_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_channel_id' in params:
            path_params['notification_channel_id'] = params['notification_channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/alert-notifications/{notification_channel_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_alert_notification_channel_by_uid(self, notification_channel_uid, **kwargs):  # noqa: E501
        """Delete alert notification by UID.  # noqa: E501

        Deletes an existing notification channel identified by UID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_alert_notification_channel_by_uid(notification_channel_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_channel_uid: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_alert_notification_channel_by_uid_with_http_info(notification_channel_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_alert_notification_channel_by_uid_with_http_info(notification_channel_uid, **kwargs)  # noqa: E501
            return data

    def delete_alert_notification_channel_by_uid_with_http_info(self, notification_channel_uid, **kwargs):  # noqa: E501
        """Delete alert notification by UID.  # noqa: E501

        Deletes an existing notification channel identified by UID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_alert_notification_channel_by_uid_with_http_info(notification_channel_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_channel_uid: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_channel_uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_alert_notification_channel_by_uid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_channel_uid' is set
        if self.api_client.client_side_validation and ('notification_channel_uid' not in params or
                                                       params['notification_channel_uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_channel_uid` when calling `delete_alert_notification_channel_by_uid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_channel_uid' in params:
            path_params['notification_channel_uid'] = params['notification_channel_uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/alert-notifications/uid/{notification_channel_uid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alert_notification_channel_by_id(self, notification_channel_id, **kwargs):  # noqa: E501
        """Get notification channel by ID.  # noqa: E501

        Returns the notification channel given the notification channel ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alert_notification_channel_by_id(notification_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int notification_channel_id: (required)
        :return: AlertNotification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_alert_notification_channel_by_id_with_http_info(notification_channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_alert_notification_channel_by_id_with_http_info(notification_channel_id, **kwargs)  # noqa: E501
            return data

    def get_alert_notification_channel_by_id_with_http_info(self, notification_channel_id, **kwargs):  # noqa: E501
        """Get notification channel by ID.  # noqa: E501

        Returns the notification channel given the notification channel ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alert_notification_channel_by_id_with_http_info(notification_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int notification_channel_id: (required)
        :return: AlertNotification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alert_notification_channel_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_channel_id' is set
        if self.api_client.client_side_validation and ('notification_channel_id' not in params or
                                                       params['notification_channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_channel_id` when calling `get_alert_notification_channel_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_channel_id' in params:
            path_params['notification_channel_id'] = params['notification_channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/alert-notifications/{notification_channel_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertNotification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alert_notification_channel_by_uid(self, notification_channel_uid, **kwargs):  # noqa: E501
        """Get notification channel by UID  # noqa: E501

        Returns the notification channel given the notification channel UID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alert_notification_channel_by_uid(notification_channel_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_channel_uid: (required)
        :return: AlertNotification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_alert_notification_channel_by_uid_with_http_info(notification_channel_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_alert_notification_channel_by_uid_with_http_info(notification_channel_uid, **kwargs)  # noqa: E501
            return data

    def get_alert_notification_channel_by_uid_with_http_info(self, notification_channel_uid, **kwargs):  # noqa: E501
        """Get notification channel by UID  # noqa: E501

        Returns the notification channel given the notification channel UID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alert_notification_channel_by_uid_with_http_info(notification_channel_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_channel_uid: (required)
        :return: AlertNotification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_channel_uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alert_notification_channel_by_uid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_channel_uid' is set
        if self.api_client.client_side_validation and ('notification_channel_uid' not in params or
                                                       params['notification_channel_uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_channel_uid` when calling `get_alert_notification_channel_by_uid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_channel_uid' in params:
            path_params['notification_channel_uid'] = params['notification_channel_uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/alert-notifications/uid/{notification_channel_uid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertNotification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alert_notification_channels(self, **kwargs):  # noqa: E501
        """Get all notification channels.  # noqa: E501

        Returns all notification channels that the authenticated user has permission to view.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alert_notification_channels(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AlertNotification]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_alert_notification_channels_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_alert_notification_channels_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_alert_notification_channels_with_http_info(self, **kwargs):  # noqa: E501
        """Get all notification channels.  # noqa: E501

        Returns all notification channels that the authenticated user has permission to view.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alert_notification_channels_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AlertNotification]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alert_notification_channels" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/alert-notifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AlertNotification]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alert_notification_lookup(self, **kwargs):  # noqa: E501
        """Get all notification channels (lookup)  # noqa: E501

        Returns all notification channels, but with less detailed information. Accessible by any authenticated user and is mainly used by providing alert notification channels in Grafana UI when configuring alert rule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alert_notification_lookup(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AlertNotificationLookup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_alert_notification_lookup_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_alert_notification_lookup_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_alert_notification_lookup_with_http_info(self, **kwargs):  # noqa: E501
        """Get all notification channels (lookup)  # noqa: E501

        Returns all notification channels, but with less detailed information. Accessible by any authenticated user and is mainly used by providing alert notification channels in Grafana UI when configuring alert rule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_alert_notification_lookup_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AlertNotificationLookup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alert_notification_lookup" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/alert-notifications/lookup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AlertNotificationLookup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification_channel_test(self, body, **kwargs):  # noqa: E501
        """Test notification channel.  # noqa: E501

        Sends a test notification to the channel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_channel_test(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NotificationTestCommand body: (required)
        :return: SuccessResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notification_channel_test_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.notification_channel_test_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def notification_channel_test_with_http_info(self, body, **kwargs):  # noqa: E501
        """Test notification channel.  # noqa: E501

        Sends a test notification to the channel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_channel_test_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NotificationTestCommand body: (required)
        :return: SuccessResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification_channel_test" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `notification_channel_test`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/alert-notifications/test', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_alert_notification_channel(self, body, notification_channel_id, **kwargs):  # noqa: E501
        """Update notification channel by ID.  # noqa: E501

        Updates an existing notification channel identified by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_alert_notification_channel(body, notification_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAlertNotificationCommand body: (required)
        :param int notification_channel_id: (required)
        :return: AlertNotification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_alert_notification_channel_with_http_info(body, notification_channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_alert_notification_channel_with_http_info(body, notification_channel_id, **kwargs)  # noqa: E501
            return data

    def update_alert_notification_channel_with_http_info(self, body, notification_channel_id, **kwargs):  # noqa: E501
        """Update notification channel by ID.  # noqa: E501

        Updates an existing notification channel identified by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_alert_notification_channel_with_http_info(body, notification_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAlertNotificationCommand body: (required)
        :param int notification_channel_id: (required)
        :return: AlertNotification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'notification_channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_alert_notification_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_alert_notification_channel`")  # noqa: E501
        # verify the required parameter 'notification_channel_id' is set
        if self.api_client.client_side_validation and ('notification_channel_id' not in params or
                                                       params['notification_channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_channel_id` when calling `update_alert_notification_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_channel_id' in params:
            path_params['notification_channel_id'] = params['notification_channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/alert-notifications/{notification_channel_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertNotification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_alert_notification_channel_by_uid(self, body, notification_channel_uid, **kwargs):  # noqa: E501
        """Update notification channel by UID.  # noqa: E501

        Updates an existing notification channel identified by uid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_alert_notification_channel_by_uid(body, notification_channel_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAlertNotificationWithUidCommand body: (required)
        :param str notification_channel_uid: (required)
        :return: AlertNotification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_alert_notification_channel_by_uid_with_http_info(body, notification_channel_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_alert_notification_channel_by_uid_with_http_info(body, notification_channel_uid, **kwargs)  # noqa: E501
            return data

    def update_alert_notification_channel_by_uid_with_http_info(self, body, notification_channel_uid, **kwargs):  # noqa: E501
        """Update notification channel by UID.  # noqa: E501

        Updates an existing notification channel identified by uid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_alert_notification_channel_by_uid_with_http_info(body, notification_channel_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAlertNotificationWithUidCommand body: (required)
        :param str notification_channel_uid: (required)
        :return: AlertNotification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'notification_channel_uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_alert_notification_channel_by_uid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_alert_notification_channel_by_uid`")  # noqa: E501
        # verify the required parameter 'notification_channel_uid' is set
        if self.api_client.client_side_validation and ('notification_channel_uid' not in params or
                                                       params['notification_channel_uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_channel_uid` when calling `update_alert_notification_channel_by_uid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_channel_uid' in params:
            path_params['notification_channel_uid'] = params['notification_channel_uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/alert-notifications/uid/{notification_channel_uid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertNotification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
