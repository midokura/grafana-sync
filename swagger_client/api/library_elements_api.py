# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LibraryElementsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_library_element(self, body, **kwargs):  # noqa: E501
        """Create library element.  # noqa: E501

        Creates a new library element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_library_element(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateLibraryElementCommand body: (required)
        :return: LibraryElementResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_library_element_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_library_element_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_library_element_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create library element.  # noqa: E501

        Creates a new library element.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_library_element_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateLibraryElementCommand body: (required)
        :return: LibraryElementResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_library_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_library_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/library-elements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LibraryElementResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_library_element_by_uid(self, library_element_uid, **kwargs):  # noqa: E501
        """Delete library element.  # noqa: E501

        Deletes an existing library element as specified by the UID. This operation cannot be reverted. You cannot delete a library element that is connected. This operation cannot be reverted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_library_element_by_uid(library_element_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str library_element_uid: (required)
        :return: SuccessResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_library_element_by_uid_with_http_info(library_element_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_library_element_by_uid_with_http_info(library_element_uid, **kwargs)  # noqa: E501
            return data

    def delete_library_element_by_uid_with_http_info(self, library_element_uid, **kwargs):  # noqa: E501
        """Delete library element.  # noqa: E501

        Deletes an existing library element as specified by the UID. This operation cannot be reverted. You cannot delete a library element that is connected. This operation cannot be reverted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_library_element_by_uid_with_http_info(library_element_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str library_element_uid: (required)
        :return: SuccessResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['library_element_uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_library_element_by_uid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'library_element_uid' is set
        if self.api_client.client_side_validation and ('library_element_uid' not in params or
                                                       params['library_element_uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `library_element_uid` when calling `delete_library_element_by_uid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_element_uid' in params:
            path_params['library_element_uid'] = params['library_element_uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/library-elements/{library_element_uid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_library_element_by_name(self, library_element_name, **kwargs):  # noqa: E501
        """Get library element by name.  # noqa: E501

        Returns a library element with the given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_library_element_by_name(library_element_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str library_element_name: (required)
        :return: LibraryElementResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_library_element_by_name_with_http_info(library_element_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_library_element_by_name_with_http_info(library_element_name, **kwargs)  # noqa: E501
            return data

    def get_library_element_by_name_with_http_info(self, library_element_name, **kwargs):  # noqa: E501
        """Get library element by name.  # noqa: E501

        Returns a library element with the given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_library_element_by_name_with_http_info(library_element_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str library_element_name: (required)
        :return: LibraryElementResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['library_element_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_library_element_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'library_element_name' is set
        if self.api_client.client_side_validation and ('library_element_name' not in params or
                                                       params['library_element_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `library_element_name` when calling `get_library_element_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_element_name' in params:
            path_params['library_element_name'] = params['library_element_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/library-elements/name/{library_element_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LibraryElementResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_library_element_by_uid(self, library_element_uid, **kwargs):  # noqa: E501
        """Get library element by UID.  # noqa: E501

        Returns a library element with the given UID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_library_element_by_uid(library_element_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str library_element_uid: (required)
        :return: LibraryElementResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_library_element_by_uid_with_http_info(library_element_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_library_element_by_uid_with_http_info(library_element_uid, **kwargs)  # noqa: E501
            return data

    def get_library_element_by_uid_with_http_info(self, library_element_uid, **kwargs):  # noqa: E501
        """Get library element by UID.  # noqa: E501

        Returns a library element with the given UID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_library_element_by_uid_with_http_info(library_element_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str library_element_uid: (required)
        :return: LibraryElementResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['library_element_uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_library_element_by_uid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'library_element_uid' is set
        if self.api_client.client_side_validation and ('library_element_uid' not in params or
                                                       params['library_element_uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `library_element_uid` when calling `get_library_element_by_uid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_element_uid' in params:
            path_params['library_element_uid'] = params['library_element_uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/library-elements/{library_element_uid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LibraryElementResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_library_element_connections(self, library_element_uid, **kwargs):  # noqa: E501
        """Get library element connections.  # noqa: E501

        Returns a list of connections for a library element based on the UID specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_library_element_connections(library_element_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str library_element_uid: (required)
        :return: LibraryElementConnectionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_library_element_connections_with_http_info(library_element_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_library_element_connections_with_http_info(library_element_uid, **kwargs)  # noqa: E501
            return data

    def get_library_element_connections_with_http_info(self, library_element_uid, **kwargs):  # noqa: E501
        """Get library element connections.  # noqa: E501

        Returns a list of connections for a library element based on the UID specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_library_element_connections_with_http_info(library_element_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str library_element_uid: (required)
        :return: LibraryElementConnectionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['library_element_uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_library_element_connections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'library_element_uid' is set
        if self.api_client.client_side_validation and ('library_element_uid' not in params or
                                                       params['library_element_uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `library_element_uid` when calling `get_library_element_connections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_element_uid' in params:
            path_params['library_element_uid'] = params['library_element_uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/library-elements/{library_element_uid}/connections/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LibraryElementConnectionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_library_elements(self, **kwargs):  # noqa: E501
        """Get all library elements.  # noqa: E501

        Returns a list of all library elements the authenticated user has permission to view. Use the `perPage` query parameter to control the maximum number of library elements returned; the default limit is `100`. You can also use the `page` query parameter to fetch library elements from any page other than the first one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_library_elements(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_string: Part of the name or description searched for.
        :param int kind: Kind of element to search for.
        :param str sort_direction: Sort order of elements.
        :param str type_filter: A comma separated list of types to filter the elements by
        :param str exclude_uid: Element UID to exclude from search results.
        :param str folder_filter: A comma separated list of folder ID(s) to filter the elements by.
        :param int per_page: The number of results per page.
        :param int page: The page for a set of records, given that only perPage records are returned at a time. Numbering starts at 1.
        :return: LibraryElementSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_library_elements_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_library_elements_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_library_elements_with_http_info(self, **kwargs):  # noqa: E501
        """Get all library elements.  # noqa: E501

        Returns a list of all library elements the authenticated user has permission to view. Use the `perPage` query parameter to control the maximum number of library elements returned; the default limit is `100`. You can also use the `page` query parameter to fetch library elements from any page other than the first one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_library_elements_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_string: Part of the name or description searched for.
        :param int kind: Kind of element to search for.
        :param str sort_direction: Sort order of elements.
        :param str type_filter: A comma separated list of types to filter the elements by
        :param str exclude_uid: Element UID to exclude from search results.
        :param str folder_filter: A comma separated list of folder ID(s) to filter the elements by.
        :param int per_page: The number of results per page.
        :param int page: The page for a set of records, given that only perPage records are returned at a time. Numbering starts at 1.
        :return: LibraryElementSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_string', 'kind', 'sort_direction', 'type_filter', 'exclude_uid', 'folder_filter', 'per_page', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_library_elements" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_string' in params:
            query_params.append(('searchString', params['search_string']))  # noqa: E501
        if 'kind' in params:
            query_params.append(('kind', params['kind']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sortDirection', params['sort_direction']))  # noqa: E501
        if 'type_filter' in params:
            query_params.append(('typeFilter', params['type_filter']))  # noqa: E501
        if 'exclude_uid' in params:
            query_params.append(('excludeUid', params['exclude_uid']))  # noqa: E501
        if 'folder_filter' in params:
            query_params.append(('folderFilter', params['folder_filter']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('perPage', params['per_page']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/library-elements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LibraryElementSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_library_element(self, body, library_element_uid, **kwargs):  # noqa: E501
        """Update library element.  # noqa: E501

        Updates an existing library element identified by uid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_library_element(body, library_element_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchLibraryElementCommand body: (required)
        :param str library_element_uid: (required)
        :return: LibraryElementResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_library_element_with_http_info(body, library_element_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_library_element_with_http_info(body, library_element_uid, **kwargs)  # noqa: E501
            return data

    def update_library_element_with_http_info(self, body, library_element_uid, **kwargs):  # noqa: E501
        """Update library element.  # noqa: E501

        Updates an existing library element identified by uid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_library_element_with_http_info(body, library_element_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchLibraryElementCommand body: (required)
        :param str library_element_uid: (required)
        :return: LibraryElementResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'library_element_uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_library_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_library_element`")  # noqa: E501
        # verify the required parameter 'library_element_uid' is set
        if self.api_client.client_side_validation and ('library_element_uid' not in params or
                                                       params['library_element_uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `library_element_uid` when calling `update_library_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'library_element_uid' in params:
            path_params['library_element_uid'] = params['library_element_uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'basic']  # noqa: E501

        return self.api_client.call_api(
            '/library-elements/{library_element_uid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LibraryElementResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
