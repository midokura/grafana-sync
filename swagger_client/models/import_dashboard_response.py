# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ImportDashboardResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dashboard_id': 'int',
        'description': 'str',
        'folder_id': 'int',
        'imported': 'bool',
        'imported_revision': 'int',
        'imported_uri': 'str',
        'imported_url': 'str',
        'path': 'str',
        'plugin_id': 'str',
        'removed': 'bool',
        'revision': 'int',
        'slug': 'str',
        'title': 'str',
        'uid': 'str'
    }

    attribute_map = {
        'dashboard_id': 'dashboardId',
        'description': 'description',
        'folder_id': 'folderId',
        'imported': 'imported',
        'imported_revision': 'importedRevision',
        'imported_uri': 'importedUri',
        'imported_url': 'importedUrl',
        'path': 'path',
        'plugin_id': 'pluginId',
        'removed': 'removed',
        'revision': 'revision',
        'slug': 'slug',
        'title': 'title',
        'uid': 'uid'
    }

    def __init__(self, dashboard_id=None, description=None, folder_id=None, imported=None, imported_revision=None, imported_uri=None, imported_url=None, path=None, plugin_id=None, removed=None, revision=None, slug=None, title=None, uid=None, _configuration=None):  # noqa: E501
        """ImportDashboardResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dashboard_id = None
        self._description = None
        self._folder_id = None
        self._imported = None
        self._imported_revision = None
        self._imported_uri = None
        self._imported_url = None
        self._path = None
        self._plugin_id = None
        self._removed = None
        self._revision = None
        self._slug = None
        self._title = None
        self._uid = None
        self.discriminator = None

        if dashboard_id is not None:
            self.dashboard_id = dashboard_id
        if description is not None:
            self.description = description
        if folder_id is not None:
            self.folder_id = folder_id
        if imported is not None:
            self.imported = imported
        if imported_revision is not None:
            self.imported_revision = imported_revision
        if imported_uri is not None:
            self.imported_uri = imported_uri
        if imported_url is not None:
            self.imported_url = imported_url
        if path is not None:
            self.path = path
        if plugin_id is not None:
            self.plugin_id = plugin_id
        if removed is not None:
            self.removed = removed
        if revision is not None:
            self.revision = revision
        if slug is not None:
            self.slug = slug
        if title is not None:
            self.title = title
        if uid is not None:
            self.uid = uid

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this ImportDashboardResponse.  # noqa: E501


        :return: The dashboard_id of this ImportDashboardResponse.  # noqa: E501
        :rtype: int
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this ImportDashboardResponse.


        :param dashboard_id: The dashboard_id of this ImportDashboardResponse.  # noqa: E501
        :type: int
        """

        self._dashboard_id = dashboard_id

    @property
    def description(self):
        """Gets the description of this ImportDashboardResponse.  # noqa: E501


        :return: The description of this ImportDashboardResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImportDashboardResponse.


        :param description: The description of this ImportDashboardResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def folder_id(self):
        """Gets the folder_id of this ImportDashboardResponse.  # noqa: E501


        :return: The folder_id of this ImportDashboardResponse.  # noqa: E501
        :rtype: int
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this ImportDashboardResponse.


        :param folder_id: The folder_id of this ImportDashboardResponse.  # noqa: E501
        :type: int
        """

        self._folder_id = folder_id

    @property
    def imported(self):
        """Gets the imported of this ImportDashboardResponse.  # noqa: E501


        :return: The imported of this ImportDashboardResponse.  # noqa: E501
        :rtype: bool
        """
        return self._imported

    @imported.setter
    def imported(self, imported):
        """Sets the imported of this ImportDashboardResponse.


        :param imported: The imported of this ImportDashboardResponse.  # noqa: E501
        :type: bool
        """

        self._imported = imported

    @property
    def imported_revision(self):
        """Gets the imported_revision of this ImportDashboardResponse.  # noqa: E501


        :return: The imported_revision of this ImportDashboardResponse.  # noqa: E501
        :rtype: int
        """
        return self._imported_revision

    @imported_revision.setter
    def imported_revision(self, imported_revision):
        """Sets the imported_revision of this ImportDashboardResponse.


        :param imported_revision: The imported_revision of this ImportDashboardResponse.  # noqa: E501
        :type: int
        """

        self._imported_revision = imported_revision

    @property
    def imported_uri(self):
        """Gets the imported_uri of this ImportDashboardResponse.  # noqa: E501


        :return: The imported_uri of this ImportDashboardResponse.  # noqa: E501
        :rtype: str
        """
        return self._imported_uri

    @imported_uri.setter
    def imported_uri(self, imported_uri):
        """Sets the imported_uri of this ImportDashboardResponse.


        :param imported_uri: The imported_uri of this ImportDashboardResponse.  # noqa: E501
        :type: str
        """

        self._imported_uri = imported_uri

    @property
    def imported_url(self):
        """Gets the imported_url of this ImportDashboardResponse.  # noqa: E501


        :return: The imported_url of this ImportDashboardResponse.  # noqa: E501
        :rtype: str
        """
        return self._imported_url

    @imported_url.setter
    def imported_url(self, imported_url):
        """Sets the imported_url of this ImportDashboardResponse.


        :param imported_url: The imported_url of this ImportDashboardResponse.  # noqa: E501
        :type: str
        """

        self._imported_url = imported_url

    @property
    def path(self):
        """Gets the path of this ImportDashboardResponse.  # noqa: E501


        :return: The path of this ImportDashboardResponse.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ImportDashboardResponse.


        :param path: The path of this ImportDashboardResponse.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def plugin_id(self):
        """Gets the plugin_id of this ImportDashboardResponse.  # noqa: E501


        :return: The plugin_id of this ImportDashboardResponse.  # noqa: E501
        :rtype: str
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """Sets the plugin_id of this ImportDashboardResponse.


        :param plugin_id: The plugin_id of this ImportDashboardResponse.  # noqa: E501
        :type: str
        """

        self._plugin_id = plugin_id

    @property
    def removed(self):
        """Gets the removed of this ImportDashboardResponse.  # noqa: E501


        :return: The removed of this ImportDashboardResponse.  # noqa: E501
        :rtype: bool
        """
        return self._removed

    @removed.setter
    def removed(self, removed):
        """Sets the removed of this ImportDashboardResponse.


        :param removed: The removed of this ImportDashboardResponse.  # noqa: E501
        :type: bool
        """

        self._removed = removed

    @property
    def revision(self):
        """Gets the revision of this ImportDashboardResponse.  # noqa: E501


        :return: The revision of this ImportDashboardResponse.  # noqa: E501
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this ImportDashboardResponse.


        :param revision: The revision of this ImportDashboardResponse.  # noqa: E501
        :type: int
        """

        self._revision = revision

    @property
    def slug(self):
        """Gets the slug of this ImportDashboardResponse.  # noqa: E501


        :return: The slug of this ImportDashboardResponse.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this ImportDashboardResponse.


        :param slug: The slug of this ImportDashboardResponse.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def title(self):
        """Gets the title of this ImportDashboardResponse.  # noqa: E501


        :return: The title of this ImportDashboardResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ImportDashboardResponse.


        :param title: The title of this ImportDashboardResponse.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def uid(self):
        """Gets the uid of this ImportDashboardResponse.  # noqa: E501


        :return: The uid of this ImportDashboardResponse.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this ImportDashboardResponse.


        :param uid: The uid of this ImportDashboardResponse.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportDashboardResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportDashboardResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportDashboardResponse):
            return True

        return self.to_dict() != other.to_dict()
