# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AnnotationActions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_add': 'bool',
        'can_delete': 'bool',
        'can_edit': 'bool'
    }

    attribute_map = {
        'can_add': 'canAdd',
        'can_delete': 'canDelete',
        'can_edit': 'canEdit'
    }

    def __init__(self, can_add=None, can_delete=None, can_edit=None, _configuration=None):  # noqa: E501
        """AnnotationActions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._can_add = None
        self._can_delete = None
        self._can_edit = None
        self.discriminator = None

        if can_add is not None:
            self.can_add = can_add
        if can_delete is not None:
            self.can_delete = can_delete
        if can_edit is not None:
            self.can_edit = can_edit

    @property
    def can_add(self):
        """Gets the can_add of this AnnotationActions.  # noqa: E501


        :return: The can_add of this AnnotationActions.  # noqa: E501
        :rtype: bool
        """
        return self._can_add

    @can_add.setter
    def can_add(self, can_add):
        """Sets the can_add of this AnnotationActions.


        :param can_add: The can_add of this AnnotationActions.  # noqa: E501
        :type: bool
        """

        self._can_add = can_add

    @property
    def can_delete(self):
        """Gets the can_delete of this AnnotationActions.  # noqa: E501


        :return: The can_delete of this AnnotationActions.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this AnnotationActions.


        :param can_delete: The can_delete of this AnnotationActions.  # noqa: E501
        :type: bool
        """

        self._can_delete = can_delete

    @property
    def can_edit(self):
        """Gets the can_edit of this AnnotationActions.  # noqa: E501


        :return: The can_edit of this AnnotationActions.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this AnnotationActions.


        :param can_edit: The can_edit of this AnnotationActions.  # noqa: E501
        :type: bool
        """

        self._can_edit = can_edit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnotationActions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnotationActions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnnotationActions):
            return True

        return self.to_dict() != other.to_dict()
