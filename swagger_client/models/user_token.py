# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_token': 'str',
        'auth_token_seen': 'bool',
        'client_ip': 'str',
        'created_at': 'int',
        'id': 'int',
        'prev_auth_token': 'str',
        'revoked_at': 'int',
        'rotated_at': 'int',
        'seen_at': 'int',
        'unhashed_token': 'str',
        'updated_at': 'int',
        'user_agent': 'str',
        'user_id': 'int'
    }

    attribute_map = {
        'auth_token': 'AuthToken',
        'auth_token_seen': 'AuthTokenSeen',
        'client_ip': 'ClientIp',
        'created_at': 'CreatedAt',
        'id': 'Id',
        'prev_auth_token': 'PrevAuthToken',
        'revoked_at': 'RevokedAt',
        'rotated_at': 'RotatedAt',
        'seen_at': 'SeenAt',
        'unhashed_token': 'UnhashedToken',
        'updated_at': 'UpdatedAt',
        'user_agent': 'UserAgent',
        'user_id': 'UserId'
    }

    def __init__(self, auth_token=None, auth_token_seen=None, client_ip=None, created_at=None, id=None, prev_auth_token=None, revoked_at=None, rotated_at=None, seen_at=None, unhashed_token=None, updated_at=None, user_agent=None, user_id=None, _configuration=None):  # noqa: E501
        """UserToken - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auth_token = None
        self._auth_token_seen = None
        self._client_ip = None
        self._created_at = None
        self._id = None
        self._prev_auth_token = None
        self._revoked_at = None
        self._rotated_at = None
        self._seen_at = None
        self._unhashed_token = None
        self._updated_at = None
        self._user_agent = None
        self._user_id = None
        self.discriminator = None

        if auth_token is not None:
            self.auth_token = auth_token
        if auth_token_seen is not None:
            self.auth_token_seen = auth_token_seen
        if client_ip is not None:
            self.client_ip = client_ip
        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if prev_auth_token is not None:
            self.prev_auth_token = prev_auth_token
        if revoked_at is not None:
            self.revoked_at = revoked_at
        if rotated_at is not None:
            self.rotated_at = rotated_at
        if seen_at is not None:
            self.seen_at = seen_at
        if unhashed_token is not None:
            self.unhashed_token = unhashed_token
        if updated_at is not None:
            self.updated_at = updated_at
        if user_agent is not None:
            self.user_agent = user_agent
        if user_id is not None:
            self.user_id = user_id

    @property
    def auth_token(self):
        """Gets the auth_token of this UserToken.  # noqa: E501


        :return: The auth_token of this UserToken.  # noqa: E501
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this UserToken.


        :param auth_token: The auth_token of this UserToken.  # noqa: E501
        :type: str
        """

        self._auth_token = auth_token

    @property
    def auth_token_seen(self):
        """Gets the auth_token_seen of this UserToken.  # noqa: E501


        :return: The auth_token_seen of this UserToken.  # noqa: E501
        :rtype: bool
        """
        return self._auth_token_seen

    @auth_token_seen.setter
    def auth_token_seen(self, auth_token_seen):
        """Sets the auth_token_seen of this UserToken.


        :param auth_token_seen: The auth_token_seen of this UserToken.  # noqa: E501
        :type: bool
        """

        self._auth_token_seen = auth_token_seen

    @property
    def client_ip(self):
        """Gets the client_ip of this UserToken.  # noqa: E501


        :return: The client_ip of this UserToken.  # noqa: E501
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this UserToken.


        :param client_ip: The client_ip of this UserToken.  # noqa: E501
        :type: str
        """

        self._client_ip = client_ip

    @property
    def created_at(self):
        """Gets the created_at of this UserToken.  # noqa: E501


        :return: The created_at of this UserToken.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserToken.


        :param created_at: The created_at of this UserToken.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this UserToken.  # noqa: E501


        :return: The id of this UserToken.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserToken.


        :param id: The id of this UserToken.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def prev_auth_token(self):
        """Gets the prev_auth_token of this UserToken.  # noqa: E501


        :return: The prev_auth_token of this UserToken.  # noqa: E501
        :rtype: str
        """
        return self._prev_auth_token

    @prev_auth_token.setter
    def prev_auth_token(self, prev_auth_token):
        """Sets the prev_auth_token of this UserToken.


        :param prev_auth_token: The prev_auth_token of this UserToken.  # noqa: E501
        :type: str
        """

        self._prev_auth_token = prev_auth_token

    @property
    def revoked_at(self):
        """Gets the revoked_at of this UserToken.  # noqa: E501


        :return: The revoked_at of this UserToken.  # noqa: E501
        :rtype: int
        """
        return self._revoked_at

    @revoked_at.setter
    def revoked_at(self, revoked_at):
        """Sets the revoked_at of this UserToken.


        :param revoked_at: The revoked_at of this UserToken.  # noqa: E501
        :type: int
        """

        self._revoked_at = revoked_at

    @property
    def rotated_at(self):
        """Gets the rotated_at of this UserToken.  # noqa: E501


        :return: The rotated_at of this UserToken.  # noqa: E501
        :rtype: int
        """
        return self._rotated_at

    @rotated_at.setter
    def rotated_at(self, rotated_at):
        """Sets the rotated_at of this UserToken.


        :param rotated_at: The rotated_at of this UserToken.  # noqa: E501
        :type: int
        """

        self._rotated_at = rotated_at

    @property
    def seen_at(self):
        """Gets the seen_at of this UserToken.  # noqa: E501


        :return: The seen_at of this UserToken.  # noqa: E501
        :rtype: int
        """
        return self._seen_at

    @seen_at.setter
    def seen_at(self, seen_at):
        """Sets the seen_at of this UserToken.


        :param seen_at: The seen_at of this UserToken.  # noqa: E501
        :type: int
        """

        self._seen_at = seen_at

    @property
    def unhashed_token(self):
        """Gets the unhashed_token of this UserToken.  # noqa: E501


        :return: The unhashed_token of this UserToken.  # noqa: E501
        :rtype: str
        """
        return self._unhashed_token

    @unhashed_token.setter
    def unhashed_token(self, unhashed_token):
        """Sets the unhashed_token of this UserToken.


        :param unhashed_token: The unhashed_token of this UserToken.  # noqa: E501
        :type: str
        """

        self._unhashed_token = unhashed_token

    @property
    def updated_at(self):
        """Gets the updated_at of this UserToken.  # noqa: E501


        :return: The updated_at of this UserToken.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UserToken.


        :param updated_at: The updated_at of this UserToken.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def user_agent(self):
        """Gets the user_agent of this UserToken.  # noqa: E501


        :return: The user_agent of this UserToken.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this UserToken.


        :param user_agent: The user_agent of this UserToken.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    @property
    def user_id(self):
        """Gets the user_id of this UserToken.  # noqa: E501


        :return: The user_id of this UserToken.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserToken.


        :param user_id: The user_id of this UserToken.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserToken):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserToken):
            return True

        return self.to_dict() != other.to_dict()
