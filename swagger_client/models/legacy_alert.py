# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LegacyAlert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'dashboard_id': 'int',
        'eval_data': 'Json',
        'execution_error': 'str',
        '_for': 'Duration',
        'frequency': 'int',
        'handler': 'int',
        'id': 'int',
        'message': 'str',
        'name': 'str',
        'new_state_date': 'datetime',
        'org_id': 'int',
        'panel_id': 'int',
        'settings': 'Json',
        'severity': 'str',
        'silenced': 'bool',
        'state': 'AlertStateType',
        'state_changes': 'int',
        'updated': 'datetime',
        'version': 'int'
    }

    attribute_map = {
        'created': 'Created',
        'dashboard_id': 'DashboardId',
        'eval_data': 'EvalData',
        'execution_error': 'ExecutionError',
        '_for': 'For',
        'frequency': 'Frequency',
        'handler': 'Handler',
        'id': 'Id',
        'message': 'Message',
        'name': 'Name',
        'new_state_date': 'NewStateDate',
        'org_id': 'OrgId',
        'panel_id': 'PanelId',
        'settings': 'Settings',
        'severity': 'Severity',
        'silenced': 'Silenced',
        'state': 'State',
        'state_changes': 'StateChanges',
        'updated': 'Updated',
        'version': 'Version'
    }

    def __init__(self, created=None, dashboard_id=None, eval_data=None, execution_error=None, _for=None, frequency=None, handler=None, id=None, message=None, name=None, new_state_date=None, org_id=None, panel_id=None, settings=None, severity=None, silenced=None, state=None, state_changes=None, updated=None, version=None, _configuration=None):  # noqa: E501
        """LegacyAlert - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created = None
        self._dashboard_id = None
        self._eval_data = None
        self._execution_error = None
        self.__for = None
        self._frequency = None
        self._handler = None
        self._id = None
        self._message = None
        self._name = None
        self._new_state_date = None
        self._org_id = None
        self._panel_id = None
        self._settings = None
        self._severity = None
        self._silenced = None
        self._state = None
        self._state_changes = None
        self._updated = None
        self._version = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if dashboard_id is not None:
            self.dashboard_id = dashboard_id
        if eval_data is not None:
            self.eval_data = eval_data
        if execution_error is not None:
            self.execution_error = execution_error
        if _for is not None:
            self._for = _for
        if frequency is not None:
            self.frequency = frequency
        if handler is not None:
            self.handler = handler
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if name is not None:
            self.name = name
        if new_state_date is not None:
            self.new_state_date = new_state_date
        if org_id is not None:
            self.org_id = org_id
        if panel_id is not None:
            self.panel_id = panel_id
        if settings is not None:
            self.settings = settings
        if severity is not None:
            self.severity = severity
        if silenced is not None:
            self.silenced = silenced
        if state is not None:
            self.state = state
        if state_changes is not None:
            self.state_changes = state_changes
        if updated is not None:
            self.updated = updated
        if version is not None:
            self.version = version

    @property
    def created(self):
        """Gets the created of this LegacyAlert.  # noqa: E501


        :return: The created of this LegacyAlert.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this LegacyAlert.


        :param created: The created of this LegacyAlert.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this LegacyAlert.  # noqa: E501


        :return: The dashboard_id of this LegacyAlert.  # noqa: E501
        :rtype: int
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this LegacyAlert.


        :param dashboard_id: The dashboard_id of this LegacyAlert.  # noqa: E501
        :type: int
        """

        self._dashboard_id = dashboard_id

    @property
    def eval_data(self):
        """Gets the eval_data of this LegacyAlert.  # noqa: E501


        :return: The eval_data of this LegacyAlert.  # noqa: E501
        :rtype: Json
        """
        return self._eval_data

    @eval_data.setter
    def eval_data(self, eval_data):
        """Sets the eval_data of this LegacyAlert.


        :param eval_data: The eval_data of this LegacyAlert.  # noqa: E501
        :type: Json
        """

        self._eval_data = eval_data

    @property
    def execution_error(self):
        """Gets the execution_error of this LegacyAlert.  # noqa: E501


        :return: The execution_error of this LegacyAlert.  # noqa: E501
        :rtype: str
        """
        return self._execution_error

    @execution_error.setter
    def execution_error(self, execution_error):
        """Sets the execution_error of this LegacyAlert.


        :param execution_error: The execution_error of this LegacyAlert.  # noqa: E501
        :type: str
        """

        self._execution_error = execution_error

    @property
    def _for(self):
        """Gets the _for of this LegacyAlert.  # noqa: E501


        :return: The _for of this LegacyAlert.  # noqa: E501
        :rtype: Duration
        """
        return self.__for

    @_for.setter
    def _for(self, _for):
        """Sets the _for of this LegacyAlert.


        :param _for: The _for of this LegacyAlert.  # noqa: E501
        :type: Duration
        """

        self.__for = _for

    @property
    def frequency(self):
        """Gets the frequency of this LegacyAlert.  # noqa: E501


        :return: The frequency of this LegacyAlert.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this LegacyAlert.


        :param frequency: The frequency of this LegacyAlert.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def handler(self):
        """Gets the handler of this LegacyAlert.  # noqa: E501


        :return: The handler of this LegacyAlert.  # noqa: E501
        :rtype: int
        """
        return self._handler

    @handler.setter
    def handler(self, handler):
        """Sets the handler of this LegacyAlert.


        :param handler: The handler of this LegacyAlert.  # noqa: E501
        :type: int
        """

        self._handler = handler

    @property
    def id(self):
        """Gets the id of this LegacyAlert.  # noqa: E501


        :return: The id of this LegacyAlert.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LegacyAlert.


        :param id: The id of this LegacyAlert.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this LegacyAlert.  # noqa: E501


        :return: The message of this LegacyAlert.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LegacyAlert.


        :param message: The message of this LegacyAlert.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this LegacyAlert.  # noqa: E501


        :return: The name of this LegacyAlert.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LegacyAlert.


        :param name: The name of this LegacyAlert.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def new_state_date(self):
        """Gets the new_state_date of this LegacyAlert.  # noqa: E501


        :return: The new_state_date of this LegacyAlert.  # noqa: E501
        :rtype: datetime
        """
        return self._new_state_date

    @new_state_date.setter
    def new_state_date(self, new_state_date):
        """Sets the new_state_date of this LegacyAlert.


        :param new_state_date: The new_state_date of this LegacyAlert.  # noqa: E501
        :type: datetime
        """

        self._new_state_date = new_state_date

    @property
    def org_id(self):
        """Gets the org_id of this LegacyAlert.  # noqa: E501


        :return: The org_id of this LegacyAlert.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this LegacyAlert.


        :param org_id: The org_id of this LegacyAlert.  # noqa: E501
        :type: int
        """

        self._org_id = org_id

    @property
    def panel_id(self):
        """Gets the panel_id of this LegacyAlert.  # noqa: E501


        :return: The panel_id of this LegacyAlert.  # noqa: E501
        :rtype: int
        """
        return self._panel_id

    @panel_id.setter
    def panel_id(self, panel_id):
        """Sets the panel_id of this LegacyAlert.


        :param panel_id: The panel_id of this LegacyAlert.  # noqa: E501
        :type: int
        """

        self._panel_id = panel_id

    @property
    def settings(self):
        """Gets the settings of this LegacyAlert.  # noqa: E501


        :return: The settings of this LegacyAlert.  # noqa: E501
        :rtype: Json
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this LegacyAlert.


        :param settings: The settings of this LegacyAlert.  # noqa: E501
        :type: Json
        """

        self._settings = settings

    @property
    def severity(self):
        """Gets the severity of this LegacyAlert.  # noqa: E501


        :return: The severity of this LegacyAlert.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this LegacyAlert.


        :param severity: The severity of this LegacyAlert.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def silenced(self):
        """Gets the silenced of this LegacyAlert.  # noqa: E501


        :return: The silenced of this LegacyAlert.  # noqa: E501
        :rtype: bool
        """
        return self._silenced

    @silenced.setter
    def silenced(self, silenced):
        """Sets the silenced of this LegacyAlert.


        :param silenced: The silenced of this LegacyAlert.  # noqa: E501
        :type: bool
        """

        self._silenced = silenced

    @property
    def state(self):
        """Gets the state of this LegacyAlert.  # noqa: E501


        :return: The state of this LegacyAlert.  # noqa: E501
        :rtype: AlertStateType
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LegacyAlert.


        :param state: The state of this LegacyAlert.  # noqa: E501
        :type: AlertStateType
        """

        self._state = state

    @property
    def state_changes(self):
        """Gets the state_changes of this LegacyAlert.  # noqa: E501


        :return: The state_changes of this LegacyAlert.  # noqa: E501
        :rtype: int
        """
        return self._state_changes

    @state_changes.setter
    def state_changes(self, state_changes):
        """Sets the state_changes of this LegacyAlert.


        :param state_changes: The state_changes of this LegacyAlert.  # noqa: E501
        :type: int
        """

        self._state_changes = state_changes

    @property
    def updated(self):
        """Gets the updated of this LegacyAlert.  # noqa: E501


        :return: The updated of this LegacyAlert.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this LegacyAlert.


        :param updated: The updated of this LegacyAlert.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def version(self):
        """Gets the version of this LegacyAlert.  # noqa: E501


        :return: The version of this LegacyAlert.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LegacyAlert.


        :param version: The version of this LegacyAlert.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LegacyAlert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LegacyAlert):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LegacyAlert):
            return True

        return self.to_dict() != other.to_dict()
