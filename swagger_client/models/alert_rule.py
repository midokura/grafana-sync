# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AlertRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotations': 'dict(str, str)',
        'condition': 'str',
        'dashboard_uid': 'str',
        'data': 'list[AlertQuery]',
        'exec_err_state': 'str',
        '_for': 'Duration',
        'id': 'int',
        'interval_seconds': 'int',
        'labels': 'dict(str, str)',
        'namespace_uid': 'str',
        'no_data_state': 'str',
        'org_id': 'int',
        'panel_id': 'int',
        'rule_group': 'str',
        'rule_group_index': 'int',
        'title': 'str',
        'uid': 'str',
        'updated': 'datetime',
        'version': 'int'
    }

    attribute_map = {
        'annotations': 'Annotations',
        'condition': 'Condition',
        'dashboard_uid': 'DashboardUID',
        'data': 'Data',
        'exec_err_state': 'ExecErrState',
        '_for': 'For',
        'id': 'ID',
        'interval_seconds': 'IntervalSeconds',
        'labels': 'Labels',
        'namespace_uid': 'NamespaceUID',
        'no_data_state': 'NoDataState',
        'org_id': 'OrgID',
        'panel_id': 'PanelID',
        'rule_group': 'RuleGroup',
        'rule_group_index': 'RuleGroupIndex',
        'title': 'Title',
        'uid': 'UID',
        'updated': 'Updated',
        'version': 'Version'
    }

    def __init__(self, annotations=None, condition=None, dashboard_uid=None, data=None, exec_err_state=None, _for=None, id=None, interval_seconds=None, labels=None, namespace_uid=None, no_data_state=None, org_id=None, panel_id=None, rule_group=None, rule_group_index=None, title=None, uid=None, updated=None, version=None, _configuration=None):  # noqa: E501
        """AlertRule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._annotations = None
        self._condition = None
        self._dashboard_uid = None
        self._data = None
        self._exec_err_state = None
        self.__for = None
        self._id = None
        self._interval_seconds = None
        self._labels = None
        self._namespace_uid = None
        self._no_data_state = None
        self._org_id = None
        self._panel_id = None
        self._rule_group = None
        self._rule_group_index = None
        self._title = None
        self._uid = None
        self._updated = None
        self._version = None
        self.discriminator = None

        if annotations is not None:
            self.annotations = annotations
        if condition is not None:
            self.condition = condition
        if dashboard_uid is not None:
            self.dashboard_uid = dashboard_uid
        if data is not None:
            self.data = data
        if exec_err_state is not None:
            self.exec_err_state = exec_err_state
        if _for is not None:
            self._for = _for
        if id is not None:
            self.id = id
        if interval_seconds is not None:
            self.interval_seconds = interval_seconds
        if labels is not None:
            self.labels = labels
        if namespace_uid is not None:
            self.namespace_uid = namespace_uid
        if no_data_state is not None:
            self.no_data_state = no_data_state
        if org_id is not None:
            self.org_id = org_id
        if panel_id is not None:
            self.panel_id = panel_id
        if rule_group is not None:
            self.rule_group = rule_group
        if rule_group_index is not None:
            self.rule_group_index = rule_group_index
        if title is not None:
            self.title = title
        if uid is not None:
            self.uid = uid
        if updated is not None:
            self.updated = updated
        if version is not None:
            self.version = version

    @property
    def annotations(self):
        """Gets the annotations of this AlertRule.  # noqa: E501


        :return: The annotations of this AlertRule.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this AlertRule.


        :param annotations: The annotations of this AlertRule.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def condition(self):
        """Gets the condition of this AlertRule.  # noqa: E501


        :return: The condition of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this AlertRule.


        :param condition: The condition of this AlertRule.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def dashboard_uid(self):
        """Gets the dashboard_uid of this AlertRule.  # noqa: E501


        :return: The dashboard_uid of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_uid

    @dashboard_uid.setter
    def dashboard_uid(self, dashboard_uid):
        """Sets the dashboard_uid of this AlertRule.


        :param dashboard_uid: The dashboard_uid of this AlertRule.  # noqa: E501
        :type: str
        """

        self._dashboard_uid = dashboard_uid

    @property
    def data(self):
        """Gets the data of this AlertRule.  # noqa: E501


        :return: The data of this AlertRule.  # noqa: E501
        :rtype: list[AlertQuery]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AlertRule.


        :param data: The data of this AlertRule.  # noqa: E501
        :type: list[AlertQuery]
        """

        self._data = data

    @property
    def exec_err_state(self):
        """Gets the exec_err_state of this AlertRule.  # noqa: E501


        :return: The exec_err_state of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._exec_err_state

    @exec_err_state.setter
    def exec_err_state(self, exec_err_state):
        """Sets the exec_err_state of this AlertRule.


        :param exec_err_state: The exec_err_state of this AlertRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["Alerting", "Error", "OK"]  # noqa: E501
        if (self._configuration.client_side_validation and
                exec_err_state not in allowed_values):
            raise ValueError(
                "Invalid value for `exec_err_state` ({0}), must be one of {1}"  # noqa: E501
                .format(exec_err_state, allowed_values)
            )

        self._exec_err_state = exec_err_state

    @property
    def _for(self):
        """Gets the _for of this AlertRule.  # noqa: E501


        :return: The _for of this AlertRule.  # noqa: E501
        :rtype: Duration
        """
        return self.__for

    @_for.setter
    def _for(self, _for):
        """Sets the _for of this AlertRule.


        :param _for: The _for of this AlertRule.  # noqa: E501
        :type: Duration
        """

        self.__for = _for

    @property
    def id(self):
        """Gets the id of this AlertRule.  # noqa: E501


        :return: The id of this AlertRule.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlertRule.


        :param id: The id of this AlertRule.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def interval_seconds(self):
        """Gets the interval_seconds of this AlertRule.  # noqa: E501


        :return: The interval_seconds of this AlertRule.  # noqa: E501
        :rtype: int
        """
        return self._interval_seconds

    @interval_seconds.setter
    def interval_seconds(self, interval_seconds):
        """Sets the interval_seconds of this AlertRule.


        :param interval_seconds: The interval_seconds of this AlertRule.  # noqa: E501
        :type: int
        """

        self._interval_seconds = interval_seconds

    @property
    def labels(self):
        """Gets the labels of this AlertRule.  # noqa: E501


        :return: The labels of this AlertRule.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AlertRule.


        :param labels: The labels of this AlertRule.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def namespace_uid(self):
        """Gets the namespace_uid of this AlertRule.  # noqa: E501


        :return: The namespace_uid of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._namespace_uid

    @namespace_uid.setter
    def namespace_uid(self, namespace_uid):
        """Sets the namespace_uid of this AlertRule.


        :param namespace_uid: The namespace_uid of this AlertRule.  # noqa: E501
        :type: str
        """

        self._namespace_uid = namespace_uid

    @property
    def no_data_state(self):
        """Gets the no_data_state of this AlertRule.  # noqa: E501


        :return: The no_data_state of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._no_data_state

    @no_data_state.setter
    def no_data_state(self, no_data_state):
        """Sets the no_data_state of this AlertRule.


        :param no_data_state: The no_data_state of this AlertRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["Alerting", "NoData", "OK"]  # noqa: E501
        if (self._configuration.client_side_validation and
                no_data_state not in allowed_values):
            raise ValueError(
                "Invalid value for `no_data_state` ({0}), must be one of {1}"  # noqa: E501
                .format(no_data_state, allowed_values)
            )

        self._no_data_state = no_data_state

    @property
    def org_id(self):
        """Gets the org_id of this AlertRule.  # noqa: E501


        :return: The org_id of this AlertRule.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this AlertRule.


        :param org_id: The org_id of this AlertRule.  # noqa: E501
        :type: int
        """

        self._org_id = org_id

    @property
    def panel_id(self):
        """Gets the panel_id of this AlertRule.  # noqa: E501


        :return: The panel_id of this AlertRule.  # noqa: E501
        :rtype: int
        """
        return self._panel_id

    @panel_id.setter
    def panel_id(self, panel_id):
        """Sets the panel_id of this AlertRule.


        :param panel_id: The panel_id of this AlertRule.  # noqa: E501
        :type: int
        """

        self._panel_id = panel_id

    @property
    def rule_group(self):
        """Gets the rule_group of this AlertRule.  # noqa: E501


        :return: The rule_group of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._rule_group

    @rule_group.setter
    def rule_group(self, rule_group):
        """Sets the rule_group of this AlertRule.


        :param rule_group: The rule_group of this AlertRule.  # noqa: E501
        :type: str
        """

        self._rule_group = rule_group

    @property
    def rule_group_index(self):
        """Gets the rule_group_index of this AlertRule.  # noqa: E501


        :return: The rule_group_index of this AlertRule.  # noqa: E501
        :rtype: int
        """
        return self._rule_group_index

    @rule_group_index.setter
    def rule_group_index(self, rule_group_index):
        """Sets the rule_group_index of this AlertRule.


        :param rule_group_index: The rule_group_index of this AlertRule.  # noqa: E501
        :type: int
        """

        self._rule_group_index = rule_group_index

    @property
    def title(self):
        """Gets the title of this AlertRule.  # noqa: E501


        :return: The title of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AlertRule.


        :param title: The title of this AlertRule.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def uid(self):
        """Gets the uid of this AlertRule.  # noqa: E501


        :return: The uid of this AlertRule.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this AlertRule.


        :param uid: The uid of this AlertRule.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def updated(self):
        """Gets the updated of this AlertRule.  # noqa: E501


        :return: The updated of this AlertRule.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this AlertRule.


        :param updated: The updated of this AlertRule.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def version(self):
        """Gets the version of this AlertRule.  # noqa: E501


        :return: The version of this AlertRule.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AlertRule.


        :param version: The version of this AlertRule.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlertRule):
            return True

        return self.to_dict() != other.to_dict()
