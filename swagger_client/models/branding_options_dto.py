# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BrandingOptionsDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_footer_link': 'str',
        'email_footer_mode': 'str',
        'email_footer_text': 'str',
        'email_logo_url': 'str',
        'report_logo_url': 'str'
    }

    attribute_map = {
        'email_footer_link': 'emailFooterLink',
        'email_footer_mode': 'emailFooterMode',
        'email_footer_text': 'emailFooterText',
        'email_logo_url': 'emailLogoUrl',
        'report_logo_url': 'reportLogoUrl'
    }

    def __init__(self, email_footer_link=None, email_footer_mode=None, email_footer_text=None, email_logo_url=None, report_logo_url=None, _configuration=None):  # noqa: E501
        """BrandingOptionsDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._email_footer_link = None
        self._email_footer_mode = None
        self._email_footer_text = None
        self._email_logo_url = None
        self._report_logo_url = None
        self.discriminator = None

        if email_footer_link is not None:
            self.email_footer_link = email_footer_link
        if email_footer_mode is not None:
            self.email_footer_mode = email_footer_mode
        if email_footer_text is not None:
            self.email_footer_text = email_footer_text
        if email_logo_url is not None:
            self.email_logo_url = email_logo_url
        if report_logo_url is not None:
            self.report_logo_url = report_logo_url

    @property
    def email_footer_link(self):
        """Gets the email_footer_link of this BrandingOptionsDTO.  # noqa: E501


        :return: The email_footer_link of this BrandingOptionsDTO.  # noqa: E501
        :rtype: str
        """
        return self._email_footer_link

    @email_footer_link.setter
    def email_footer_link(self, email_footer_link):
        """Sets the email_footer_link of this BrandingOptionsDTO.


        :param email_footer_link: The email_footer_link of this BrandingOptionsDTO.  # noqa: E501
        :type: str
        """

        self._email_footer_link = email_footer_link

    @property
    def email_footer_mode(self):
        """Gets the email_footer_mode of this BrandingOptionsDTO.  # noqa: E501


        :return: The email_footer_mode of this BrandingOptionsDTO.  # noqa: E501
        :rtype: str
        """
        return self._email_footer_mode

    @email_footer_mode.setter
    def email_footer_mode(self, email_footer_mode):
        """Sets the email_footer_mode of this BrandingOptionsDTO.


        :param email_footer_mode: The email_footer_mode of this BrandingOptionsDTO.  # noqa: E501
        :type: str
        """

        self._email_footer_mode = email_footer_mode

    @property
    def email_footer_text(self):
        """Gets the email_footer_text of this BrandingOptionsDTO.  # noqa: E501


        :return: The email_footer_text of this BrandingOptionsDTO.  # noqa: E501
        :rtype: str
        """
        return self._email_footer_text

    @email_footer_text.setter
    def email_footer_text(self, email_footer_text):
        """Sets the email_footer_text of this BrandingOptionsDTO.


        :param email_footer_text: The email_footer_text of this BrandingOptionsDTO.  # noqa: E501
        :type: str
        """

        self._email_footer_text = email_footer_text

    @property
    def email_logo_url(self):
        """Gets the email_logo_url of this BrandingOptionsDTO.  # noqa: E501


        :return: The email_logo_url of this BrandingOptionsDTO.  # noqa: E501
        :rtype: str
        """
        return self._email_logo_url

    @email_logo_url.setter
    def email_logo_url(self, email_logo_url):
        """Sets the email_logo_url of this BrandingOptionsDTO.


        :param email_logo_url: The email_logo_url of this BrandingOptionsDTO.  # noqa: E501
        :type: str
        """

        self._email_logo_url = email_logo_url

    @property
    def report_logo_url(self):
        """Gets the report_logo_url of this BrandingOptionsDTO.  # noqa: E501


        :return: The report_logo_url of this BrandingOptionsDTO.  # noqa: E501
        :rtype: str
        """
        return self._report_logo_url

    @report_logo_url.setter
    def report_logo_url(self, report_logo_url):
        """Sets the report_logo_url of this BrandingOptionsDTO.


        :param report_logo_url: The report_logo_url of this BrandingOptionsDTO.  # noqa: E501
        :type: str
        """

        self._report_logo_url = report_logo_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrandingOptionsDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrandingOptionsDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BrandingOptionsDTO):
            return True

        return self.to_dict() != other.to_dict()
