# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BasicAuth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'password': 'Secret',
        'password_file': 'str',
        'username': 'str'
    }

    attribute_map = {
        'password': 'password',
        'password_file': 'password_file',
        'username': 'username'
    }

    def __init__(self, password=None, password_file=None, username=None, _configuration=None):  # noqa: E501
        """BasicAuth - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._password = None
        self._password_file = None
        self._username = None
        self.discriminator = None

        if password is not None:
            self.password = password
        if password_file is not None:
            self.password_file = password_file
        if username is not None:
            self.username = username

    @property
    def password(self):
        """Gets the password of this BasicAuth.  # noqa: E501


        :return: The password of this BasicAuth.  # noqa: E501
        :rtype: Secret
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this BasicAuth.


        :param password: The password of this BasicAuth.  # noqa: E501
        :type: Secret
        """

        self._password = password

    @property
    def password_file(self):
        """Gets the password_file of this BasicAuth.  # noqa: E501


        :return: The password_file of this BasicAuth.  # noqa: E501
        :rtype: str
        """
        return self._password_file

    @password_file.setter
    def password_file(self, password_file):
        """Sets the password_file of this BasicAuth.


        :param password_file: The password_file of this BasicAuth.  # noqa: E501
        :type: str
        """

        self._password_file = password_file

    @property
    def username(self):
        """Gets the username of this BasicAuth.  # noqa: E501


        :return: The username of this BasicAuth.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this BasicAuth.


        :param username: The username of this BasicAuth.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BasicAuth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasicAuth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BasicAuth):
            return True

        return self.to_dict() != other.to_dict()
