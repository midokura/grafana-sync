# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AlertListItemDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dashboard_id': 'int',
        'dashboard_slug': 'str',
        'dashboard_uid': 'str',
        'eval_data': 'Json',
        'eval_date': 'datetime',
        'execution_error': 'str',
        'id': 'int',
        'name': 'str',
        'new_state_date': 'datetime',
        'panel_id': 'int',
        'state': 'AlertStateType',
        'url': 'str'
    }

    attribute_map = {
        'dashboard_id': 'dashboardId',
        'dashboard_slug': 'dashboardSlug',
        'dashboard_uid': 'dashboardUid',
        'eval_data': 'evalData',
        'eval_date': 'evalDate',
        'execution_error': 'executionError',
        'id': 'id',
        'name': 'name',
        'new_state_date': 'newStateDate',
        'panel_id': 'panelId',
        'state': 'state',
        'url': 'url'
    }

    def __init__(self, dashboard_id=None, dashboard_slug=None, dashboard_uid=None, eval_data=None, eval_date=None, execution_error=None, id=None, name=None, new_state_date=None, panel_id=None, state=None, url=None, _configuration=None):  # noqa: E501
        """AlertListItemDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dashboard_id = None
        self._dashboard_slug = None
        self._dashboard_uid = None
        self._eval_data = None
        self._eval_date = None
        self._execution_error = None
        self._id = None
        self._name = None
        self._new_state_date = None
        self._panel_id = None
        self._state = None
        self._url = None
        self.discriminator = None

        if dashboard_id is not None:
            self.dashboard_id = dashboard_id
        if dashboard_slug is not None:
            self.dashboard_slug = dashboard_slug
        if dashboard_uid is not None:
            self.dashboard_uid = dashboard_uid
        if eval_data is not None:
            self.eval_data = eval_data
        if eval_date is not None:
            self.eval_date = eval_date
        if execution_error is not None:
            self.execution_error = execution_error
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if new_state_date is not None:
            self.new_state_date = new_state_date
        if panel_id is not None:
            self.panel_id = panel_id
        if state is not None:
            self.state = state
        if url is not None:
            self.url = url

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this AlertListItemDTO.  # noqa: E501


        :return: The dashboard_id of this AlertListItemDTO.  # noqa: E501
        :rtype: int
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this AlertListItemDTO.


        :param dashboard_id: The dashboard_id of this AlertListItemDTO.  # noqa: E501
        :type: int
        """

        self._dashboard_id = dashboard_id

    @property
    def dashboard_slug(self):
        """Gets the dashboard_slug of this AlertListItemDTO.  # noqa: E501


        :return: The dashboard_slug of this AlertListItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_slug

    @dashboard_slug.setter
    def dashboard_slug(self, dashboard_slug):
        """Sets the dashboard_slug of this AlertListItemDTO.


        :param dashboard_slug: The dashboard_slug of this AlertListItemDTO.  # noqa: E501
        :type: str
        """

        self._dashboard_slug = dashboard_slug

    @property
    def dashboard_uid(self):
        """Gets the dashboard_uid of this AlertListItemDTO.  # noqa: E501


        :return: The dashboard_uid of this AlertListItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_uid

    @dashboard_uid.setter
    def dashboard_uid(self, dashboard_uid):
        """Sets the dashboard_uid of this AlertListItemDTO.


        :param dashboard_uid: The dashboard_uid of this AlertListItemDTO.  # noqa: E501
        :type: str
        """

        self._dashboard_uid = dashboard_uid

    @property
    def eval_data(self):
        """Gets the eval_data of this AlertListItemDTO.  # noqa: E501


        :return: The eval_data of this AlertListItemDTO.  # noqa: E501
        :rtype: Json
        """
        return self._eval_data

    @eval_data.setter
    def eval_data(self, eval_data):
        """Sets the eval_data of this AlertListItemDTO.


        :param eval_data: The eval_data of this AlertListItemDTO.  # noqa: E501
        :type: Json
        """

        self._eval_data = eval_data

    @property
    def eval_date(self):
        """Gets the eval_date of this AlertListItemDTO.  # noqa: E501


        :return: The eval_date of this AlertListItemDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._eval_date

    @eval_date.setter
    def eval_date(self, eval_date):
        """Sets the eval_date of this AlertListItemDTO.


        :param eval_date: The eval_date of this AlertListItemDTO.  # noqa: E501
        :type: datetime
        """

        self._eval_date = eval_date

    @property
    def execution_error(self):
        """Gets the execution_error of this AlertListItemDTO.  # noqa: E501


        :return: The execution_error of this AlertListItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._execution_error

    @execution_error.setter
    def execution_error(self, execution_error):
        """Sets the execution_error of this AlertListItemDTO.


        :param execution_error: The execution_error of this AlertListItemDTO.  # noqa: E501
        :type: str
        """

        self._execution_error = execution_error

    @property
    def id(self):
        """Gets the id of this AlertListItemDTO.  # noqa: E501


        :return: The id of this AlertListItemDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlertListItemDTO.


        :param id: The id of this AlertListItemDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AlertListItemDTO.  # noqa: E501


        :return: The name of this AlertListItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlertListItemDTO.


        :param name: The name of this AlertListItemDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def new_state_date(self):
        """Gets the new_state_date of this AlertListItemDTO.  # noqa: E501


        :return: The new_state_date of this AlertListItemDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._new_state_date

    @new_state_date.setter
    def new_state_date(self, new_state_date):
        """Sets the new_state_date of this AlertListItemDTO.


        :param new_state_date: The new_state_date of this AlertListItemDTO.  # noqa: E501
        :type: datetime
        """

        self._new_state_date = new_state_date

    @property
    def panel_id(self):
        """Gets the panel_id of this AlertListItemDTO.  # noqa: E501


        :return: The panel_id of this AlertListItemDTO.  # noqa: E501
        :rtype: int
        """
        return self._panel_id

    @panel_id.setter
    def panel_id(self, panel_id):
        """Sets the panel_id of this AlertListItemDTO.


        :param panel_id: The panel_id of this AlertListItemDTO.  # noqa: E501
        :type: int
        """

        self._panel_id = panel_id

    @property
    def state(self):
        """Gets the state of this AlertListItemDTO.  # noqa: E501


        :return: The state of this AlertListItemDTO.  # noqa: E501
        :rtype: AlertStateType
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AlertListItemDTO.


        :param state: The state of this AlertListItemDTO.  # noqa: E501
        :type: AlertStateType
        """

        self._state = state

    @property
    def url(self):
        """Gets the url of this AlertListItemDTO.  # noqa: E501


        :return: The url of this AlertListItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AlertListItemDTO.


        :param url: The url of this AlertListItemDTO.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertListItemDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertListItemDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlertListItemDTO):
            return True

        return self.to_dict() != other.to_dict()
