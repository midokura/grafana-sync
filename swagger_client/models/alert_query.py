# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AlertQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datasource_uid': 'str',
        'model': 'object',
        'query_type': 'str',
        'ref_id': 'str',
        'relative_time_range': 'RelativeTimeRange'
    }

    attribute_map = {
        'datasource_uid': 'datasourceUid',
        'model': 'model',
        'query_type': 'queryType',
        'ref_id': 'refId',
        'relative_time_range': 'relativeTimeRange'
    }

    def __init__(self, datasource_uid=None, model=None, query_type=None, ref_id=None, relative_time_range=None, _configuration=None):  # noqa: E501
        """AlertQuery - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._datasource_uid = None
        self._model = None
        self._query_type = None
        self._ref_id = None
        self._relative_time_range = None
        self.discriminator = None

        if datasource_uid is not None:
            self.datasource_uid = datasource_uid
        if model is not None:
            self.model = model
        if query_type is not None:
            self.query_type = query_type
        if ref_id is not None:
            self.ref_id = ref_id
        if relative_time_range is not None:
            self.relative_time_range = relative_time_range

    @property
    def datasource_uid(self):
        """Gets the datasource_uid of this AlertQuery.  # noqa: E501

        Grafana data source unique identifier; it should be '-100' for a Server Side Expression operation.  # noqa: E501

        :return: The datasource_uid of this AlertQuery.  # noqa: E501
        :rtype: str
        """
        return self._datasource_uid

    @datasource_uid.setter
    def datasource_uid(self, datasource_uid):
        """Sets the datasource_uid of this AlertQuery.

        Grafana data source unique identifier; it should be '-100' for a Server Side Expression operation.  # noqa: E501

        :param datasource_uid: The datasource_uid of this AlertQuery.  # noqa: E501
        :type: str
        """

        self._datasource_uid = datasource_uid

    @property
    def model(self):
        """Gets the model of this AlertQuery.  # noqa: E501

        JSON is the raw JSON query and includes the above properties as well as custom properties.  # noqa: E501

        :return: The model of this AlertQuery.  # noqa: E501
        :rtype: object
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this AlertQuery.

        JSON is the raw JSON query and includes the above properties as well as custom properties.  # noqa: E501

        :param model: The model of this AlertQuery.  # noqa: E501
        :type: object
        """

        self._model = model

    @property
    def query_type(self):
        """Gets the query_type of this AlertQuery.  # noqa: E501

        QueryType is an optional identifier for the type of query. It can be used to distinguish different types of queries.  # noqa: E501

        :return: The query_type of this AlertQuery.  # noqa: E501
        :rtype: str
        """
        return self._query_type

    @query_type.setter
    def query_type(self, query_type):
        """Sets the query_type of this AlertQuery.

        QueryType is an optional identifier for the type of query. It can be used to distinguish different types of queries.  # noqa: E501

        :param query_type: The query_type of this AlertQuery.  # noqa: E501
        :type: str
        """

        self._query_type = query_type

    @property
    def ref_id(self):
        """Gets the ref_id of this AlertQuery.  # noqa: E501

        RefID is the unique identifier of the query, set by the frontend call.  # noqa: E501

        :return: The ref_id of this AlertQuery.  # noqa: E501
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this AlertQuery.

        RefID is the unique identifier of the query, set by the frontend call.  # noqa: E501

        :param ref_id: The ref_id of this AlertQuery.  # noqa: E501
        :type: str
        """

        self._ref_id = ref_id

    @property
    def relative_time_range(self):
        """Gets the relative_time_range of this AlertQuery.  # noqa: E501


        :return: The relative_time_range of this AlertQuery.  # noqa: E501
        :rtype: RelativeTimeRange
        """
        return self._relative_time_range

    @relative_time_range.setter
    def relative_time_range(self, relative_time_range):
        """Sets the relative_time_range of this AlertQuery.


        :param relative_time_range: The relative_time_range of this AlertQuery.  # noqa: E501
        :type: RelativeTimeRange
        """

        self._relative_time_range = relative_time_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertQuery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlertQuery):
            return True

        return self.to_dict() != other.to_dict()
