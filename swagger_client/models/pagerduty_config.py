# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PagerdutyConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'str',
        'client': 'str',
        'client_url': 'str',
        'component': 'str',
        'description': 'str',
        'details': 'dict(str, str)',
        'group': 'str',
        'http_config': 'HTTPClientConfig',
        'images': 'list[PagerdutyImage]',
        'links': 'list[PagerdutyLink]',
        'routing_key': 'Secret',
        'send_resolved': 'bool',
        'service_key': 'Secret',
        'severity': 'str',
        'url': 'URL'
    }

    attribute_map = {
        '_class': 'class',
        'client': 'client',
        'client_url': 'client_url',
        'component': 'component',
        'description': 'description',
        'details': 'details',
        'group': 'group',
        'http_config': 'http_config',
        'images': 'images',
        'links': 'links',
        'routing_key': 'routing_key',
        'send_resolved': 'send_resolved',
        'service_key': 'service_key',
        'severity': 'severity',
        'url': 'url'
    }

    def __init__(self, _class=None, client=None, client_url=None, component=None, description=None, details=None, group=None, http_config=None, images=None, links=None, routing_key=None, send_resolved=None, service_key=None, severity=None, url=None, _configuration=None):  # noqa: E501
        """PagerdutyConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__class = None
        self._client = None
        self._client_url = None
        self._component = None
        self._description = None
        self._details = None
        self._group = None
        self._http_config = None
        self._images = None
        self._links = None
        self._routing_key = None
        self._send_resolved = None
        self._service_key = None
        self._severity = None
        self._url = None
        self.discriminator = None

        if _class is not None:
            self._class = _class
        if client is not None:
            self.client = client
        if client_url is not None:
            self.client_url = client_url
        if component is not None:
            self.component = component
        if description is not None:
            self.description = description
        if details is not None:
            self.details = details
        if group is not None:
            self.group = group
        if http_config is not None:
            self.http_config = http_config
        if images is not None:
            self.images = images
        if links is not None:
            self.links = links
        if routing_key is not None:
            self.routing_key = routing_key
        if send_resolved is not None:
            self.send_resolved = send_resolved
        if service_key is not None:
            self.service_key = service_key
        if severity is not None:
            self.severity = severity
        if url is not None:
            self.url = url

    @property
    def _class(self):
        """Gets the _class of this PagerdutyConfig.  # noqa: E501


        :return: The _class of this PagerdutyConfig.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this PagerdutyConfig.


        :param _class: The _class of this PagerdutyConfig.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def client(self):
        """Gets the client of this PagerdutyConfig.  # noqa: E501


        :return: The client of this PagerdutyConfig.  # noqa: E501
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this PagerdutyConfig.


        :param client: The client of this PagerdutyConfig.  # noqa: E501
        :type: str
        """

        self._client = client

    @property
    def client_url(self):
        """Gets the client_url of this PagerdutyConfig.  # noqa: E501


        :return: The client_url of this PagerdutyConfig.  # noqa: E501
        :rtype: str
        """
        return self._client_url

    @client_url.setter
    def client_url(self, client_url):
        """Sets the client_url of this PagerdutyConfig.


        :param client_url: The client_url of this PagerdutyConfig.  # noqa: E501
        :type: str
        """

        self._client_url = client_url

    @property
    def component(self):
        """Gets the component of this PagerdutyConfig.  # noqa: E501


        :return: The component of this PagerdutyConfig.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this PagerdutyConfig.


        :param component: The component of this PagerdutyConfig.  # noqa: E501
        :type: str
        """

        self._component = component

    @property
    def description(self):
        """Gets the description of this PagerdutyConfig.  # noqa: E501


        :return: The description of this PagerdutyConfig.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PagerdutyConfig.


        :param description: The description of this PagerdutyConfig.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def details(self):
        """Gets the details of this PagerdutyConfig.  # noqa: E501


        :return: The details of this PagerdutyConfig.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PagerdutyConfig.


        :param details: The details of this PagerdutyConfig.  # noqa: E501
        :type: dict(str, str)
        """

        self._details = details

    @property
    def group(self):
        """Gets the group of this PagerdutyConfig.  # noqa: E501


        :return: The group of this PagerdutyConfig.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this PagerdutyConfig.


        :param group: The group of this PagerdutyConfig.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def http_config(self):
        """Gets the http_config of this PagerdutyConfig.  # noqa: E501


        :return: The http_config of this PagerdutyConfig.  # noqa: E501
        :rtype: HTTPClientConfig
        """
        return self._http_config

    @http_config.setter
    def http_config(self, http_config):
        """Sets the http_config of this PagerdutyConfig.


        :param http_config: The http_config of this PagerdutyConfig.  # noqa: E501
        :type: HTTPClientConfig
        """

        self._http_config = http_config

    @property
    def images(self):
        """Gets the images of this PagerdutyConfig.  # noqa: E501


        :return: The images of this PagerdutyConfig.  # noqa: E501
        :rtype: list[PagerdutyImage]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this PagerdutyConfig.


        :param images: The images of this PagerdutyConfig.  # noqa: E501
        :type: list[PagerdutyImage]
        """

        self._images = images

    @property
    def links(self):
        """Gets the links of this PagerdutyConfig.  # noqa: E501


        :return: The links of this PagerdutyConfig.  # noqa: E501
        :rtype: list[PagerdutyLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PagerdutyConfig.


        :param links: The links of this PagerdutyConfig.  # noqa: E501
        :type: list[PagerdutyLink]
        """

        self._links = links

    @property
    def routing_key(self):
        """Gets the routing_key of this PagerdutyConfig.  # noqa: E501


        :return: The routing_key of this PagerdutyConfig.  # noqa: E501
        :rtype: Secret
        """
        return self._routing_key

    @routing_key.setter
    def routing_key(self, routing_key):
        """Sets the routing_key of this PagerdutyConfig.


        :param routing_key: The routing_key of this PagerdutyConfig.  # noqa: E501
        :type: Secret
        """

        self._routing_key = routing_key

    @property
    def send_resolved(self):
        """Gets the send_resolved of this PagerdutyConfig.  # noqa: E501


        :return: The send_resolved of this PagerdutyConfig.  # noqa: E501
        :rtype: bool
        """
        return self._send_resolved

    @send_resolved.setter
    def send_resolved(self, send_resolved):
        """Sets the send_resolved of this PagerdutyConfig.


        :param send_resolved: The send_resolved of this PagerdutyConfig.  # noqa: E501
        :type: bool
        """

        self._send_resolved = send_resolved

    @property
    def service_key(self):
        """Gets the service_key of this PagerdutyConfig.  # noqa: E501


        :return: The service_key of this PagerdutyConfig.  # noqa: E501
        :rtype: Secret
        """
        return self._service_key

    @service_key.setter
    def service_key(self, service_key):
        """Sets the service_key of this PagerdutyConfig.


        :param service_key: The service_key of this PagerdutyConfig.  # noqa: E501
        :type: Secret
        """

        self._service_key = service_key

    @property
    def severity(self):
        """Gets the severity of this PagerdutyConfig.  # noqa: E501


        :return: The severity of this PagerdutyConfig.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this PagerdutyConfig.


        :param severity: The severity of this PagerdutyConfig.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def url(self):
        """Gets the url of this PagerdutyConfig.  # noqa: E501


        :return: The url of this PagerdutyConfig.  # noqa: E501
        :rtype: URL
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PagerdutyConfig.


        :param url: The url of this PagerdutyConfig.  # noqa: E501
        :type: URL
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PagerdutyConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PagerdutyConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PagerdutyConfig):
            return True

        return self.to_dict() != other.to_dict()
