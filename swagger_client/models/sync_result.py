# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SyncResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'elapsed': 'Duration',
        'failed_users': 'list[FailedUser]',
        'missing_user_ids': 'list[int]',
        'started': 'datetime',
        'updated_user_ids': 'list[int]'
    }

    attribute_map = {
        'elapsed': 'Elapsed',
        'failed_users': 'FailedUsers',
        'missing_user_ids': 'MissingUserIds',
        'started': 'Started',
        'updated_user_ids': 'UpdatedUserIds'
    }

    def __init__(self, elapsed=None, failed_users=None, missing_user_ids=None, started=None, updated_user_ids=None, _configuration=None):  # noqa: E501
        """SyncResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._elapsed = None
        self._failed_users = None
        self._missing_user_ids = None
        self._started = None
        self._updated_user_ids = None
        self.discriminator = None

        if elapsed is not None:
            self.elapsed = elapsed
        if failed_users is not None:
            self.failed_users = failed_users
        if missing_user_ids is not None:
            self.missing_user_ids = missing_user_ids
        if started is not None:
            self.started = started
        if updated_user_ids is not None:
            self.updated_user_ids = updated_user_ids

    @property
    def elapsed(self):
        """Gets the elapsed of this SyncResult.  # noqa: E501


        :return: The elapsed of this SyncResult.  # noqa: E501
        :rtype: Duration
        """
        return self._elapsed

    @elapsed.setter
    def elapsed(self, elapsed):
        """Sets the elapsed of this SyncResult.


        :param elapsed: The elapsed of this SyncResult.  # noqa: E501
        :type: Duration
        """

        self._elapsed = elapsed

    @property
    def failed_users(self):
        """Gets the failed_users of this SyncResult.  # noqa: E501


        :return: The failed_users of this SyncResult.  # noqa: E501
        :rtype: list[FailedUser]
        """
        return self._failed_users

    @failed_users.setter
    def failed_users(self, failed_users):
        """Sets the failed_users of this SyncResult.


        :param failed_users: The failed_users of this SyncResult.  # noqa: E501
        :type: list[FailedUser]
        """

        self._failed_users = failed_users

    @property
    def missing_user_ids(self):
        """Gets the missing_user_ids of this SyncResult.  # noqa: E501


        :return: The missing_user_ids of this SyncResult.  # noqa: E501
        :rtype: list[int]
        """
        return self._missing_user_ids

    @missing_user_ids.setter
    def missing_user_ids(self, missing_user_ids):
        """Sets the missing_user_ids of this SyncResult.


        :param missing_user_ids: The missing_user_ids of this SyncResult.  # noqa: E501
        :type: list[int]
        """

        self._missing_user_ids = missing_user_ids

    @property
    def started(self):
        """Gets the started of this SyncResult.  # noqa: E501


        :return: The started of this SyncResult.  # noqa: E501
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this SyncResult.


        :param started: The started of this SyncResult.  # noqa: E501
        :type: datetime
        """

        self._started = started

    @property
    def updated_user_ids(self):
        """Gets the updated_user_ids of this SyncResult.  # noqa: E501


        :return: The updated_user_ids of this SyncResult.  # noqa: E501
        :rtype: list[int]
        """
        return self._updated_user_ids

    @updated_user_ids.setter
    def updated_user_ids(self, updated_user_ids):
        """Sets the updated_user_ids of this SyncResult.


        :param updated_user_ids: The updated_user_ids of this SyncResult.  # noqa: E501
        :type: list[int]
        """

        self._updated_user_ids = updated_user_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyncResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SyncResult):
            return True

        return self.to_dict() != other.to_dict()
