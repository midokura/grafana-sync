# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OAuth2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tls_config': 'TLSConfig',
        'client_id': 'str',
        'client_secret': 'Secret',
        'client_secret_file': 'str',
        'endpoint_params': 'dict(str, str)',
        'scopes': 'list[str]',
        'token_url': 'str'
    }

    attribute_map = {
        'tls_config': 'TLSConfig',
        'client_id': 'client_id',
        'client_secret': 'client_secret',
        'client_secret_file': 'client_secret_file',
        'endpoint_params': 'endpoint_params',
        'scopes': 'scopes',
        'token_url': 'token_url'
    }

    def __init__(self, tls_config=None, client_id=None, client_secret=None, client_secret_file=None, endpoint_params=None, scopes=None, token_url=None, _configuration=None):  # noqa: E501
        """OAuth2 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._tls_config = None
        self._client_id = None
        self._client_secret = None
        self._client_secret_file = None
        self._endpoint_params = None
        self._scopes = None
        self._token_url = None
        self.discriminator = None

        if tls_config is not None:
            self.tls_config = tls_config
        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if client_secret_file is not None:
            self.client_secret_file = client_secret_file
        if endpoint_params is not None:
            self.endpoint_params = endpoint_params
        if scopes is not None:
            self.scopes = scopes
        if token_url is not None:
            self.token_url = token_url

    @property
    def tls_config(self):
        """Gets the tls_config of this OAuth2.  # noqa: E501


        :return: The tls_config of this OAuth2.  # noqa: E501
        :rtype: TLSConfig
        """
        return self._tls_config

    @tls_config.setter
    def tls_config(self, tls_config):
        """Sets the tls_config of this OAuth2.


        :param tls_config: The tls_config of this OAuth2.  # noqa: E501
        :type: TLSConfig
        """

        self._tls_config = tls_config

    @property
    def client_id(self):
        """Gets the client_id of this OAuth2.  # noqa: E501


        :return: The client_id of this OAuth2.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OAuth2.


        :param client_id: The client_id of this OAuth2.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this OAuth2.  # noqa: E501


        :return: The client_secret of this OAuth2.  # noqa: E501
        :rtype: Secret
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OAuth2.


        :param client_secret: The client_secret of this OAuth2.  # noqa: E501
        :type: Secret
        """

        self._client_secret = client_secret

    @property
    def client_secret_file(self):
        """Gets the client_secret_file of this OAuth2.  # noqa: E501


        :return: The client_secret_file of this OAuth2.  # noqa: E501
        :rtype: str
        """
        return self._client_secret_file

    @client_secret_file.setter
    def client_secret_file(self, client_secret_file):
        """Sets the client_secret_file of this OAuth2.


        :param client_secret_file: The client_secret_file of this OAuth2.  # noqa: E501
        :type: str
        """

        self._client_secret_file = client_secret_file

    @property
    def endpoint_params(self):
        """Gets the endpoint_params of this OAuth2.  # noqa: E501


        :return: The endpoint_params of this OAuth2.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._endpoint_params

    @endpoint_params.setter
    def endpoint_params(self, endpoint_params):
        """Sets the endpoint_params of this OAuth2.


        :param endpoint_params: The endpoint_params of this OAuth2.  # noqa: E501
        :type: dict(str, str)
        """

        self._endpoint_params = endpoint_params

    @property
    def scopes(self):
        """Gets the scopes of this OAuth2.  # noqa: E501


        :return: The scopes of this OAuth2.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this OAuth2.


        :param scopes: The scopes of this OAuth2.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def token_url(self):
        """Gets the token_url of this OAuth2.  # noqa: E501


        :return: The token_url of this OAuth2.  # noqa: E501
        :rtype: str
        """
        return self._token_url

    @token_url.setter
    def token_url(self, token_url):
        """Sets the token_url of this OAuth2.


        :param token_url: The token_url of this OAuth2.  # noqa: E501
        :type: str
        """

        self._token_url = token_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OAuth2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuth2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OAuth2):
            return True

        return self.to_dict() != other.to_dict()
