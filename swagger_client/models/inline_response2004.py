# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InlineResponse2004(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'status': 'str',
        'title': 'str',
        'uid': 'str',
        'url': 'str',
        'version': 'int'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'title': 'title',
        'uid': 'uid',
        'url': 'url',
        'version': 'version'
    }

    def __init__(self, id=None, status=None, title=None, uid=None, url=None, version=None, _configuration=None):  # noqa: E501
        """InlineResponse2004 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._status = None
        self._title = None
        self._uid = None
        self._url = None
        self._version = None
        self.discriminator = None

        self.id = id
        self.status = status
        self.title = title
        self.uid = uid
        self.url = url
        self.version = version

    @property
    def id(self):
        """Gets the id of this InlineResponse2004.  # noqa: E501

        ID The unique identifier (id) of the created/updated dashboard.  # noqa: E501

        :return: The id of this InlineResponse2004.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2004.

        ID The unique identifier (id) of the created/updated dashboard.  # noqa: E501

        :param id: The id of this InlineResponse2004.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self):
        """Gets the status of this InlineResponse2004.  # noqa: E501

        Status status of the response.  # noqa: E501

        :return: The status of this InlineResponse2004.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2004.

        Status status of the response.  # noqa: E501

        :param status: The status of this InlineResponse2004.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def title(self):
        """Gets the title of this InlineResponse2004.  # noqa: E501

        Slug The slug of the dashboard.  # noqa: E501

        :return: The title of this InlineResponse2004.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse2004.

        Slug The slug of the dashboard.  # noqa: E501

        :param title: The title of this InlineResponse2004.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def uid(self):
        """Gets the uid of this InlineResponse2004.  # noqa: E501

        UID The unique identifier (uid) of the created/updated dashboard.  # noqa: E501

        :return: The uid of this InlineResponse2004.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this InlineResponse2004.

        UID The unique identifier (uid) of the created/updated dashboard.  # noqa: E501

        :param uid: The uid of this InlineResponse2004.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def url(self):
        """Gets the url of this InlineResponse2004.  # noqa: E501

        URL The relative URL for accessing the created/updated dashboard.  # noqa: E501

        :return: The url of this InlineResponse2004.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse2004.

        URL The relative URL for accessing the created/updated dashboard.  # noqa: E501

        :param url: The url of this InlineResponse2004.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def version(self):
        """Gets the version of this InlineResponse2004.  # noqa: E501

        Version The version of the dashboard.  # noqa: E501

        :return: The version of this InlineResponse2004.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse2004.

        Version The version of the dashboard.  # noqa: E501

        :param version: The version of this InlineResponse2004.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2004, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2004):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2004):
            return True

        return self.to_dict() != other.to_dict()
