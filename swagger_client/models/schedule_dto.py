# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ScheduleDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day': 'str',
        'day_of_month': 'str',
        'end_date': 'datetime',
        'frequency': 'str',
        'hour': 'int',
        'interval_amount': 'int',
        'interval_frequency': 'str',
        'minute': 'int',
        'start_date': 'datetime',
        'time_zone': 'str',
        'workdays_only': 'bool'
    }

    attribute_map = {
        'day': 'day',
        'day_of_month': 'dayOfMonth',
        'end_date': 'endDate',
        'frequency': 'frequency',
        'hour': 'hour',
        'interval_amount': 'intervalAmount',
        'interval_frequency': 'intervalFrequency',
        'minute': 'minute',
        'start_date': 'startDate',
        'time_zone': 'timeZone',
        'workdays_only': 'workdaysOnly'
    }

    def __init__(self, day=None, day_of_month=None, end_date=None, frequency=None, hour=None, interval_amount=None, interval_frequency=None, minute=None, start_date=None, time_zone=None, workdays_only=None, _configuration=None):  # noqa: E501
        """ScheduleDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._day = None
        self._day_of_month = None
        self._end_date = None
        self._frequency = None
        self._hour = None
        self._interval_amount = None
        self._interval_frequency = None
        self._minute = None
        self._start_date = None
        self._time_zone = None
        self._workdays_only = None
        self.discriminator = None

        if day is not None:
            self.day = day
        if day_of_month is not None:
            self.day_of_month = day_of_month
        if end_date is not None:
            self.end_date = end_date
        if frequency is not None:
            self.frequency = frequency
        if hour is not None:
            self.hour = hour
        if interval_amount is not None:
            self.interval_amount = interval_amount
        if interval_frequency is not None:
            self.interval_frequency = interval_frequency
        if minute is not None:
            self.minute = minute
        if start_date is not None:
            self.start_date = start_date
        if time_zone is not None:
            self.time_zone = time_zone
        if workdays_only is not None:
            self.workdays_only = workdays_only

    @property
    def day(self):
        """Gets the day of this ScheduleDTO.  # noqa: E501


        :return: The day of this ScheduleDTO.  # noqa: E501
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this ScheduleDTO.


        :param day: The day of this ScheduleDTO.  # noqa: E501
        :type: str
        """

        self._day = day

    @property
    def day_of_month(self):
        """Gets the day_of_month of this ScheduleDTO.  # noqa: E501


        :return: The day_of_month of this ScheduleDTO.  # noqa: E501
        :rtype: str
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this ScheduleDTO.


        :param day_of_month: The day_of_month of this ScheduleDTO.  # noqa: E501
        :type: str
        """

        self._day_of_month = day_of_month

    @property
    def end_date(self):
        """Gets the end_date of this ScheduleDTO.  # noqa: E501


        :return: The end_date of this ScheduleDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ScheduleDTO.


        :param end_date: The end_date of this ScheduleDTO.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def frequency(self):
        """Gets the frequency of this ScheduleDTO.  # noqa: E501


        :return: The frequency of this ScheduleDTO.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ScheduleDTO.


        :param frequency: The frequency of this ScheduleDTO.  # noqa: E501
        :type: str
        """

        self._frequency = frequency

    @property
    def hour(self):
        """Gets the hour of this ScheduleDTO.  # noqa: E501


        :return: The hour of this ScheduleDTO.  # noqa: E501
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this ScheduleDTO.


        :param hour: The hour of this ScheduleDTO.  # noqa: E501
        :type: int
        """

        self._hour = hour

    @property
    def interval_amount(self):
        """Gets the interval_amount of this ScheduleDTO.  # noqa: E501


        :return: The interval_amount of this ScheduleDTO.  # noqa: E501
        :rtype: int
        """
        return self._interval_amount

    @interval_amount.setter
    def interval_amount(self, interval_amount):
        """Sets the interval_amount of this ScheduleDTO.


        :param interval_amount: The interval_amount of this ScheduleDTO.  # noqa: E501
        :type: int
        """

        self._interval_amount = interval_amount

    @property
    def interval_frequency(self):
        """Gets the interval_frequency of this ScheduleDTO.  # noqa: E501


        :return: The interval_frequency of this ScheduleDTO.  # noqa: E501
        :rtype: str
        """
        return self._interval_frequency

    @interval_frequency.setter
    def interval_frequency(self, interval_frequency):
        """Sets the interval_frequency of this ScheduleDTO.


        :param interval_frequency: The interval_frequency of this ScheduleDTO.  # noqa: E501
        :type: str
        """

        self._interval_frequency = interval_frequency

    @property
    def minute(self):
        """Gets the minute of this ScheduleDTO.  # noqa: E501


        :return: The minute of this ScheduleDTO.  # noqa: E501
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this ScheduleDTO.


        :param minute: The minute of this ScheduleDTO.  # noqa: E501
        :type: int
        """

        self._minute = minute

    @property
    def start_date(self):
        """Gets the start_date of this ScheduleDTO.  # noqa: E501


        :return: The start_date of this ScheduleDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ScheduleDTO.


        :param start_date: The start_date of this ScheduleDTO.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def time_zone(self):
        """Gets the time_zone of this ScheduleDTO.  # noqa: E501


        :return: The time_zone of this ScheduleDTO.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ScheduleDTO.


        :param time_zone: The time_zone of this ScheduleDTO.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def workdays_only(self):
        """Gets the workdays_only of this ScheduleDTO.  # noqa: E501


        :return: The workdays_only of this ScheduleDTO.  # noqa: E501
        :rtype: bool
        """
        return self._workdays_only

    @workdays_only.setter
    def workdays_only(self, workdays_only):
        """Sets the workdays_only of this ScheduleDTO.


        :param workdays_only: The workdays_only of this ScheduleDTO.  # noqa: E501
        :type: bool
        """

        self._workdays_only = workdays_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScheduleDTO):
            return True

        return self.to_dict() != other.to_dict()
