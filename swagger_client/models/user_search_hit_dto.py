# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserSearchHitDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_labels': 'list[str]',
        'avatar_url': 'str',
        'email': 'str',
        'id': 'int',
        'is_admin': 'bool',
        'is_disabled': 'bool',
        'last_seen_at': 'datetime',
        'last_seen_at_age': 'str',
        'login': 'str',
        'name': 'str'
    }

    attribute_map = {
        'auth_labels': 'authLabels',
        'avatar_url': 'avatarUrl',
        'email': 'email',
        'id': 'id',
        'is_admin': 'isAdmin',
        'is_disabled': 'isDisabled',
        'last_seen_at': 'lastSeenAt',
        'last_seen_at_age': 'lastSeenAtAge',
        'login': 'login',
        'name': 'name'
    }

    def __init__(self, auth_labels=None, avatar_url=None, email=None, id=None, is_admin=None, is_disabled=None, last_seen_at=None, last_seen_at_age=None, login=None, name=None, _configuration=None):  # noqa: E501
        """UserSearchHitDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auth_labels = None
        self._avatar_url = None
        self._email = None
        self._id = None
        self._is_admin = None
        self._is_disabled = None
        self._last_seen_at = None
        self._last_seen_at_age = None
        self._login = None
        self._name = None
        self.discriminator = None

        if auth_labels is not None:
            self.auth_labels = auth_labels
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if email is not None:
            self.email = email
        if id is not None:
            self.id = id
        if is_admin is not None:
            self.is_admin = is_admin
        if is_disabled is not None:
            self.is_disabled = is_disabled
        if last_seen_at is not None:
            self.last_seen_at = last_seen_at
        if last_seen_at_age is not None:
            self.last_seen_at_age = last_seen_at_age
        if login is not None:
            self.login = login
        if name is not None:
            self.name = name

    @property
    def auth_labels(self):
        """Gets the auth_labels of this UserSearchHitDTO.  # noqa: E501


        :return: The auth_labels of this UserSearchHitDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._auth_labels

    @auth_labels.setter
    def auth_labels(self, auth_labels):
        """Sets the auth_labels of this UserSearchHitDTO.


        :param auth_labels: The auth_labels of this UserSearchHitDTO.  # noqa: E501
        :type: list[str]
        """

        self._auth_labels = auth_labels

    @property
    def avatar_url(self):
        """Gets the avatar_url of this UserSearchHitDTO.  # noqa: E501


        :return: The avatar_url of this UserSearchHitDTO.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this UserSearchHitDTO.


        :param avatar_url: The avatar_url of this UserSearchHitDTO.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def email(self):
        """Gets the email of this UserSearchHitDTO.  # noqa: E501


        :return: The email of this UserSearchHitDTO.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserSearchHitDTO.


        :param email: The email of this UserSearchHitDTO.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this UserSearchHitDTO.  # noqa: E501


        :return: The id of this UserSearchHitDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserSearchHitDTO.


        :param id: The id of this UserSearchHitDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_admin(self):
        """Gets the is_admin of this UserSearchHitDTO.  # noqa: E501


        :return: The is_admin of this UserSearchHitDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this UserSearchHitDTO.


        :param is_admin: The is_admin of this UserSearchHitDTO.  # noqa: E501
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def is_disabled(self):
        """Gets the is_disabled of this UserSearchHitDTO.  # noqa: E501


        :return: The is_disabled of this UserSearchHitDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this UserSearchHitDTO.


        :param is_disabled: The is_disabled of this UserSearchHitDTO.  # noqa: E501
        :type: bool
        """

        self._is_disabled = is_disabled

    @property
    def last_seen_at(self):
        """Gets the last_seen_at of this UserSearchHitDTO.  # noqa: E501


        :return: The last_seen_at of this UserSearchHitDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen_at

    @last_seen_at.setter
    def last_seen_at(self, last_seen_at):
        """Sets the last_seen_at of this UserSearchHitDTO.


        :param last_seen_at: The last_seen_at of this UserSearchHitDTO.  # noqa: E501
        :type: datetime
        """

        self._last_seen_at = last_seen_at

    @property
    def last_seen_at_age(self):
        """Gets the last_seen_at_age of this UserSearchHitDTO.  # noqa: E501


        :return: The last_seen_at_age of this UserSearchHitDTO.  # noqa: E501
        :rtype: str
        """
        return self._last_seen_at_age

    @last_seen_at_age.setter
    def last_seen_at_age(self, last_seen_at_age):
        """Sets the last_seen_at_age of this UserSearchHitDTO.


        :param last_seen_at_age: The last_seen_at_age of this UserSearchHitDTO.  # noqa: E501
        :type: str
        """

        self._last_seen_at_age = last_seen_at_age

    @property
    def login(self):
        """Gets the login of this UserSearchHitDTO.  # noqa: E501


        :return: The login of this UserSearchHitDTO.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this UserSearchHitDTO.


        :param login: The login of this UserSearchHitDTO.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def name(self):
        """Gets the name of this UserSearchHitDTO.  # noqa: E501


        :return: The name of this UserSearchHitDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserSearchHitDTO.


        :param name: The name of this UserSearchHitDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSearchHitDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSearchHitDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSearchHitDTO):
            return True

        return self.to_dict() != other.to_dict()
