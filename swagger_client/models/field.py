# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Field(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'FieldConfig',
        'labels': 'FrameLabels',
        'name': 'str'
    }

    attribute_map = {
        'config': 'config',
        'labels': 'labels',
        'name': 'name'
    }

    def __init__(self, config=None, labels=None, name=None, _configuration=None):  # noqa: E501
        """Field - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._config = None
        self._labels = None
        self._name = None
        self.discriminator = None

        if config is not None:
            self.config = config
        if labels is not None:
            self.labels = labels
        if name is not None:
            self.name = name

    @property
    def config(self):
        """Gets the config of this Field.  # noqa: E501


        :return: The config of this Field.  # noqa: E501
        :rtype: FieldConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Field.


        :param config: The config of this Field.  # noqa: E501
        :type: FieldConfig
        """

        self._config = config

    @property
    def labels(self):
        """Gets the labels of this Field.  # noqa: E501


        :return: The labels of this Field.  # noqa: E501
        :rtype: FrameLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Field.


        :param labels: The labels of this Field.  # noqa: E501
        :type: FrameLabels
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Field.  # noqa: E501

        Name is default identifier of the field. The name does not have to be unique, but the combination of name and Labels should be unique for proper behavior in all situations.  # noqa: E501

        :return: The name of this Field.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Field.

        Name is default identifier of the field. The name does not have to be unique, but the combination of name and Labels should be unique for proper behavior in all situations.  # noqa: E501

        :param name: The name of this Field.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Field, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Field):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Field):
            return True

        return self.to_dict() != other.to_dict()
