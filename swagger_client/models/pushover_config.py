# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PushoverConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expire': 'Duration',
        'html': 'bool',
        'http_config': 'HTTPClientConfig',
        'message': 'str',
        'priority': 'str',
        'retry': 'Duration',
        'send_resolved': 'bool',
        'sound': 'str',
        'title': 'str',
        'token': 'Secret',
        'url': 'str',
        'url_title': 'str',
        'user_key': 'Secret'
    }

    attribute_map = {
        'expire': 'expire',
        'html': 'html',
        'http_config': 'http_config',
        'message': 'message',
        'priority': 'priority',
        'retry': 'retry',
        'send_resolved': 'send_resolved',
        'sound': 'sound',
        'title': 'title',
        'token': 'token',
        'url': 'url',
        'url_title': 'url_title',
        'user_key': 'user_key'
    }

    def __init__(self, expire=None, html=None, http_config=None, message=None, priority=None, retry=None, send_resolved=None, sound=None, title=None, token=None, url=None, url_title=None, user_key=None, _configuration=None):  # noqa: E501
        """PushoverConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._expire = None
        self._html = None
        self._http_config = None
        self._message = None
        self._priority = None
        self._retry = None
        self._send_resolved = None
        self._sound = None
        self._title = None
        self._token = None
        self._url = None
        self._url_title = None
        self._user_key = None
        self.discriminator = None

        if expire is not None:
            self.expire = expire
        if html is not None:
            self.html = html
        if http_config is not None:
            self.http_config = http_config
        if message is not None:
            self.message = message
        if priority is not None:
            self.priority = priority
        if retry is not None:
            self.retry = retry
        if send_resolved is not None:
            self.send_resolved = send_resolved
        if sound is not None:
            self.sound = sound
        if title is not None:
            self.title = title
        if token is not None:
            self.token = token
        if url is not None:
            self.url = url
        if url_title is not None:
            self.url_title = url_title
        if user_key is not None:
            self.user_key = user_key

    @property
    def expire(self):
        """Gets the expire of this PushoverConfig.  # noqa: E501


        :return: The expire of this PushoverConfig.  # noqa: E501
        :rtype: Duration
        """
        return self._expire

    @expire.setter
    def expire(self, expire):
        """Sets the expire of this PushoverConfig.


        :param expire: The expire of this PushoverConfig.  # noqa: E501
        :type: Duration
        """

        self._expire = expire

    @property
    def html(self):
        """Gets the html of this PushoverConfig.  # noqa: E501


        :return: The html of this PushoverConfig.  # noqa: E501
        :rtype: bool
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this PushoverConfig.


        :param html: The html of this PushoverConfig.  # noqa: E501
        :type: bool
        """

        self._html = html

    @property
    def http_config(self):
        """Gets the http_config of this PushoverConfig.  # noqa: E501


        :return: The http_config of this PushoverConfig.  # noqa: E501
        :rtype: HTTPClientConfig
        """
        return self._http_config

    @http_config.setter
    def http_config(self, http_config):
        """Sets the http_config of this PushoverConfig.


        :param http_config: The http_config of this PushoverConfig.  # noqa: E501
        :type: HTTPClientConfig
        """

        self._http_config = http_config

    @property
    def message(self):
        """Gets the message of this PushoverConfig.  # noqa: E501


        :return: The message of this PushoverConfig.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PushoverConfig.


        :param message: The message of this PushoverConfig.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def priority(self):
        """Gets the priority of this PushoverConfig.  # noqa: E501


        :return: The priority of this PushoverConfig.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this PushoverConfig.


        :param priority: The priority of this PushoverConfig.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def retry(self):
        """Gets the retry of this PushoverConfig.  # noqa: E501


        :return: The retry of this PushoverConfig.  # noqa: E501
        :rtype: Duration
        """
        return self._retry

    @retry.setter
    def retry(self, retry):
        """Sets the retry of this PushoverConfig.


        :param retry: The retry of this PushoverConfig.  # noqa: E501
        :type: Duration
        """

        self._retry = retry

    @property
    def send_resolved(self):
        """Gets the send_resolved of this PushoverConfig.  # noqa: E501


        :return: The send_resolved of this PushoverConfig.  # noqa: E501
        :rtype: bool
        """
        return self._send_resolved

    @send_resolved.setter
    def send_resolved(self, send_resolved):
        """Sets the send_resolved of this PushoverConfig.


        :param send_resolved: The send_resolved of this PushoverConfig.  # noqa: E501
        :type: bool
        """

        self._send_resolved = send_resolved

    @property
    def sound(self):
        """Gets the sound of this PushoverConfig.  # noqa: E501


        :return: The sound of this PushoverConfig.  # noqa: E501
        :rtype: str
        """
        return self._sound

    @sound.setter
    def sound(self, sound):
        """Sets the sound of this PushoverConfig.


        :param sound: The sound of this PushoverConfig.  # noqa: E501
        :type: str
        """

        self._sound = sound

    @property
    def title(self):
        """Gets the title of this PushoverConfig.  # noqa: E501


        :return: The title of this PushoverConfig.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PushoverConfig.


        :param title: The title of this PushoverConfig.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def token(self):
        """Gets the token of this PushoverConfig.  # noqa: E501


        :return: The token of this PushoverConfig.  # noqa: E501
        :rtype: Secret
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PushoverConfig.


        :param token: The token of this PushoverConfig.  # noqa: E501
        :type: Secret
        """

        self._token = token

    @property
    def url(self):
        """Gets the url of this PushoverConfig.  # noqa: E501


        :return: The url of this PushoverConfig.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PushoverConfig.


        :param url: The url of this PushoverConfig.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def url_title(self):
        """Gets the url_title of this PushoverConfig.  # noqa: E501


        :return: The url_title of this PushoverConfig.  # noqa: E501
        :rtype: str
        """
        return self._url_title

    @url_title.setter
    def url_title(self, url_title):
        """Sets the url_title of this PushoverConfig.


        :param url_title: The url_title of this PushoverConfig.  # noqa: E501
        :type: str
        """

        self._url_title = url_title

    @property
    def user_key(self):
        """Gets the user_key of this PushoverConfig.  # noqa: E501


        :return: The user_key of this PushoverConfig.  # noqa: E501
        :rtype: Secret
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key):
        """Sets the user_key of this PushoverConfig.


        :param user_key: The user_key of this PushoverConfig.  # noqa: E501
        :type: Secret
        """

        self._user_key = user_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PushoverConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PushoverConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PushoverConfig):
            return True

        return self.to_dict() != other.to_dict()
