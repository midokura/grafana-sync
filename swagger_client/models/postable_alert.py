# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PostableAlert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotations': 'LabelSet',
        'ends_at': 'datetime',
        'generator_url': 'str',
        'labels': 'LabelSet',
        'starts_at': 'datetime'
    }

    attribute_map = {
        'annotations': 'annotations',
        'ends_at': 'endsAt',
        'generator_url': 'generatorURL',
        'labels': 'labels',
        'starts_at': 'startsAt'
    }

    def __init__(self, annotations=None, ends_at=None, generator_url=None, labels=None, starts_at=None, _configuration=None):  # noqa: E501
        """PostableAlert - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._annotations = None
        self._ends_at = None
        self._generator_url = None
        self._labels = None
        self._starts_at = None
        self.discriminator = None

        if annotations is not None:
            self.annotations = annotations
        if ends_at is not None:
            self.ends_at = ends_at
        if generator_url is not None:
            self.generator_url = generator_url
        self.labels = labels
        if starts_at is not None:
            self.starts_at = starts_at

    @property
    def annotations(self):
        """Gets the annotations of this PostableAlert.  # noqa: E501


        :return: The annotations of this PostableAlert.  # noqa: E501
        :rtype: LabelSet
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this PostableAlert.


        :param annotations: The annotations of this PostableAlert.  # noqa: E501
        :type: LabelSet
        """

        self._annotations = annotations

    @property
    def ends_at(self):
        """Gets the ends_at of this PostableAlert.  # noqa: E501

        ends at Format: date-time  # noqa: E501

        :return: The ends_at of this PostableAlert.  # noqa: E501
        :rtype: datetime
        """
        return self._ends_at

    @ends_at.setter
    def ends_at(self, ends_at):
        """Sets the ends_at of this PostableAlert.

        ends at Format: date-time  # noqa: E501

        :param ends_at: The ends_at of this PostableAlert.  # noqa: E501
        :type: datetime
        """

        self._ends_at = ends_at

    @property
    def generator_url(self):
        """Gets the generator_url of this PostableAlert.  # noqa: E501

        generator URL Format: uri  # noqa: E501

        :return: The generator_url of this PostableAlert.  # noqa: E501
        :rtype: str
        """
        return self._generator_url

    @generator_url.setter
    def generator_url(self, generator_url):
        """Sets the generator_url of this PostableAlert.

        generator URL Format: uri  # noqa: E501

        :param generator_url: The generator_url of this PostableAlert.  # noqa: E501
        :type: str
        """

        self._generator_url = generator_url

    @property
    def labels(self):
        """Gets the labels of this PostableAlert.  # noqa: E501


        :return: The labels of this PostableAlert.  # noqa: E501
        :rtype: LabelSet
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PostableAlert.


        :param labels: The labels of this PostableAlert.  # noqa: E501
        :type: LabelSet
        """
        if self._configuration.client_side_validation and labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def starts_at(self):
        """Gets the starts_at of this PostableAlert.  # noqa: E501

        starts at Format: date-time  # noqa: E501

        :return: The starts_at of this PostableAlert.  # noqa: E501
        :rtype: datetime
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this PostableAlert.

        starts at Format: date-time  # noqa: E501

        :param starts_at: The starts_at of this PostableAlert.  # noqa: E501
        :type: datetime
        """

        self._starts_at = starts_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostableAlert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostableAlert):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostableAlert):
            return True

        return self.to_dict() != other.to_dict()
