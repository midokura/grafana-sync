# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PlaylistDashboard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'order': 'int',
        'slug': 'str',
        'title': 'str',
        'uri': 'str',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'order': 'order',
        'slug': 'slug',
        'title': 'title',
        'uri': 'uri',
        'url': 'url'
    }

    def __init__(self, id=None, order=None, slug=None, title=None, uri=None, url=None, _configuration=None):  # noqa: E501
        """PlaylistDashboard - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._order = None
        self._slug = None
        self._title = None
        self._uri = None
        self._url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if order is not None:
            self.order = order
        if slug is not None:
            self.slug = slug
        if title is not None:
            self.title = title
        if uri is not None:
            self.uri = uri
        if url is not None:
            self.url = url

    @property
    def id(self):
        """Gets the id of this PlaylistDashboard.  # noqa: E501


        :return: The id of this PlaylistDashboard.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlaylistDashboard.


        :param id: The id of this PlaylistDashboard.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def order(self):
        """Gets the order of this PlaylistDashboard.  # noqa: E501


        :return: The order of this PlaylistDashboard.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PlaylistDashboard.


        :param order: The order of this PlaylistDashboard.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def slug(self):
        """Gets the slug of this PlaylistDashboard.  # noqa: E501


        :return: The slug of this PlaylistDashboard.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this PlaylistDashboard.


        :param slug: The slug of this PlaylistDashboard.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def title(self):
        """Gets the title of this PlaylistDashboard.  # noqa: E501


        :return: The title of this PlaylistDashboard.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PlaylistDashboard.


        :param title: The title of this PlaylistDashboard.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def uri(self):
        """Gets the uri of this PlaylistDashboard.  # noqa: E501


        :return: The uri of this PlaylistDashboard.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this PlaylistDashboard.


        :param uri: The uri of this PlaylistDashboard.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def url(self):
        """Gets the url of this PlaylistDashboard.  # noqa: E501


        :return: The url of this PlaylistDashboard.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PlaylistDashboard.


        :param url: The url of this PlaylistDashboard.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlaylistDashboard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlaylistDashboard):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlaylistDashboard):
            return True

        return self.to_dict() != other.to_dict()
