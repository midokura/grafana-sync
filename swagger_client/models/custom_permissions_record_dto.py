# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CustomPermissionsRecordDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_permissions': 'str',
        'grantee_name': 'str',
        'grantee_type': 'str',
        'grantee_url': 'str',
        'id': 'int',
        'is_folder': 'bool',
        'org_id': 'int',
        'org_role': 'str',
        'slug': 'str',
        'title': 'str',
        'uid': 'str',
        'url': 'str',
        'users_count': 'int'
    }

    attribute_map = {
        'custom_permissions': 'customPermissions',
        'grantee_name': 'granteeName',
        'grantee_type': 'granteeType',
        'grantee_url': 'granteeUrl',
        'id': 'id',
        'is_folder': 'isFolder',
        'org_id': 'orgId',
        'org_role': 'orgRole',
        'slug': 'slug',
        'title': 'title',
        'uid': 'uid',
        'url': 'url',
        'users_count': 'usersCount'
    }

    def __init__(self, custom_permissions=None, grantee_name=None, grantee_type=None, grantee_url=None, id=None, is_folder=None, org_id=None, org_role=None, slug=None, title=None, uid=None, url=None, users_count=None, _configuration=None):  # noqa: E501
        """CustomPermissionsRecordDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._custom_permissions = None
        self._grantee_name = None
        self._grantee_type = None
        self._grantee_url = None
        self._id = None
        self._is_folder = None
        self._org_id = None
        self._org_role = None
        self._slug = None
        self._title = None
        self._uid = None
        self._url = None
        self._users_count = None
        self.discriminator = None

        if custom_permissions is not None:
            self.custom_permissions = custom_permissions
        if grantee_name is not None:
            self.grantee_name = grantee_name
        if grantee_type is not None:
            self.grantee_type = grantee_type
        if grantee_url is not None:
            self.grantee_url = grantee_url
        if id is not None:
            self.id = id
        if is_folder is not None:
            self.is_folder = is_folder
        if org_id is not None:
            self.org_id = org_id
        if org_role is not None:
            self.org_role = org_role
        if slug is not None:
            self.slug = slug
        if title is not None:
            self.title = title
        if uid is not None:
            self.uid = uid
        if url is not None:
            self.url = url
        if users_count is not None:
            self.users_count = users_count

    @property
    def custom_permissions(self):
        """Gets the custom_permissions of this CustomPermissionsRecordDTO.  # noqa: E501


        :return: The custom_permissions of this CustomPermissionsRecordDTO.  # noqa: E501
        :rtype: str
        """
        return self._custom_permissions

    @custom_permissions.setter
    def custom_permissions(self, custom_permissions):
        """Sets the custom_permissions of this CustomPermissionsRecordDTO.


        :param custom_permissions: The custom_permissions of this CustomPermissionsRecordDTO.  # noqa: E501
        :type: str
        """

        self._custom_permissions = custom_permissions

    @property
    def grantee_name(self):
        """Gets the grantee_name of this CustomPermissionsRecordDTO.  # noqa: E501


        :return: The grantee_name of this CustomPermissionsRecordDTO.  # noqa: E501
        :rtype: str
        """
        return self._grantee_name

    @grantee_name.setter
    def grantee_name(self, grantee_name):
        """Sets the grantee_name of this CustomPermissionsRecordDTO.


        :param grantee_name: The grantee_name of this CustomPermissionsRecordDTO.  # noqa: E501
        :type: str
        """

        self._grantee_name = grantee_name

    @property
    def grantee_type(self):
        """Gets the grantee_type of this CustomPermissionsRecordDTO.  # noqa: E501


        :return: The grantee_type of this CustomPermissionsRecordDTO.  # noqa: E501
        :rtype: str
        """
        return self._grantee_type

    @grantee_type.setter
    def grantee_type(self, grantee_type):
        """Sets the grantee_type of this CustomPermissionsRecordDTO.


        :param grantee_type: The grantee_type of this CustomPermissionsRecordDTO.  # noqa: E501
        :type: str
        """

        self._grantee_type = grantee_type

    @property
    def grantee_url(self):
        """Gets the grantee_url of this CustomPermissionsRecordDTO.  # noqa: E501


        :return: The grantee_url of this CustomPermissionsRecordDTO.  # noqa: E501
        :rtype: str
        """
        return self._grantee_url

    @grantee_url.setter
    def grantee_url(self, grantee_url):
        """Sets the grantee_url of this CustomPermissionsRecordDTO.


        :param grantee_url: The grantee_url of this CustomPermissionsRecordDTO.  # noqa: E501
        :type: str
        """

        self._grantee_url = grantee_url

    @property
    def id(self):
        """Gets the id of this CustomPermissionsRecordDTO.  # noqa: E501


        :return: The id of this CustomPermissionsRecordDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomPermissionsRecordDTO.


        :param id: The id of this CustomPermissionsRecordDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_folder(self):
        """Gets the is_folder of this CustomPermissionsRecordDTO.  # noqa: E501


        :return: The is_folder of this CustomPermissionsRecordDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_folder

    @is_folder.setter
    def is_folder(self, is_folder):
        """Sets the is_folder of this CustomPermissionsRecordDTO.


        :param is_folder: The is_folder of this CustomPermissionsRecordDTO.  # noqa: E501
        :type: bool
        """

        self._is_folder = is_folder

    @property
    def org_id(self):
        """Gets the org_id of this CustomPermissionsRecordDTO.  # noqa: E501


        :return: The org_id of this CustomPermissionsRecordDTO.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this CustomPermissionsRecordDTO.


        :param org_id: The org_id of this CustomPermissionsRecordDTO.  # noqa: E501
        :type: int
        """

        self._org_id = org_id

    @property
    def org_role(self):
        """Gets the org_role of this CustomPermissionsRecordDTO.  # noqa: E501


        :return: The org_role of this CustomPermissionsRecordDTO.  # noqa: E501
        :rtype: str
        """
        return self._org_role

    @org_role.setter
    def org_role(self, org_role):
        """Sets the org_role of this CustomPermissionsRecordDTO.


        :param org_role: The org_role of this CustomPermissionsRecordDTO.  # noqa: E501
        :type: str
        """

        self._org_role = org_role

    @property
    def slug(self):
        """Gets the slug of this CustomPermissionsRecordDTO.  # noqa: E501


        :return: The slug of this CustomPermissionsRecordDTO.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this CustomPermissionsRecordDTO.


        :param slug: The slug of this CustomPermissionsRecordDTO.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def title(self):
        """Gets the title of this CustomPermissionsRecordDTO.  # noqa: E501


        :return: The title of this CustomPermissionsRecordDTO.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CustomPermissionsRecordDTO.


        :param title: The title of this CustomPermissionsRecordDTO.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def uid(self):
        """Gets the uid of this CustomPermissionsRecordDTO.  # noqa: E501


        :return: The uid of this CustomPermissionsRecordDTO.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this CustomPermissionsRecordDTO.


        :param uid: The uid of this CustomPermissionsRecordDTO.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def url(self):
        """Gets the url of this CustomPermissionsRecordDTO.  # noqa: E501


        :return: The url of this CustomPermissionsRecordDTO.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CustomPermissionsRecordDTO.


        :param url: The url of this CustomPermissionsRecordDTO.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def users_count(self):
        """Gets the users_count of this CustomPermissionsRecordDTO.  # noqa: E501


        :return: The users_count of this CustomPermissionsRecordDTO.  # noqa: E501
        :rtype: int
        """
        return self._users_count

    @users_count.setter
    def users_count(self, users_count):
        """Sets the users_count of this CustomPermissionsRecordDTO.


        :param users_count: The users_count of this CustomPermissionsRecordDTO.  # noqa: E501
        :type: int
        """

        self._users_count = users_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomPermissionsRecordDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomPermissionsRecordDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomPermissionsRecordDTO):
            return True

        return self.to_dict() != other.to_dict()
