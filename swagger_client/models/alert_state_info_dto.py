# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AlertStateInfoDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dashboard_id': 'int',
        'id': 'int',
        'new_state_date': 'datetime',
        'panel_id': 'int',
        'state': 'AlertStateType'
    }

    attribute_map = {
        'dashboard_id': 'dashboardId',
        'id': 'id',
        'new_state_date': 'newStateDate',
        'panel_id': 'panelId',
        'state': 'state'
    }

    def __init__(self, dashboard_id=None, id=None, new_state_date=None, panel_id=None, state=None, _configuration=None):  # noqa: E501
        """AlertStateInfoDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dashboard_id = None
        self._id = None
        self._new_state_date = None
        self._panel_id = None
        self._state = None
        self.discriminator = None

        if dashboard_id is not None:
            self.dashboard_id = dashboard_id
        if id is not None:
            self.id = id
        if new_state_date is not None:
            self.new_state_date = new_state_date
        if panel_id is not None:
            self.panel_id = panel_id
        if state is not None:
            self.state = state

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this AlertStateInfoDTO.  # noqa: E501


        :return: The dashboard_id of this AlertStateInfoDTO.  # noqa: E501
        :rtype: int
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this AlertStateInfoDTO.


        :param dashboard_id: The dashboard_id of this AlertStateInfoDTO.  # noqa: E501
        :type: int
        """

        self._dashboard_id = dashboard_id

    @property
    def id(self):
        """Gets the id of this AlertStateInfoDTO.  # noqa: E501


        :return: The id of this AlertStateInfoDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlertStateInfoDTO.


        :param id: The id of this AlertStateInfoDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def new_state_date(self):
        """Gets the new_state_date of this AlertStateInfoDTO.  # noqa: E501


        :return: The new_state_date of this AlertStateInfoDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._new_state_date

    @new_state_date.setter
    def new_state_date(self, new_state_date):
        """Sets the new_state_date of this AlertStateInfoDTO.


        :param new_state_date: The new_state_date of this AlertStateInfoDTO.  # noqa: E501
        :type: datetime
        """

        self._new_state_date = new_state_date

    @property
    def panel_id(self):
        """Gets the panel_id of this AlertStateInfoDTO.  # noqa: E501


        :return: The panel_id of this AlertStateInfoDTO.  # noqa: E501
        :rtype: int
        """
        return self._panel_id

    @panel_id.setter
    def panel_id(self, panel_id):
        """Sets the panel_id of this AlertStateInfoDTO.


        :param panel_id: The panel_id of this AlertStateInfoDTO.  # noqa: E501
        :type: int
        """

        self._panel_id = panel_id

    @property
    def state(self):
        """Gets the state of this AlertStateInfoDTO.  # noqa: E501


        :return: The state of this AlertStateInfoDTO.  # noqa: E501
        :rtype: AlertStateType
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AlertStateInfoDTO.


        :param state: The state of this AlertStateInfoDTO.  # noqa: E501
        :type: AlertStateType
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertStateInfoDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertStateInfoDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlertStateInfoDTO):
            return True

        return self.to_dict() != other.to_dict()
