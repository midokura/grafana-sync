# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TokenDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'expiration': 'datetime',
        'has_expired': 'bool',
        'id': 'int',
        'last_used_at': 'datetime',
        'name': 'str',
        'seconds_until_expiration': 'float'
    }

    attribute_map = {
        'created': 'created',
        'expiration': 'expiration',
        'has_expired': 'hasExpired',
        'id': 'id',
        'last_used_at': 'lastUsedAt',
        'name': 'name',
        'seconds_until_expiration': 'secondsUntilExpiration'
    }

    def __init__(self, created=None, expiration=None, has_expired=None, id=None, last_used_at=None, name=None, seconds_until_expiration=None, _configuration=None):  # noqa: E501
        """TokenDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created = None
        self._expiration = None
        self._has_expired = None
        self._id = None
        self._last_used_at = None
        self._name = None
        self._seconds_until_expiration = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if expiration is not None:
            self.expiration = expiration
        if has_expired is not None:
            self.has_expired = has_expired
        if id is not None:
            self.id = id
        if last_used_at is not None:
            self.last_used_at = last_used_at
        if name is not None:
            self.name = name
        if seconds_until_expiration is not None:
            self.seconds_until_expiration = seconds_until_expiration

    @property
    def created(self):
        """Gets the created of this TokenDTO.  # noqa: E501


        :return: The created of this TokenDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this TokenDTO.


        :param created: The created of this TokenDTO.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def expiration(self):
        """Gets the expiration of this TokenDTO.  # noqa: E501


        :return: The expiration of this TokenDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this TokenDTO.


        :param expiration: The expiration of this TokenDTO.  # noqa: E501
        :type: datetime
        """

        self._expiration = expiration

    @property
    def has_expired(self):
        """Gets the has_expired of this TokenDTO.  # noqa: E501


        :return: The has_expired of this TokenDTO.  # noqa: E501
        :rtype: bool
        """
        return self._has_expired

    @has_expired.setter
    def has_expired(self, has_expired):
        """Sets the has_expired of this TokenDTO.


        :param has_expired: The has_expired of this TokenDTO.  # noqa: E501
        :type: bool
        """

        self._has_expired = has_expired

    @property
    def id(self):
        """Gets the id of this TokenDTO.  # noqa: E501


        :return: The id of this TokenDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TokenDTO.


        :param id: The id of this TokenDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_used_at(self):
        """Gets the last_used_at of this TokenDTO.  # noqa: E501


        :return: The last_used_at of this TokenDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_used_at

    @last_used_at.setter
    def last_used_at(self, last_used_at):
        """Sets the last_used_at of this TokenDTO.


        :param last_used_at: The last_used_at of this TokenDTO.  # noqa: E501
        :type: datetime
        """

        self._last_used_at = last_used_at

    @property
    def name(self):
        """Gets the name of this TokenDTO.  # noqa: E501


        :return: The name of this TokenDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TokenDTO.


        :param name: The name of this TokenDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def seconds_until_expiration(self):
        """Gets the seconds_until_expiration of this TokenDTO.  # noqa: E501


        :return: The seconds_until_expiration of this TokenDTO.  # noqa: E501
        :rtype: float
        """
        return self._seconds_until_expiration

    @seconds_until_expiration.setter
    def seconds_until_expiration(self, seconds_until_expiration):
        """Sets the seconds_until_expiration of this TokenDTO.


        :param seconds_until_expiration: The seconds_until_expiration of this TokenDTO.  # noqa: E501
        :type: float
        """

        self._seconds_until_expiration = seconds_until_expiration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TokenDTO):
            return True

        return self.to_dict() != other.to_dict()
