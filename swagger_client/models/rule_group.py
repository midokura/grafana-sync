# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RuleGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'evaluation_time': 'float',
        'file': 'str',
        'interval': 'float',
        'last_evaluation': 'datetime',
        'name': 'str',
        'rules': 'list[AlertingRule]'
    }

    attribute_map = {
        'evaluation_time': 'evaluationTime',
        'file': 'file',
        'interval': 'interval',
        'last_evaluation': 'lastEvaluation',
        'name': 'name',
        'rules': 'rules'
    }

    def __init__(self, evaluation_time=None, file=None, interval=None, last_evaluation=None, name=None, rules=None, _configuration=None):  # noqa: E501
        """RuleGroup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._evaluation_time = None
        self._file = None
        self._interval = None
        self._last_evaluation = None
        self._name = None
        self._rules = None
        self.discriminator = None

        if evaluation_time is not None:
            self.evaluation_time = evaluation_time
        self.file = file
        self.interval = interval
        if last_evaluation is not None:
            self.last_evaluation = last_evaluation
        self.name = name
        self.rules = rules

    @property
    def evaluation_time(self):
        """Gets the evaluation_time of this RuleGroup.  # noqa: E501


        :return: The evaluation_time of this RuleGroup.  # noqa: E501
        :rtype: float
        """
        return self._evaluation_time

    @evaluation_time.setter
    def evaluation_time(self, evaluation_time):
        """Sets the evaluation_time of this RuleGroup.


        :param evaluation_time: The evaluation_time of this RuleGroup.  # noqa: E501
        :type: float
        """

        self._evaluation_time = evaluation_time

    @property
    def file(self):
        """Gets the file of this RuleGroup.  # noqa: E501


        :return: The file of this RuleGroup.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this RuleGroup.


        :param file: The file of this RuleGroup.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def interval(self):
        """Gets the interval of this RuleGroup.  # noqa: E501


        :return: The interval of this RuleGroup.  # noqa: E501
        :rtype: float
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this RuleGroup.


        :param interval: The interval of this RuleGroup.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501

        self._interval = interval

    @property
    def last_evaluation(self):
        """Gets the last_evaluation of this RuleGroup.  # noqa: E501


        :return: The last_evaluation of this RuleGroup.  # noqa: E501
        :rtype: datetime
        """
        return self._last_evaluation

    @last_evaluation.setter
    def last_evaluation(self, last_evaluation):
        """Sets the last_evaluation of this RuleGroup.


        :param last_evaluation: The last_evaluation of this RuleGroup.  # noqa: E501
        :type: datetime
        """

        self._last_evaluation = last_evaluation

    @property
    def name(self):
        """Gets the name of this RuleGroup.  # noqa: E501


        :return: The name of this RuleGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RuleGroup.


        :param name: The name of this RuleGroup.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def rules(self):
        """Gets the rules of this RuleGroup.  # noqa: E501

        In order to preserve rule ordering, while exposing type (alerting or recording) specific properties, both alerting and recording rules are exposed in the same array.  # noqa: E501

        :return: The rules of this RuleGroup.  # noqa: E501
        :rtype: list[AlertingRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this RuleGroup.

        In order to preserve rule ordering, while exposing type (alerting or recording) specific properties, both alerting and recording rules are exposed in the same array.  # noqa: E501

        :param rules: The rules of this RuleGroup.  # noqa: E501
        :type: list[AlertingRule]
        """
        if self._configuration.client_side_validation and rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")  # noqa: E501

        self._rules = rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RuleGroup):
            return True

        return self.to_dict() != other.to_dict()
