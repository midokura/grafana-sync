# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LibraryElementConnectionDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_id': 'int',
        'connection_uid': 'str',
        'created': 'datetime',
        'created_by': 'LibraryElementDTOMetaUser',
        'element_id': 'int',
        'id': 'int',
        'kind': 'int'
    }

    attribute_map = {
        'connection_id': 'connectionId',
        'connection_uid': 'connectionUid',
        'created': 'created',
        'created_by': 'createdBy',
        'element_id': 'elementId',
        'id': 'id',
        'kind': 'kind'
    }

    def __init__(self, connection_id=None, connection_uid=None, created=None, created_by=None, element_id=None, id=None, kind=None, _configuration=None):  # noqa: E501
        """LibraryElementConnectionDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connection_id = None
        self._connection_uid = None
        self._created = None
        self._created_by = None
        self._element_id = None
        self._id = None
        self._kind = None
        self.discriminator = None

        if connection_id is not None:
            self.connection_id = connection_id
        if connection_uid is not None:
            self.connection_uid = connection_uid
        if created is not None:
            self.created = created
        if created_by is not None:
            self.created_by = created_by
        if element_id is not None:
            self.element_id = element_id
        if id is not None:
            self.id = id
        if kind is not None:
            self.kind = kind

    @property
    def connection_id(self):
        """Gets the connection_id of this LibraryElementConnectionDTO.  # noqa: E501


        :return: The connection_id of this LibraryElementConnectionDTO.  # noqa: E501
        :rtype: int
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this LibraryElementConnectionDTO.


        :param connection_id: The connection_id of this LibraryElementConnectionDTO.  # noqa: E501
        :type: int
        """

        self._connection_id = connection_id

    @property
    def connection_uid(self):
        """Gets the connection_uid of this LibraryElementConnectionDTO.  # noqa: E501


        :return: The connection_uid of this LibraryElementConnectionDTO.  # noqa: E501
        :rtype: str
        """
        return self._connection_uid

    @connection_uid.setter
    def connection_uid(self, connection_uid):
        """Sets the connection_uid of this LibraryElementConnectionDTO.


        :param connection_uid: The connection_uid of this LibraryElementConnectionDTO.  # noqa: E501
        :type: str
        """

        self._connection_uid = connection_uid

    @property
    def created(self):
        """Gets the created of this LibraryElementConnectionDTO.  # noqa: E501


        :return: The created of this LibraryElementConnectionDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this LibraryElementConnectionDTO.


        :param created: The created of this LibraryElementConnectionDTO.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this LibraryElementConnectionDTO.  # noqa: E501


        :return: The created_by of this LibraryElementConnectionDTO.  # noqa: E501
        :rtype: LibraryElementDTOMetaUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this LibraryElementConnectionDTO.


        :param created_by: The created_by of this LibraryElementConnectionDTO.  # noqa: E501
        :type: LibraryElementDTOMetaUser
        """

        self._created_by = created_by

    @property
    def element_id(self):
        """Gets the element_id of this LibraryElementConnectionDTO.  # noqa: E501


        :return: The element_id of this LibraryElementConnectionDTO.  # noqa: E501
        :rtype: int
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this LibraryElementConnectionDTO.


        :param element_id: The element_id of this LibraryElementConnectionDTO.  # noqa: E501
        :type: int
        """

        self._element_id = element_id

    @property
    def id(self):
        """Gets the id of this LibraryElementConnectionDTO.  # noqa: E501


        :return: The id of this LibraryElementConnectionDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LibraryElementConnectionDTO.


        :param id: The id of this LibraryElementConnectionDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this LibraryElementConnectionDTO.  # noqa: E501


        :return: The kind of this LibraryElementConnectionDTO.  # noqa: E501
        :rtype: int
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this LibraryElementConnectionDTO.


        :param kind: The kind of this LibraryElementConnectionDTO.  # noqa: E501
        :type: int
        """

        self._kind = kind

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LibraryElementConnectionDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryElementConnectionDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LibraryElementConnectionDTO):
            return True

        return self.to_dict() != other.to_dict()
