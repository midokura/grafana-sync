# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EmailConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_identity': 'str',
        'auth_password': 'Secret',
        'auth_secret': 'Secret',
        'auth_username': 'str',
        '_from': 'str',
        'headers': 'dict(str, str)',
        'hello': 'str',
        'html': 'str',
        'require_tls': 'bool',
        'send_resolved': 'bool',
        'smarthost': 'HostPort',
        'text': 'str',
        'tls_config': 'TLSConfig',
        'to': 'str'
    }

    attribute_map = {
        'auth_identity': 'auth_identity',
        'auth_password': 'auth_password',
        'auth_secret': 'auth_secret',
        'auth_username': 'auth_username',
        '_from': 'from',
        'headers': 'headers',
        'hello': 'hello',
        'html': 'html',
        'require_tls': 'require_tls',
        'send_resolved': 'send_resolved',
        'smarthost': 'smarthost',
        'text': 'text',
        'tls_config': 'tls_config',
        'to': 'to'
    }

    def __init__(self, auth_identity=None, auth_password=None, auth_secret=None, auth_username=None, _from=None, headers=None, hello=None, html=None, require_tls=None, send_resolved=None, smarthost=None, text=None, tls_config=None, to=None, _configuration=None):  # noqa: E501
        """EmailConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auth_identity = None
        self._auth_password = None
        self._auth_secret = None
        self._auth_username = None
        self.__from = None
        self._headers = None
        self._hello = None
        self._html = None
        self._require_tls = None
        self._send_resolved = None
        self._smarthost = None
        self._text = None
        self._tls_config = None
        self._to = None
        self.discriminator = None

        if auth_identity is not None:
            self.auth_identity = auth_identity
        if auth_password is not None:
            self.auth_password = auth_password
        if auth_secret is not None:
            self.auth_secret = auth_secret
        if auth_username is not None:
            self.auth_username = auth_username
        if _from is not None:
            self._from = _from
        if headers is not None:
            self.headers = headers
        if hello is not None:
            self.hello = hello
        if html is not None:
            self.html = html
        if require_tls is not None:
            self.require_tls = require_tls
        if send_resolved is not None:
            self.send_resolved = send_resolved
        if smarthost is not None:
            self.smarthost = smarthost
        if text is not None:
            self.text = text
        if tls_config is not None:
            self.tls_config = tls_config
        if to is not None:
            self.to = to

    @property
    def auth_identity(self):
        """Gets the auth_identity of this EmailConfig.  # noqa: E501


        :return: The auth_identity of this EmailConfig.  # noqa: E501
        :rtype: str
        """
        return self._auth_identity

    @auth_identity.setter
    def auth_identity(self, auth_identity):
        """Sets the auth_identity of this EmailConfig.


        :param auth_identity: The auth_identity of this EmailConfig.  # noqa: E501
        :type: str
        """

        self._auth_identity = auth_identity

    @property
    def auth_password(self):
        """Gets the auth_password of this EmailConfig.  # noqa: E501


        :return: The auth_password of this EmailConfig.  # noqa: E501
        :rtype: Secret
        """
        return self._auth_password

    @auth_password.setter
    def auth_password(self, auth_password):
        """Sets the auth_password of this EmailConfig.


        :param auth_password: The auth_password of this EmailConfig.  # noqa: E501
        :type: Secret
        """

        self._auth_password = auth_password

    @property
    def auth_secret(self):
        """Gets the auth_secret of this EmailConfig.  # noqa: E501


        :return: The auth_secret of this EmailConfig.  # noqa: E501
        :rtype: Secret
        """
        return self._auth_secret

    @auth_secret.setter
    def auth_secret(self, auth_secret):
        """Sets the auth_secret of this EmailConfig.


        :param auth_secret: The auth_secret of this EmailConfig.  # noqa: E501
        :type: Secret
        """

        self._auth_secret = auth_secret

    @property
    def auth_username(self):
        """Gets the auth_username of this EmailConfig.  # noqa: E501


        :return: The auth_username of this EmailConfig.  # noqa: E501
        :rtype: str
        """
        return self._auth_username

    @auth_username.setter
    def auth_username(self, auth_username):
        """Sets the auth_username of this EmailConfig.


        :param auth_username: The auth_username of this EmailConfig.  # noqa: E501
        :type: str
        """

        self._auth_username = auth_username

    @property
    def _from(self):
        """Gets the _from of this EmailConfig.  # noqa: E501


        :return: The _from of this EmailConfig.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this EmailConfig.


        :param _from: The _from of this EmailConfig.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def headers(self):
        """Gets the headers of this EmailConfig.  # noqa: E501


        :return: The headers of this EmailConfig.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this EmailConfig.


        :param headers: The headers of this EmailConfig.  # noqa: E501
        :type: dict(str, str)
        """

        self._headers = headers

    @property
    def hello(self):
        """Gets the hello of this EmailConfig.  # noqa: E501


        :return: The hello of this EmailConfig.  # noqa: E501
        :rtype: str
        """
        return self._hello

    @hello.setter
    def hello(self, hello):
        """Sets the hello of this EmailConfig.


        :param hello: The hello of this EmailConfig.  # noqa: E501
        :type: str
        """

        self._hello = hello

    @property
    def html(self):
        """Gets the html of this EmailConfig.  # noqa: E501


        :return: The html of this EmailConfig.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this EmailConfig.


        :param html: The html of this EmailConfig.  # noqa: E501
        :type: str
        """

        self._html = html

    @property
    def require_tls(self):
        """Gets the require_tls of this EmailConfig.  # noqa: E501


        :return: The require_tls of this EmailConfig.  # noqa: E501
        :rtype: bool
        """
        return self._require_tls

    @require_tls.setter
    def require_tls(self, require_tls):
        """Sets the require_tls of this EmailConfig.


        :param require_tls: The require_tls of this EmailConfig.  # noqa: E501
        :type: bool
        """

        self._require_tls = require_tls

    @property
    def send_resolved(self):
        """Gets the send_resolved of this EmailConfig.  # noqa: E501


        :return: The send_resolved of this EmailConfig.  # noqa: E501
        :rtype: bool
        """
        return self._send_resolved

    @send_resolved.setter
    def send_resolved(self, send_resolved):
        """Sets the send_resolved of this EmailConfig.


        :param send_resolved: The send_resolved of this EmailConfig.  # noqa: E501
        :type: bool
        """

        self._send_resolved = send_resolved

    @property
    def smarthost(self):
        """Gets the smarthost of this EmailConfig.  # noqa: E501


        :return: The smarthost of this EmailConfig.  # noqa: E501
        :rtype: HostPort
        """
        return self._smarthost

    @smarthost.setter
    def smarthost(self, smarthost):
        """Sets the smarthost of this EmailConfig.


        :param smarthost: The smarthost of this EmailConfig.  # noqa: E501
        :type: HostPort
        """

        self._smarthost = smarthost

    @property
    def text(self):
        """Gets the text of this EmailConfig.  # noqa: E501


        :return: The text of this EmailConfig.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this EmailConfig.


        :param text: The text of this EmailConfig.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def tls_config(self):
        """Gets the tls_config of this EmailConfig.  # noqa: E501


        :return: The tls_config of this EmailConfig.  # noqa: E501
        :rtype: TLSConfig
        """
        return self._tls_config

    @tls_config.setter
    def tls_config(self, tls_config):
        """Sets the tls_config of this EmailConfig.


        :param tls_config: The tls_config of this EmailConfig.  # noqa: E501
        :type: TLSConfig
        """

        self._tls_config = tls_config

    @property
    def to(self):
        """Gets the to of this EmailConfig.  # noqa: E501

        Email address to notify.  # noqa: E501

        :return: The to of this EmailConfig.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this EmailConfig.

        Email address to notify.  # noqa: E501

        :param to: The to of this EmailConfig.  # noqa: E501
        :type: str
        """

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailConfig):
            return True

        return self.to_dict() != other.to_dict()
