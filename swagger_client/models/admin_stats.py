# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AdminStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_admins': 'int',
        'active_editors': 'int',
        'active_sessions': 'int',
        'active_users': 'int',
        'active_viewers': 'int',
        'admins': 'int',
        'alerts': 'int',
        'daily_active_admins': 'int',
        'daily_active_editors': 'int',
        'daily_active_sessions': 'int',
        'daily_active_users': 'int',
        'daily_active_viewers': 'int',
        'dashboards': 'int',
        'datasources': 'int',
        'editors': 'int',
        'monthly_active_users': 'int',
        'orgs': 'int',
        'playlists': 'int',
        'snapshots': 'int',
        'stars': 'int',
        'tags': 'int',
        'users': 'int',
        'viewers': 'int'
    }

    attribute_map = {
        'active_admins': 'activeAdmins',
        'active_editors': 'activeEditors',
        'active_sessions': 'activeSessions',
        'active_users': 'activeUsers',
        'active_viewers': 'activeViewers',
        'admins': 'admins',
        'alerts': 'alerts',
        'daily_active_admins': 'dailyActiveAdmins',
        'daily_active_editors': 'dailyActiveEditors',
        'daily_active_sessions': 'dailyActiveSessions',
        'daily_active_users': 'dailyActiveUsers',
        'daily_active_viewers': 'dailyActiveViewers',
        'dashboards': 'dashboards',
        'datasources': 'datasources',
        'editors': 'editors',
        'monthly_active_users': 'monthlyActiveUsers',
        'orgs': 'orgs',
        'playlists': 'playlists',
        'snapshots': 'snapshots',
        'stars': 'stars',
        'tags': 'tags',
        'users': 'users',
        'viewers': 'viewers'
    }

    def __init__(self, active_admins=None, active_editors=None, active_sessions=None, active_users=None, active_viewers=None, admins=None, alerts=None, daily_active_admins=None, daily_active_editors=None, daily_active_sessions=None, daily_active_users=None, daily_active_viewers=None, dashboards=None, datasources=None, editors=None, monthly_active_users=None, orgs=None, playlists=None, snapshots=None, stars=None, tags=None, users=None, viewers=None, _configuration=None):  # noqa: E501
        """AdminStats - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active_admins = None
        self._active_editors = None
        self._active_sessions = None
        self._active_users = None
        self._active_viewers = None
        self._admins = None
        self._alerts = None
        self._daily_active_admins = None
        self._daily_active_editors = None
        self._daily_active_sessions = None
        self._daily_active_users = None
        self._daily_active_viewers = None
        self._dashboards = None
        self._datasources = None
        self._editors = None
        self._monthly_active_users = None
        self._orgs = None
        self._playlists = None
        self._snapshots = None
        self._stars = None
        self._tags = None
        self._users = None
        self._viewers = None
        self.discriminator = None

        if active_admins is not None:
            self.active_admins = active_admins
        if active_editors is not None:
            self.active_editors = active_editors
        if active_sessions is not None:
            self.active_sessions = active_sessions
        if active_users is not None:
            self.active_users = active_users
        if active_viewers is not None:
            self.active_viewers = active_viewers
        if admins is not None:
            self.admins = admins
        if alerts is not None:
            self.alerts = alerts
        if daily_active_admins is not None:
            self.daily_active_admins = daily_active_admins
        if daily_active_editors is not None:
            self.daily_active_editors = daily_active_editors
        if daily_active_sessions is not None:
            self.daily_active_sessions = daily_active_sessions
        if daily_active_users is not None:
            self.daily_active_users = daily_active_users
        if daily_active_viewers is not None:
            self.daily_active_viewers = daily_active_viewers
        if dashboards is not None:
            self.dashboards = dashboards
        if datasources is not None:
            self.datasources = datasources
        if editors is not None:
            self.editors = editors
        if monthly_active_users is not None:
            self.monthly_active_users = monthly_active_users
        if orgs is not None:
            self.orgs = orgs
        if playlists is not None:
            self.playlists = playlists
        if snapshots is not None:
            self.snapshots = snapshots
        if stars is not None:
            self.stars = stars
        if tags is not None:
            self.tags = tags
        if users is not None:
            self.users = users
        if viewers is not None:
            self.viewers = viewers

    @property
    def active_admins(self):
        """Gets the active_admins of this AdminStats.  # noqa: E501


        :return: The active_admins of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._active_admins

    @active_admins.setter
    def active_admins(self, active_admins):
        """Sets the active_admins of this AdminStats.


        :param active_admins: The active_admins of this AdminStats.  # noqa: E501
        :type: int
        """

        self._active_admins = active_admins

    @property
    def active_editors(self):
        """Gets the active_editors of this AdminStats.  # noqa: E501


        :return: The active_editors of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._active_editors

    @active_editors.setter
    def active_editors(self, active_editors):
        """Sets the active_editors of this AdminStats.


        :param active_editors: The active_editors of this AdminStats.  # noqa: E501
        :type: int
        """

        self._active_editors = active_editors

    @property
    def active_sessions(self):
        """Gets the active_sessions of this AdminStats.  # noqa: E501


        :return: The active_sessions of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._active_sessions

    @active_sessions.setter
    def active_sessions(self, active_sessions):
        """Sets the active_sessions of this AdminStats.


        :param active_sessions: The active_sessions of this AdminStats.  # noqa: E501
        :type: int
        """

        self._active_sessions = active_sessions

    @property
    def active_users(self):
        """Gets the active_users of this AdminStats.  # noqa: E501


        :return: The active_users of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._active_users

    @active_users.setter
    def active_users(self, active_users):
        """Sets the active_users of this AdminStats.


        :param active_users: The active_users of this AdminStats.  # noqa: E501
        :type: int
        """

        self._active_users = active_users

    @property
    def active_viewers(self):
        """Gets the active_viewers of this AdminStats.  # noqa: E501


        :return: The active_viewers of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._active_viewers

    @active_viewers.setter
    def active_viewers(self, active_viewers):
        """Sets the active_viewers of this AdminStats.


        :param active_viewers: The active_viewers of this AdminStats.  # noqa: E501
        :type: int
        """

        self._active_viewers = active_viewers

    @property
    def admins(self):
        """Gets the admins of this AdminStats.  # noqa: E501


        :return: The admins of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._admins

    @admins.setter
    def admins(self, admins):
        """Sets the admins of this AdminStats.


        :param admins: The admins of this AdminStats.  # noqa: E501
        :type: int
        """

        self._admins = admins

    @property
    def alerts(self):
        """Gets the alerts of this AdminStats.  # noqa: E501


        :return: The alerts of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this AdminStats.


        :param alerts: The alerts of this AdminStats.  # noqa: E501
        :type: int
        """

        self._alerts = alerts

    @property
    def daily_active_admins(self):
        """Gets the daily_active_admins of this AdminStats.  # noqa: E501


        :return: The daily_active_admins of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._daily_active_admins

    @daily_active_admins.setter
    def daily_active_admins(self, daily_active_admins):
        """Sets the daily_active_admins of this AdminStats.


        :param daily_active_admins: The daily_active_admins of this AdminStats.  # noqa: E501
        :type: int
        """

        self._daily_active_admins = daily_active_admins

    @property
    def daily_active_editors(self):
        """Gets the daily_active_editors of this AdminStats.  # noqa: E501


        :return: The daily_active_editors of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._daily_active_editors

    @daily_active_editors.setter
    def daily_active_editors(self, daily_active_editors):
        """Sets the daily_active_editors of this AdminStats.


        :param daily_active_editors: The daily_active_editors of this AdminStats.  # noqa: E501
        :type: int
        """

        self._daily_active_editors = daily_active_editors

    @property
    def daily_active_sessions(self):
        """Gets the daily_active_sessions of this AdminStats.  # noqa: E501


        :return: The daily_active_sessions of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._daily_active_sessions

    @daily_active_sessions.setter
    def daily_active_sessions(self, daily_active_sessions):
        """Sets the daily_active_sessions of this AdminStats.


        :param daily_active_sessions: The daily_active_sessions of this AdminStats.  # noqa: E501
        :type: int
        """

        self._daily_active_sessions = daily_active_sessions

    @property
    def daily_active_users(self):
        """Gets the daily_active_users of this AdminStats.  # noqa: E501


        :return: The daily_active_users of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._daily_active_users

    @daily_active_users.setter
    def daily_active_users(self, daily_active_users):
        """Sets the daily_active_users of this AdminStats.


        :param daily_active_users: The daily_active_users of this AdminStats.  # noqa: E501
        :type: int
        """

        self._daily_active_users = daily_active_users

    @property
    def daily_active_viewers(self):
        """Gets the daily_active_viewers of this AdminStats.  # noqa: E501


        :return: The daily_active_viewers of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._daily_active_viewers

    @daily_active_viewers.setter
    def daily_active_viewers(self, daily_active_viewers):
        """Sets the daily_active_viewers of this AdminStats.


        :param daily_active_viewers: The daily_active_viewers of this AdminStats.  # noqa: E501
        :type: int
        """

        self._daily_active_viewers = daily_active_viewers

    @property
    def dashboards(self):
        """Gets the dashboards of this AdminStats.  # noqa: E501


        :return: The dashboards of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._dashboards

    @dashboards.setter
    def dashboards(self, dashboards):
        """Sets the dashboards of this AdminStats.


        :param dashboards: The dashboards of this AdminStats.  # noqa: E501
        :type: int
        """

        self._dashboards = dashboards

    @property
    def datasources(self):
        """Gets the datasources of this AdminStats.  # noqa: E501


        :return: The datasources of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._datasources

    @datasources.setter
    def datasources(self, datasources):
        """Sets the datasources of this AdminStats.


        :param datasources: The datasources of this AdminStats.  # noqa: E501
        :type: int
        """

        self._datasources = datasources

    @property
    def editors(self):
        """Gets the editors of this AdminStats.  # noqa: E501


        :return: The editors of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._editors

    @editors.setter
    def editors(self, editors):
        """Sets the editors of this AdminStats.


        :param editors: The editors of this AdminStats.  # noqa: E501
        :type: int
        """

        self._editors = editors

    @property
    def monthly_active_users(self):
        """Gets the monthly_active_users of this AdminStats.  # noqa: E501


        :return: The monthly_active_users of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._monthly_active_users

    @monthly_active_users.setter
    def monthly_active_users(self, monthly_active_users):
        """Sets the monthly_active_users of this AdminStats.


        :param monthly_active_users: The monthly_active_users of this AdminStats.  # noqa: E501
        :type: int
        """

        self._monthly_active_users = monthly_active_users

    @property
    def orgs(self):
        """Gets the orgs of this AdminStats.  # noqa: E501


        :return: The orgs of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._orgs

    @orgs.setter
    def orgs(self, orgs):
        """Sets the orgs of this AdminStats.


        :param orgs: The orgs of this AdminStats.  # noqa: E501
        :type: int
        """

        self._orgs = orgs

    @property
    def playlists(self):
        """Gets the playlists of this AdminStats.  # noqa: E501


        :return: The playlists of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._playlists

    @playlists.setter
    def playlists(self, playlists):
        """Sets the playlists of this AdminStats.


        :param playlists: The playlists of this AdminStats.  # noqa: E501
        :type: int
        """

        self._playlists = playlists

    @property
    def snapshots(self):
        """Gets the snapshots of this AdminStats.  # noqa: E501


        :return: The snapshots of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._snapshots

    @snapshots.setter
    def snapshots(self, snapshots):
        """Sets the snapshots of this AdminStats.


        :param snapshots: The snapshots of this AdminStats.  # noqa: E501
        :type: int
        """

        self._snapshots = snapshots

    @property
    def stars(self):
        """Gets the stars of this AdminStats.  # noqa: E501


        :return: The stars of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._stars

    @stars.setter
    def stars(self, stars):
        """Sets the stars of this AdminStats.


        :param stars: The stars of this AdminStats.  # noqa: E501
        :type: int
        """

        self._stars = stars

    @property
    def tags(self):
        """Gets the tags of this AdminStats.  # noqa: E501


        :return: The tags of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AdminStats.


        :param tags: The tags of this AdminStats.  # noqa: E501
        :type: int
        """

        self._tags = tags

    @property
    def users(self):
        """Gets the users of this AdminStats.  # noqa: E501


        :return: The users of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this AdminStats.


        :param users: The users of this AdminStats.  # noqa: E501
        :type: int
        """

        self._users = users

    @property
    def viewers(self):
        """Gets the viewers of this AdminStats.  # noqa: E501


        :return: The viewers of this AdminStats.  # noqa: E501
        :rtype: int
        """
        return self._viewers

    @viewers.setter
    def viewers(self, viewers):
        """Sets the viewers of this AdminStats.


        :param viewers: The viewers of this AdminStats.  # noqa: E501
        :type: int
        """

        self._viewers = viewers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdminStats):
            return True

        return self.to_dict() != other.to_dict()
