# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QueryHistoryDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'created_at': 'int',
        'created_by': 'int',
        'datasource_uid': 'str',
        'queries': 'Json',
        'starred': 'bool',
        'uid': 'str'
    }

    attribute_map = {
        'comment': 'comment',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'datasource_uid': 'datasourceUid',
        'queries': 'queries',
        'starred': 'starred',
        'uid': 'uid'
    }

    def __init__(self, comment=None, created_at=None, created_by=None, datasource_uid=None, queries=None, starred=None, uid=None, _configuration=None):  # noqa: E501
        """QueryHistoryDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._comment = None
        self._created_at = None
        self._created_by = None
        self._datasource_uid = None
        self._queries = None
        self._starred = None
        self._uid = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if datasource_uid is not None:
            self.datasource_uid = datasource_uid
        if queries is not None:
            self.queries = queries
        if starred is not None:
            self.starred = starred
        if uid is not None:
            self.uid = uid

    @property
    def comment(self):
        """Gets the comment of this QueryHistoryDTO.  # noqa: E501


        :return: The comment of this QueryHistoryDTO.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this QueryHistoryDTO.


        :param comment: The comment of this QueryHistoryDTO.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_at(self):
        """Gets the created_at of this QueryHistoryDTO.  # noqa: E501


        :return: The created_at of this QueryHistoryDTO.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this QueryHistoryDTO.


        :param created_at: The created_at of this QueryHistoryDTO.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this QueryHistoryDTO.  # noqa: E501


        :return: The created_by of this QueryHistoryDTO.  # noqa: E501
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this QueryHistoryDTO.


        :param created_by: The created_by of this QueryHistoryDTO.  # noqa: E501
        :type: int
        """

        self._created_by = created_by

    @property
    def datasource_uid(self):
        """Gets the datasource_uid of this QueryHistoryDTO.  # noqa: E501


        :return: The datasource_uid of this QueryHistoryDTO.  # noqa: E501
        :rtype: str
        """
        return self._datasource_uid

    @datasource_uid.setter
    def datasource_uid(self, datasource_uid):
        """Sets the datasource_uid of this QueryHistoryDTO.


        :param datasource_uid: The datasource_uid of this QueryHistoryDTO.  # noqa: E501
        :type: str
        """

        self._datasource_uid = datasource_uid

    @property
    def queries(self):
        """Gets the queries of this QueryHistoryDTO.  # noqa: E501


        :return: The queries of this QueryHistoryDTO.  # noqa: E501
        :rtype: Json
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this QueryHistoryDTO.


        :param queries: The queries of this QueryHistoryDTO.  # noqa: E501
        :type: Json
        """

        self._queries = queries

    @property
    def starred(self):
        """Gets the starred of this QueryHistoryDTO.  # noqa: E501


        :return: The starred of this QueryHistoryDTO.  # noqa: E501
        :rtype: bool
        """
        return self._starred

    @starred.setter
    def starred(self, starred):
        """Sets the starred of this QueryHistoryDTO.


        :param starred: The starred of this QueryHistoryDTO.  # noqa: E501
        :type: bool
        """

        self._starred = starred

    @property
    def uid(self):
        """Gets the uid of this QueryHistoryDTO.  # noqa: E501


        :return: The uid of this QueryHistoryDTO.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this QueryHistoryDTO.


        :param uid: The uid of this QueryHistoryDTO.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueryHistoryDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryHistoryDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueryHistoryDTO):
            return True

        return self.to_dict() != other.to_dict()
