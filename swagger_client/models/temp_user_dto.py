# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TempUserDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'created_on': 'datetime',
        'email': 'str',
        'email_sent': 'bool',
        'email_sent_on': 'datetime',
        'id': 'int',
        'invited_by_email': 'str',
        'invited_by_login': 'str',
        'invited_by_name': 'str',
        'name': 'str',
        'org_id': 'int',
        'role': 'str',
        'status': 'TempUserStatus',
        'url': 'str'
    }

    attribute_map = {
        'code': 'code',
        'created_on': 'createdOn',
        'email': 'email',
        'email_sent': 'emailSent',
        'email_sent_on': 'emailSentOn',
        'id': 'id',
        'invited_by_email': 'invitedByEmail',
        'invited_by_login': 'invitedByLogin',
        'invited_by_name': 'invitedByName',
        'name': 'name',
        'org_id': 'orgId',
        'role': 'role',
        'status': 'status',
        'url': 'url'
    }

    def __init__(self, code=None, created_on=None, email=None, email_sent=None, email_sent_on=None, id=None, invited_by_email=None, invited_by_login=None, invited_by_name=None, name=None, org_id=None, role=None, status=None, url=None, _configuration=None):  # noqa: E501
        """TempUserDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._code = None
        self._created_on = None
        self._email = None
        self._email_sent = None
        self._email_sent_on = None
        self._id = None
        self._invited_by_email = None
        self._invited_by_login = None
        self._invited_by_name = None
        self._name = None
        self._org_id = None
        self._role = None
        self._status = None
        self._url = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if created_on is not None:
            self.created_on = created_on
        if email is not None:
            self.email = email
        if email_sent is not None:
            self.email_sent = email_sent
        if email_sent_on is not None:
            self.email_sent_on = email_sent_on
        if id is not None:
            self.id = id
        if invited_by_email is not None:
            self.invited_by_email = invited_by_email
        if invited_by_login is not None:
            self.invited_by_login = invited_by_login
        if invited_by_name is not None:
            self.invited_by_name = invited_by_name
        if name is not None:
            self.name = name
        if org_id is not None:
            self.org_id = org_id
        if role is not None:
            self.role = role
        if status is not None:
            self.status = status
        if url is not None:
            self.url = url

    @property
    def code(self):
        """Gets the code of this TempUserDTO.  # noqa: E501


        :return: The code of this TempUserDTO.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TempUserDTO.


        :param code: The code of this TempUserDTO.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def created_on(self):
        """Gets the created_on of this TempUserDTO.  # noqa: E501


        :return: The created_on of this TempUserDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this TempUserDTO.


        :param created_on: The created_on of this TempUserDTO.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def email(self):
        """Gets the email of this TempUserDTO.  # noqa: E501


        :return: The email of this TempUserDTO.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this TempUserDTO.


        :param email: The email of this TempUserDTO.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def email_sent(self):
        """Gets the email_sent of this TempUserDTO.  # noqa: E501


        :return: The email_sent of this TempUserDTO.  # noqa: E501
        :rtype: bool
        """
        return self._email_sent

    @email_sent.setter
    def email_sent(self, email_sent):
        """Sets the email_sent of this TempUserDTO.


        :param email_sent: The email_sent of this TempUserDTO.  # noqa: E501
        :type: bool
        """

        self._email_sent = email_sent

    @property
    def email_sent_on(self):
        """Gets the email_sent_on of this TempUserDTO.  # noqa: E501


        :return: The email_sent_on of this TempUserDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._email_sent_on

    @email_sent_on.setter
    def email_sent_on(self, email_sent_on):
        """Sets the email_sent_on of this TempUserDTO.


        :param email_sent_on: The email_sent_on of this TempUserDTO.  # noqa: E501
        :type: datetime
        """

        self._email_sent_on = email_sent_on

    @property
    def id(self):
        """Gets the id of this TempUserDTO.  # noqa: E501


        :return: The id of this TempUserDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TempUserDTO.


        :param id: The id of this TempUserDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def invited_by_email(self):
        """Gets the invited_by_email of this TempUserDTO.  # noqa: E501


        :return: The invited_by_email of this TempUserDTO.  # noqa: E501
        :rtype: str
        """
        return self._invited_by_email

    @invited_by_email.setter
    def invited_by_email(self, invited_by_email):
        """Sets the invited_by_email of this TempUserDTO.


        :param invited_by_email: The invited_by_email of this TempUserDTO.  # noqa: E501
        :type: str
        """

        self._invited_by_email = invited_by_email

    @property
    def invited_by_login(self):
        """Gets the invited_by_login of this TempUserDTO.  # noqa: E501


        :return: The invited_by_login of this TempUserDTO.  # noqa: E501
        :rtype: str
        """
        return self._invited_by_login

    @invited_by_login.setter
    def invited_by_login(self, invited_by_login):
        """Sets the invited_by_login of this TempUserDTO.


        :param invited_by_login: The invited_by_login of this TempUserDTO.  # noqa: E501
        :type: str
        """

        self._invited_by_login = invited_by_login

    @property
    def invited_by_name(self):
        """Gets the invited_by_name of this TempUserDTO.  # noqa: E501


        :return: The invited_by_name of this TempUserDTO.  # noqa: E501
        :rtype: str
        """
        return self._invited_by_name

    @invited_by_name.setter
    def invited_by_name(self, invited_by_name):
        """Sets the invited_by_name of this TempUserDTO.


        :param invited_by_name: The invited_by_name of this TempUserDTO.  # noqa: E501
        :type: str
        """

        self._invited_by_name = invited_by_name

    @property
    def name(self):
        """Gets the name of this TempUserDTO.  # noqa: E501


        :return: The name of this TempUserDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TempUserDTO.


        :param name: The name of this TempUserDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this TempUserDTO.  # noqa: E501


        :return: The org_id of this TempUserDTO.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this TempUserDTO.


        :param org_id: The org_id of this TempUserDTO.  # noqa: E501
        :type: int
        """

        self._org_id = org_id

    @property
    def role(self):
        """Gets the role of this TempUserDTO.  # noqa: E501


        :return: The role of this TempUserDTO.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this TempUserDTO.


        :param role: The role of this TempUserDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["Viewer", "Editor", "Admin"]  # noqa: E501
        if (self._configuration.client_side_validation and
                role not in allowed_values):
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def status(self):
        """Gets the status of this TempUserDTO.  # noqa: E501


        :return: The status of this TempUserDTO.  # noqa: E501
        :rtype: TempUserStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TempUserDTO.


        :param status: The status of this TempUserDTO.  # noqa: E501
        :type: TempUserStatus
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this TempUserDTO.  # noqa: E501


        :return: The url of this TempUserDTO.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TempUserDTO.


        :param url: The url of this TempUserDTO.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TempUserDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TempUserDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TempUserDTO):
            return True

        return self.to_dict() != other.to_dict()
