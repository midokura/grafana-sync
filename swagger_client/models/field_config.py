# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FieldConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'dict(str, object)',
        'custom': 'dict(str, object)',
        'decimals': 'int',
        'description': 'str',
        'display_name': 'str',
        'display_name_from_ds': 'str',
        'filterable': 'bool',
        'interval': 'float',
        'links': 'list[DataLink]',
        'mappings': 'ValueMappings',
        'max': 'ConfFloat64',
        'min': 'ConfFloat64',
        'no_value': 'str',
        'path': 'str',
        'thresholds': 'ThresholdsConfig',
        'unit': 'str',
        'writeable': 'bool'
    }

    attribute_map = {
        'color': 'color',
        'custom': 'custom',
        'decimals': 'decimals',
        'description': 'description',
        'display_name': 'displayName',
        'display_name_from_ds': 'displayNameFromDS',
        'filterable': 'filterable',
        'interval': 'interval',
        'links': 'links',
        'mappings': 'mappings',
        'max': 'max',
        'min': 'min',
        'no_value': 'noValue',
        'path': 'path',
        'thresholds': 'thresholds',
        'unit': 'unit',
        'writeable': 'writeable'
    }

    def __init__(self, color=None, custom=None, decimals=None, description=None, display_name=None, display_name_from_ds=None, filterable=None, interval=None, links=None, mappings=None, max=None, min=None, no_value=None, path=None, thresholds=None, unit=None, writeable=None, _configuration=None):  # noqa: E501
        """FieldConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._color = None
        self._custom = None
        self._decimals = None
        self._description = None
        self._display_name = None
        self._display_name_from_ds = None
        self._filterable = None
        self._interval = None
        self._links = None
        self._mappings = None
        self._max = None
        self._min = None
        self._no_value = None
        self._path = None
        self._thresholds = None
        self._unit = None
        self._writeable = None
        self.discriminator = None

        if color is not None:
            self.color = color
        if custom is not None:
            self.custom = custom
        if decimals is not None:
            self.decimals = decimals
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if display_name_from_ds is not None:
            self.display_name_from_ds = display_name_from_ds
        if filterable is not None:
            self.filterable = filterable
        if interval is not None:
            self.interval = interval
        if links is not None:
            self.links = links
        if mappings is not None:
            self.mappings = mappings
        if max is not None:
            self.max = max
        if min is not None:
            self.min = min
        if no_value is not None:
            self.no_value = no_value
        if path is not None:
            self.path = path
        if thresholds is not None:
            self.thresholds = thresholds
        if unit is not None:
            self.unit = unit
        if writeable is not None:
            self.writeable = writeable

    @property
    def color(self):
        """Gets the color of this FieldConfig.  # noqa: E501

        Map values to a display color NOTE: this interface is under development in the frontend... so simple map for now  # noqa: E501

        :return: The color of this FieldConfig.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this FieldConfig.

        Map values to a display color NOTE: this interface is under development in the frontend... so simple map for now  # noqa: E501

        :param color: The color of this FieldConfig.  # noqa: E501
        :type: dict(str, object)
        """

        self._color = color

    @property
    def custom(self):
        """Gets the custom of this FieldConfig.  # noqa: E501

        Panel Specific Values  # noqa: E501

        :return: The custom of this FieldConfig.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this FieldConfig.

        Panel Specific Values  # noqa: E501

        :param custom: The custom of this FieldConfig.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom = custom

    @property
    def decimals(self):
        """Gets the decimals of this FieldConfig.  # noqa: E501


        :return: The decimals of this FieldConfig.  # noqa: E501
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this FieldConfig.


        :param decimals: The decimals of this FieldConfig.  # noqa: E501
        :type: int
        """

        self._decimals = decimals

    @property
    def description(self):
        """Gets the description of this FieldConfig.  # noqa: E501

        Description is human readable field metadata  # noqa: E501

        :return: The description of this FieldConfig.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FieldConfig.

        Description is human readable field metadata  # noqa: E501

        :param description: The description of this FieldConfig.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this FieldConfig.  # noqa: E501

        DisplayName overrides Grafana default naming, should not be used from a data source  # noqa: E501

        :return: The display_name of this FieldConfig.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FieldConfig.

        DisplayName overrides Grafana default naming, should not be used from a data source  # noqa: E501

        :param display_name: The display_name of this FieldConfig.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def display_name_from_ds(self):
        """Gets the display_name_from_ds of this FieldConfig.  # noqa: E501

        DisplayNameFromDS overrides Grafana default naming in a better way that allows users to override it easily.  # noqa: E501

        :return: The display_name_from_ds of this FieldConfig.  # noqa: E501
        :rtype: str
        """
        return self._display_name_from_ds

    @display_name_from_ds.setter
    def display_name_from_ds(self, display_name_from_ds):
        """Sets the display_name_from_ds of this FieldConfig.

        DisplayNameFromDS overrides Grafana default naming in a better way that allows users to override it easily.  # noqa: E501

        :param display_name_from_ds: The display_name_from_ds of this FieldConfig.  # noqa: E501
        :type: str
        """

        self._display_name_from_ds = display_name_from_ds

    @property
    def filterable(self):
        """Gets the filterable of this FieldConfig.  # noqa: E501

        Filterable indicates if the Field's data can be filtered by additional calls.  # noqa: E501

        :return: The filterable of this FieldConfig.  # noqa: E501
        :rtype: bool
        """
        return self._filterable

    @filterable.setter
    def filterable(self, filterable):
        """Sets the filterable of this FieldConfig.

        Filterable indicates if the Field's data can be filtered by additional calls.  # noqa: E501

        :param filterable: The filterable of this FieldConfig.  # noqa: E501
        :type: bool
        """

        self._filterable = filterable

    @property
    def interval(self):
        """Gets the interval of this FieldConfig.  # noqa: E501

        Interval indicates the expected regular step between values in the series. When an interval exists, consumers can identify \"missing\" values when the expected value is not present. The grafana timeseries visualization will render disconnected values when missing values are found it the time field. The interval uses the same units as the values.  For time.Time, this is defined in milliseconds.  # noqa: E501

        :return: The interval of this FieldConfig.  # noqa: E501
        :rtype: float
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this FieldConfig.

        Interval indicates the expected regular step between values in the series. When an interval exists, consumers can identify \"missing\" values when the expected value is not present. The grafana timeseries visualization will render disconnected values when missing values are found it the time field. The interval uses the same units as the values.  For time.Time, this is defined in milliseconds.  # noqa: E501

        :param interval: The interval of this FieldConfig.  # noqa: E501
        :type: float
        """

        self._interval = interval

    @property
    def links(self):
        """Gets the links of this FieldConfig.  # noqa: E501

        The behavior when clicking on a result  # noqa: E501

        :return: The links of this FieldConfig.  # noqa: E501
        :rtype: list[DataLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FieldConfig.

        The behavior when clicking on a result  # noqa: E501

        :param links: The links of this FieldConfig.  # noqa: E501
        :type: list[DataLink]
        """

        self._links = links

    @property
    def mappings(self):
        """Gets the mappings of this FieldConfig.  # noqa: E501


        :return: The mappings of this FieldConfig.  # noqa: E501
        :rtype: ValueMappings
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """Sets the mappings of this FieldConfig.


        :param mappings: The mappings of this FieldConfig.  # noqa: E501
        :type: ValueMappings
        """

        self._mappings = mappings

    @property
    def max(self):
        """Gets the max of this FieldConfig.  # noqa: E501


        :return: The max of this FieldConfig.  # noqa: E501
        :rtype: ConfFloat64
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this FieldConfig.


        :param max: The max of this FieldConfig.  # noqa: E501
        :type: ConfFloat64
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this FieldConfig.  # noqa: E501


        :return: The min of this FieldConfig.  # noqa: E501
        :rtype: ConfFloat64
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this FieldConfig.


        :param min: The min of this FieldConfig.  # noqa: E501
        :type: ConfFloat64
        """

        self._min = min

    @property
    def no_value(self):
        """Gets the no_value of this FieldConfig.  # noqa: E501

        Alternative to empty string  # noqa: E501

        :return: The no_value of this FieldConfig.  # noqa: E501
        :rtype: str
        """
        return self._no_value

    @no_value.setter
    def no_value(self, no_value):
        """Sets the no_value of this FieldConfig.

        Alternative to empty string  # noqa: E501

        :param no_value: The no_value of this FieldConfig.  # noqa: E501
        :type: str
        """

        self._no_value = no_value

    @property
    def path(self):
        """Gets the path of this FieldConfig.  # noqa: E501

        Path is an explicit path to the field in the datasource. When the frame meta includes a path, this will default to `${frame.meta.path}/${field.name}  When defined, this value can be used as an identifier within the datasource scope, and may be used as an identifier to update values in a subsequent request  # noqa: E501

        :return: The path of this FieldConfig.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FieldConfig.

        Path is an explicit path to the field in the datasource. When the frame meta includes a path, this will default to `${frame.meta.path}/${field.name}  When defined, this value can be used as an identifier within the datasource scope, and may be used as an identifier to update values in a subsequent request  # noqa: E501

        :param path: The path of this FieldConfig.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def thresholds(self):
        """Gets the thresholds of this FieldConfig.  # noqa: E501


        :return: The thresholds of this FieldConfig.  # noqa: E501
        :rtype: ThresholdsConfig
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """Sets the thresholds of this FieldConfig.


        :param thresholds: The thresholds of this FieldConfig.  # noqa: E501
        :type: ThresholdsConfig
        """

        self._thresholds = thresholds

    @property
    def unit(self):
        """Gets the unit of this FieldConfig.  # noqa: E501

        Numeric Options  # noqa: E501

        :return: The unit of this FieldConfig.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this FieldConfig.

        Numeric Options  # noqa: E501

        :param unit: The unit of this FieldConfig.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def writeable(self):
        """Gets the writeable of this FieldConfig.  # noqa: E501

        Writeable indicates that the datasource knows how to update this value  # noqa: E501

        :return: The writeable of this FieldConfig.  # noqa: E501
        :rtype: bool
        """
        return self._writeable

    @writeable.setter
    def writeable(self, writeable):
        """Sets the writeable of this FieldConfig.

        Writeable indicates that the datasource knows how to update this value  # noqa: E501

        :param writeable: The writeable of this FieldConfig.  # noqa: E501
        :type: bool
        """

        self._writeable = writeable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FieldConfig):
            return True

        return self.to_dict() != other.to_dict()
