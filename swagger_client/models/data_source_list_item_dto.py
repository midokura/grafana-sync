# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DataSourceListItemDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access': 'DsAccess',
        'basic_auth': 'bool',
        'database': 'str',
        'id': 'int',
        'is_default': 'bool',
        'json_data': 'Json',
        'name': 'str',
        'org_id': 'int',
        'read_only': 'bool',
        'type': 'str',
        'type_logo_url': 'str',
        'type_name': 'str',
        'uid': 'str',
        'url': 'str',
        'user': 'str'
    }

    attribute_map = {
        'access': 'access',
        'basic_auth': 'basicAuth',
        'database': 'database',
        'id': 'id',
        'is_default': 'isDefault',
        'json_data': 'jsonData',
        'name': 'name',
        'org_id': 'orgId',
        'read_only': 'readOnly',
        'type': 'type',
        'type_logo_url': 'typeLogoUrl',
        'type_name': 'typeName',
        'uid': 'uid',
        'url': 'url',
        'user': 'user'
    }

    def __init__(self, access=None, basic_auth=None, database=None, id=None, is_default=None, json_data=None, name=None, org_id=None, read_only=None, type=None, type_logo_url=None, type_name=None, uid=None, url=None, user=None, _configuration=None):  # noqa: E501
        """DataSourceListItemDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access = None
        self._basic_auth = None
        self._database = None
        self._id = None
        self._is_default = None
        self._json_data = None
        self._name = None
        self._org_id = None
        self._read_only = None
        self._type = None
        self._type_logo_url = None
        self._type_name = None
        self._uid = None
        self._url = None
        self._user = None
        self.discriminator = None

        if access is not None:
            self.access = access
        if basic_auth is not None:
            self.basic_auth = basic_auth
        if database is not None:
            self.database = database
        if id is not None:
            self.id = id
        if is_default is not None:
            self.is_default = is_default
        if json_data is not None:
            self.json_data = json_data
        if name is not None:
            self.name = name
        if org_id is not None:
            self.org_id = org_id
        if read_only is not None:
            self.read_only = read_only
        if type is not None:
            self.type = type
        if type_logo_url is not None:
            self.type_logo_url = type_logo_url
        if type_name is not None:
            self.type_name = type_name
        if uid is not None:
            self.uid = uid
        if url is not None:
            self.url = url
        if user is not None:
            self.user = user

    @property
    def access(self):
        """Gets the access of this DataSourceListItemDTO.  # noqa: E501


        :return: The access of this DataSourceListItemDTO.  # noqa: E501
        :rtype: DsAccess
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this DataSourceListItemDTO.


        :param access: The access of this DataSourceListItemDTO.  # noqa: E501
        :type: DsAccess
        """

        self._access = access

    @property
    def basic_auth(self):
        """Gets the basic_auth of this DataSourceListItemDTO.  # noqa: E501


        :return: The basic_auth of this DataSourceListItemDTO.  # noqa: E501
        :rtype: bool
        """
        return self._basic_auth

    @basic_auth.setter
    def basic_auth(self, basic_auth):
        """Sets the basic_auth of this DataSourceListItemDTO.


        :param basic_auth: The basic_auth of this DataSourceListItemDTO.  # noqa: E501
        :type: bool
        """

        self._basic_auth = basic_auth

    @property
    def database(self):
        """Gets the database of this DataSourceListItemDTO.  # noqa: E501


        :return: The database of this DataSourceListItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this DataSourceListItemDTO.


        :param database: The database of this DataSourceListItemDTO.  # noqa: E501
        :type: str
        """

        self._database = database

    @property
    def id(self):
        """Gets the id of this DataSourceListItemDTO.  # noqa: E501


        :return: The id of this DataSourceListItemDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataSourceListItemDTO.


        :param id: The id of this DataSourceListItemDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this DataSourceListItemDTO.  # noqa: E501


        :return: The is_default of this DataSourceListItemDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this DataSourceListItemDTO.


        :param is_default: The is_default of this DataSourceListItemDTO.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def json_data(self):
        """Gets the json_data of this DataSourceListItemDTO.  # noqa: E501


        :return: The json_data of this DataSourceListItemDTO.  # noqa: E501
        :rtype: Json
        """
        return self._json_data

    @json_data.setter
    def json_data(self, json_data):
        """Sets the json_data of this DataSourceListItemDTO.


        :param json_data: The json_data of this DataSourceListItemDTO.  # noqa: E501
        :type: Json
        """

        self._json_data = json_data

    @property
    def name(self):
        """Gets the name of this DataSourceListItemDTO.  # noqa: E501


        :return: The name of this DataSourceListItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataSourceListItemDTO.


        :param name: The name of this DataSourceListItemDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this DataSourceListItemDTO.  # noqa: E501


        :return: The org_id of this DataSourceListItemDTO.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this DataSourceListItemDTO.


        :param org_id: The org_id of this DataSourceListItemDTO.  # noqa: E501
        :type: int
        """

        self._org_id = org_id

    @property
    def read_only(self):
        """Gets the read_only of this DataSourceListItemDTO.  # noqa: E501


        :return: The read_only of this DataSourceListItemDTO.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this DataSourceListItemDTO.


        :param read_only: The read_only of this DataSourceListItemDTO.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def type(self):
        """Gets the type of this DataSourceListItemDTO.  # noqa: E501


        :return: The type of this DataSourceListItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataSourceListItemDTO.


        :param type: The type of this DataSourceListItemDTO.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def type_logo_url(self):
        """Gets the type_logo_url of this DataSourceListItemDTO.  # noqa: E501


        :return: The type_logo_url of this DataSourceListItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._type_logo_url

    @type_logo_url.setter
    def type_logo_url(self, type_logo_url):
        """Sets the type_logo_url of this DataSourceListItemDTO.


        :param type_logo_url: The type_logo_url of this DataSourceListItemDTO.  # noqa: E501
        :type: str
        """

        self._type_logo_url = type_logo_url

    @property
    def type_name(self):
        """Gets the type_name of this DataSourceListItemDTO.  # noqa: E501


        :return: The type_name of this DataSourceListItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this DataSourceListItemDTO.


        :param type_name: The type_name of this DataSourceListItemDTO.  # noqa: E501
        :type: str
        """

        self._type_name = type_name

    @property
    def uid(self):
        """Gets the uid of this DataSourceListItemDTO.  # noqa: E501


        :return: The uid of this DataSourceListItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this DataSourceListItemDTO.


        :param uid: The uid of this DataSourceListItemDTO.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def url(self):
        """Gets the url of this DataSourceListItemDTO.  # noqa: E501


        :return: The url of this DataSourceListItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DataSourceListItemDTO.


        :param url: The url of this DataSourceListItemDTO.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def user(self):
        """Gets the user of this DataSourceListItemDTO.  # noqa: E501


        :return: The user of this DataSourceListItemDTO.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DataSourceListItemDTO.


        :param user: The user of this DataSourceListItemDTO.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataSourceListItemDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSourceListItemDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataSourceListItemDTO):
            return True

        return self.to_dict() != other.to_dict()
