# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Hit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'folder_id': 'int',
        'folder_title': 'str',
        'folder_uid': 'str',
        'folder_url': 'str',
        'id': 'int',
        'is_starred': 'bool',
        'slug': 'str',
        'sort_meta': 'int',
        'sort_meta_name': 'str',
        'tags': 'list[str]',
        'title': 'str',
        'type': 'HitType',
        'uid': 'str',
        'uri': 'str',
        'url': 'str'
    }

    attribute_map = {
        'folder_id': 'folderId',
        'folder_title': 'folderTitle',
        'folder_uid': 'folderUid',
        'folder_url': 'folderUrl',
        'id': 'id',
        'is_starred': 'isStarred',
        'slug': 'slug',
        'sort_meta': 'sortMeta',
        'sort_meta_name': 'sortMetaName',
        'tags': 'tags',
        'title': 'title',
        'type': 'type',
        'uid': 'uid',
        'uri': 'uri',
        'url': 'url'
    }

    def __init__(self, folder_id=None, folder_title=None, folder_uid=None, folder_url=None, id=None, is_starred=None, slug=None, sort_meta=None, sort_meta_name=None, tags=None, title=None, type=None, uid=None, uri=None, url=None, _configuration=None):  # noqa: E501
        """Hit - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._folder_id = None
        self._folder_title = None
        self._folder_uid = None
        self._folder_url = None
        self._id = None
        self._is_starred = None
        self._slug = None
        self._sort_meta = None
        self._sort_meta_name = None
        self._tags = None
        self._title = None
        self._type = None
        self._uid = None
        self._uri = None
        self._url = None
        self.discriminator = None

        if folder_id is not None:
            self.folder_id = folder_id
        if folder_title is not None:
            self.folder_title = folder_title
        if folder_uid is not None:
            self.folder_uid = folder_uid
        if folder_url is not None:
            self.folder_url = folder_url
        if id is not None:
            self.id = id
        if is_starred is not None:
            self.is_starred = is_starred
        if slug is not None:
            self.slug = slug
        if sort_meta is not None:
            self.sort_meta = sort_meta
        if sort_meta_name is not None:
            self.sort_meta_name = sort_meta_name
        if tags is not None:
            self.tags = tags
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if uid is not None:
            self.uid = uid
        if uri is not None:
            self.uri = uri
        if url is not None:
            self.url = url

    @property
    def folder_id(self):
        """Gets the folder_id of this Hit.  # noqa: E501


        :return: The folder_id of this Hit.  # noqa: E501
        :rtype: int
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this Hit.


        :param folder_id: The folder_id of this Hit.  # noqa: E501
        :type: int
        """

        self._folder_id = folder_id

    @property
    def folder_title(self):
        """Gets the folder_title of this Hit.  # noqa: E501


        :return: The folder_title of this Hit.  # noqa: E501
        :rtype: str
        """
        return self._folder_title

    @folder_title.setter
    def folder_title(self, folder_title):
        """Sets the folder_title of this Hit.


        :param folder_title: The folder_title of this Hit.  # noqa: E501
        :type: str
        """

        self._folder_title = folder_title

    @property
    def folder_uid(self):
        """Gets the folder_uid of this Hit.  # noqa: E501


        :return: The folder_uid of this Hit.  # noqa: E501
        :rtype: str
        """
        return self._folder_uid

    @folder_uid.setter
    def folder_uid(self, folder_uid):
        """Sets the folder_uid of this Hit.


        :param folder_uid: The folder_uid of this Hit.  # noqa: E501
        :type: str
        """

        self._folder_uid = folder_uid

    @property
    def folder_url(self):
        """Gets the folder_url of this Hit.  # noqa: E501


        :return: The folder_url of this Hit.  # noqa: E501
        :rtype: str
        """
        return self._folder_url

    @folder_url.setter
    def folder_url(self, folder_url):
        """Sets the folder_url of this Hit.


        :param folder_url: The folder_url of this Hit.  # noqa: E501
        :type: str
        """

        self._folder_url = folder_url

    @property
    def id(self):
        """Gets the id of this Hit.  # noqa: E501


        :return: The id of this Hit.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Hit.


        :param id: The id of this Hit.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_starred(self):
        """Gets the is_starred of this Hit.  # noqa: E501


        :return: The is_starred of this Hit.  # noqa: E501
        :rtype: bool
        """
        return self._is_starred

    @is_starred.setter
    def is_starred(self, is_starred):
        """Sets the is_starred of this Hit.


        :param is_starred: The is_starred of this Hit.  # noqa: E501
        :type: bool
        """

        self._is_starred = is_starred

    @property
    def slug(self):
        """Gets the slug of this Hit.  # noqa: E501


        :return: The slug of this Hit.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Hit.


        :param slug: The slug of this Hit.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def sort_meta(self):
        """Gets the sort_meta of this Hit.  # noqa: E501


        :return: The sort_meta of this Hit.  # noqa: E501
        :rtype: int
        """
        return self._sort_meta

    @sort_meta.setter
    def sort_meta(self, sort_meta):
        """Sets the sort_meta of this Hit.


        :param sort_meta: The sort_meta of this Hit.  # noqa: E501
        :type: int
        """

        self._sort_meta = sort_meta

    @property
    def sort_meta_name(self):
        """Gets the sort_meta_name of this Hit.  # noqa: E501


        :return: The sort_meta_name of this Hit.  # noqa: E501
        :rtype: str
        """
        return self._sort_meta_name

    @sort_meta_name.setter
    def sort_meta_name(self, sort_meta_name):
        """Sets the sort_meta_name of this Hit.


        :param sort_meta_name: The sort_meta_name of this Hit.  # noqa: E501
        :type: str
        """

        self._sort_meta_name = sort_meta_name

    @property
    def tags(self):
        """Gets the tags of this Hit.  # noqa: E501


        :return: The tags of this Hit.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Hit.


        :param tags: The tags of this Hit.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this Hit.  # noqa: E501


        :return: The title of this Hit.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Hit.


        :param title: The title of this Hit.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Hit.  # noqa: E501


        :return: The type of this Hit.  # noqa: E501
        :rtype: HitType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Hit.


        :param type: The type of this Hit.  # noqa: E501
        :type: HitType
        """

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this Hit.  # noqa: E501


        :return: The uid of this Hit.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Hit.


        :param uid: The uid of this Hit.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def uri(self):
        """Gets the uri of this Hit.  # noqa: E501


        :return: The uri of this Hit.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Hit.


        :param uri: The uri of this Hit.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def url(self):
        """Gets the url of this Hit.  # noqa: E501


        :return: The url of this Hit.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Hit.


        :param url: The url of this Hit.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Hit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Hit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Hit):
            return True

        return self.to_dict() != other.to_dict()
