# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class HTTPClientConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorization': 'Authorization',
        'basic_auth': 'BasicAuth',
        'bearer_token': 'Secret',
        'bearer_token_file': 'str',
        'follow_redirects': 'bool',
        'oauth2': 'OAuth2',
        'proxy_url': 'URL',
        'tls_config': 'TLSConfig'
    }

    attribute_map = {
        'authorization': 'authorization',
        'basic_auth': 'basic_auth',
        'bearer_token': 'bearer_token',
        'bearer_token_file': 'bearer_token_file',
        'follow_redirects': 'follow_redirects',
        'oauth2': 'oauth2',
        'proxy_url': 'proxy_url',
        'tls_config': 'tls_config'
    }

    def __init__(self, authorization=None, basic_auth=None, bearer_token=None, bearer_token_file=None, follow_redirects=None, oauth2=None, proxy_url=None, tls_config=None, _configuration=None):  # noqa: E501
        """HTTPClientConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._authorization = None
        self._basic_auth = None
        self._bearer_token = None
        self._bearer_token_file = None
        self._follow_redirects = None
        self._oauth2 = None
        self._proxy_url = None
        self._tls_config = None
        self.discriminator = None

        if authorization is not None:
            self.authorization = authorization
        if basic_auth is not None:
            self.basic_auth = basic_auth
        if bearer_token is not None:
            self.bearer_token = bearer_token
        if bearer_token_file is not None:
            self.bearer_token_file = bearer_token_file
        if follow_redirects is not None:
            self.follow_redirects = follow_redirects
        if oauth2 is not None:
            self.oauth2 = oauth2
        if proxy_url is not None:
            self.proxy_url = proxy_url
        if tls_config is not None:
            self.tls_config = tls_config

    @property
    def authorization(self):
        """Gets the authorization of this HTTPClientConfig.  # noqa: E501


        :return: The authorization of this HTTPClientConfig.  # noqa: E501
        :rtype: Authorization
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this HTTPClientConfig.


        :param authorization: The authorization of this HTTPClientConfig.  # noqa: E501
        :type: Authorization
        """

        self._authorization = authorization

    @property
    def basic_auth(self):
        """Gets the basic_auth of this HTTPClientConfig.  # noqa: E501


        :return: The basic_auth of this HTTPClientConfig.  # noqa: E501
        :rtype: BasicAuth
        """
        return self._basic_auth

    @basic_auth.setter
    def basic_auth(self, basic_auth):
        """Sets the basic_auth of this HTTPClientConfig.


        :param basic_auth: The basic_auth of this HTTPClientConfig.  # noqa: E501
        :type: BasicAuth
        """

        self._basic_auth = basic_auth

    @property
    def bearer_token(self):
        """Gets the bearer_token of this HTTPClientConfig.  # noqa: E501


        :return: The bearer_token of this HTTPClientConfig.  # noqa: E501
        :rtype: Secret
        """
        return self._bearer_token

    @bearer_token.setter
    def bearer_token(self, bearer_token):
        """Sets the bearer_token of this HTTPClientConfig.


        :param bearer_token: The bearer_token of this HTTPClientConfig.  # noqa: E501
        :type: Secret
        """

        self._bearer_token = bearer_token

    @property
    def bearer_token_file(self):
        """Gets the bearer_token_file of this HTTPClientConfig.  # noqa: E501

        The bearer token file for the targets. Deprecated in favour of Authorization.CredentialsFile.  # noqa: E501

        :return: The bearer_token_file of this HTTPClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._bearer_token_file

    @bearer_token_file.setter
    def bearer_token_file(self, bearer_token_file):
        """Sets the bearer_token_file of this HTTPClientConfig.

        The bearer token file for the targets. Deprecated in favour of Authorization.CredentialsFile.  # noqa: E501

        :param bearer_token_file: The bearer_token_file of this HTTPClientConfig.  # noqa: E501
        :type: str
        """

        self._bearer_token_file = bearer_token_file

    @property
    def follow_redirects(self):
        """Gets the follow_redirects of this HTTPClientConfig.  # noqa: E501

        FollowRedirects specifies whether the client should follow HTTP 3xx redirects. The omitempty flag is not set, because it would be hidden from the marshalled configuration when set to false.  # noqa: E501

        :return: The follow_redirects of this HTTPClientConfig.  # noqa: E501
        :rtype: bool
        """
        return self._follow_redirects

    @follow_redirects.setter
    def follow_redirects(self, follow_redirects):
        """Sets the follow_redirects of this HTTPClientConfig.

        FollowRedirects specifies whether the client should follow HTTP 3xx redirects. The omitempty flag is not set, because it would be hidden from the marshalled configuration when set to false.  # noqa: E501

        :param follow_redirects: The follow_redirects of this HTTPClientConfig.  # noqa: E501
        :type: bool
        """

        self._follow_redirects = follow_redirects

    @property
    def oauth2(self):
        """Gets the oauth2 of this HTTPClientConfig.  # noqa: E501


        :return: The oauth2 of this HTTPClientConfig.  # noqa: E501
        :rtype: OAuth2
        """
        return self._oauth2

    @oauth2.setter
    def oauth2(self, oauth2):
        """Sets the oauth2 of this HTTPClientConfig.


        :param oauth2: The oauth2 of this HTTPClientConfig.  # noqa: E501
        :type: OAuth2
        """

        self._oauth2 = oauth2

    @property
    def proxy_url(self):
        """Gets the proxy_url of this HTTPClientConfig.  # noqa: E501


        :return: The proxy_url of this HTTPClientConfig.  # noqa: E501
        :rtype: URL
        """
        return self._proxy_url

    @proxy_url.setter
    def proxy_url(self, proxy_url):
        """Sets the proxy_url of this HTTPClientConfig.


        :param proxy_url: The proxy_url of this HTTPClientConfig.  # noqa: E501
        :type: URL
        """

        self._proxy_url = proxy_url

    @property
    def tls_config(self):
        """Gets the tls_config of this HTTPClientConfig.  # noqa: E501


        :return: The tls_config of this HTTPClientConfig.  # noqa: E501
        :rtype: TLSConfig
        """
        return self._tls_config

    @tls_config.setter
    def tls_config(self, tls_config):
        """Sets the tls_config of this HTTPClientConfig.


        :param tls_config: The tls_config of this HTTPClientConfig.  # noqa: E501
        :type: TLSConfig
        """

        self._tls_config = tls_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HTTPClientConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HTTPClientConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HTTPClientConfig):
            return True

        return self.to_dict() != other.to_dict()
