# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Frame(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fields': 'list[Field]',
        'meta': 'FrameMeta',
        'name': 'str',
        'ref_id': 'str'
    }

    attribute_map = {
        'fields': 'Fields',
        'meta': 'Meta',
        'name': 'Name',
        'ref_id': 'RefID'
    }

    def __init__(self, fields=None, meta=None, name=None, ref_id=None, _configuration=None):  # noqa: E501
        """Frame - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fields = None
        self._meta = None
        self._name = None
        self._ref_id = None
        self.discriminator = None

        if fields is not None:
            self.fields = fields
        if meta is not None:
            self.meta = meta
        if name is not None:
            self.name = name
        if ref_id is not None:
            self.ref_id = ref_id

    @property
    def fields(self):
        """Gets the fields of this Frame.  # noqa: E501

        Fields are the columns of a frame. All Fields must be of the same the length when marshalling the Frame for transmission.  # noqa: E501

        :return: The fields of this Frame.  # noqa: E501
        :rtype: list[Field]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Frame.

        Fields are the columns of a frame. All Fields must be of the same the length when marshalling the Frame for transmission.  # noqa: E501

        :param fields: The fields of this Frame.  # noqa: E501
        :type: list[Field]
        """

        self._fields = fields

    @property
    def meta(self):
        """Gets the meta of this Frame.  # noqa: E501


        :return: The meta of this Frame.  # noqa: E501
        :rtype: FrameMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Frame.


        :param meta: The meta of this Frame.  # noqa: E501
        :type: FrameMeta
        """

        self._meta = meta

    @property
    def name(self):
        """Gets the name of this Frame.  # noqa: E501

        Name is used in some Grafana visualizations.  # noqa: E501

        :return: The name of this Frame.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Frame.

        Name is used in some Grafana visualizations.  # noqa: E501

        :param name: The name of this Frame.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ref_id(self):
        """Gets the ref_id of this Frame.  # noqa: E501

        RefID is a property that can be set to match a Frame to its originating query.  # noqa: E501

        :return: The ref_id of this Frame.  # noqa: E501
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this Frame.

        RefID is a property that can be set to match a Frame to its originating query.  # noqa: E501

        :param ref_id: The ref_id of this Frame.  # noqa: E501
        :type: str
        """

        self._ref_id = ref_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Frame, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Frame):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Frame):
            return True

        return self.to_dict() != other.to_dict()
