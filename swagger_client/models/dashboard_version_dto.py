# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DashboardVersionDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'created_by': 'str',
        'dashboard_id': 'int',
        'dashboard_uid': 'str',
        'id': 'int',
        'message': 'str',
        'parent_version': 'int',
        'restored_from': 'int',
        'version': 'int'
    }

    attribute_map = {
        'created': 'created',
        'created_by': 'createdBy',
        'dashboard_id': 'dashboardId',
        'dashboard_uid': 'dashboardUid',
        'id': 'id',
        'message': 'message',
        'parent_version': 'parentVersion',
        'restored_from': 'restoredFrom',
        'version': 'version'
    }

    def __init__(self, created=None, created_by=None, dashboard_id=None, dashboard_uid=None, id=None, message=None, parent_version=None, restored_from=None, version=None, _configuration=None):  # noqa: E501
        """DashboardVersionDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created = None
        self._created_by = None
        self._dashboard_id = None
        self._dashboard_uid = None
        self._id = None
        self._message = None
        self._parent_version = None
        self._restored_from = None
        self._version = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if created_by is not None:
            self.created_by = created_by
        if dashboard_id is not None:
            self.dashboard_id = dashboard_id
        if dashboard_uid is not None:
            self.dashboard_uid = dashboard_uid
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if parent_version is not None:
            self.parent_version = parent_version
        if restored_from is not None:
            self.restored_from = restored_from
        if version is not None:
            self.version = version

    @property
    def created(self):
        """Gets the created of this DashboardVersionDTO.  # noqa: E501


        :return: The created of this DashboardVersionDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DashboardVersionDTO.


        :param created: The created of this DashboardVersionDTO.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this DashboardVersionDTO.  # noqa: E501


        :return: The created_by of this DashboardVersionDTO.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DashboardVersionDTO.


        :param created_by: The created_by of this DashboardVersionDTO.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this DashboardVersionDTO.  # noqa: E501


        :return: The dashboard_id of this DashboardVersionDTO.  # noqa: E501
        :rtype: int
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this DashboardVersionDTO.


        :param dashboard_id: The dashboard_id of this DashboardVersionDTO.  # noqa: E501
        :type: int
        """

        self._dashboard_id = dashboard_id

    @property
    def dashboard_uid(self):
        """Gets the dashboard_uid of this DashboardVersionDTO.  # noqa: E501


        :return: The dashboard_uid of this DashboardVersionDTO.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_uid

    @dashboard_uid.setter
    def dashboard_uid(self, dashboard_uid):
        """Sets the dashboard_uid of this DashboardVersionDTO.


        :param dashboard_uid: The dashboard_uid of this DashboardVersionDTO.  # noqa: E501
        :type: str
        """

        self._dashboard_uid = dashboard_uid

    @property
    def id(self):
        """Gets the id of this DashboardVersionDTO.  # noqa: E501


        :return: The id of this DashboardVersionDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardVersionDTO.


        :param id: The id of this DashboardVersionDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this DashboardVersionDTO.  # noqa: E501


        :return: The message of this DashboardVersionDTO.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DashboardVersionDTO.


        :param message: The message of this DashboardVersionDTO.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def parent_version(self):
        """Gets the parent_version of this DashboardVersionDTO.  # noqa: E501


        :return: The parent_version of this DashboardVersionDTO.  # noqa: E501
        :rtype: int
        """
        return self._parent_version

    @parent_version.setter
    def parent_version(self, parent_version):
        """Sets the parent_version of this DashboardVersionDTO.


        :param parent_version: The parent_version of this DashboardVersionDTO.  # noqa: E501
        :type: int
        """

        self._parent_version = parent_version

    @property
    def restored_from(self):
        """Gets the restored_from of this DashboardVersionDTO.  # noqa: E501


        :return: The restored_from of this DashboardVersionDTO.  # noqa: E501
        :rtype: int
        """
        return self._restored_from

    @restored_from.setter
    def restored_from(self, restored_from):
        """Sets the restored_from of this DashboardVersionDTO.


        :param restored_from: The restored_from of this DashboardVersionDTO.  # noqa: E501
        :type: int
        """

        self._restored_from = restored_from

    @property
    def version(self):
        """Gets the version of this DashboardVersionDTO.  # noqa: E501


        :return: The version of this DashboardVersionDTO.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DashboardVersionDTO.


        :param version: The version of this DashboardVersionDTO.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardVersionDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardVersionDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardVersionDTO):
            return True

        return self.to_dict() != other.to_dict()
