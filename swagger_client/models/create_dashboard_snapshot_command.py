# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CreateDashboardSnapshotCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result': 'DashboardSnapshot',
        'dashboard': 'Json',
        'delete_key': 'str',
        'expires': 'int',
        'external': 'bool',
        'key': 'str',
        'name': 'str'
    }

    attribute_map = {
        'result': 'Result',
        'dashboard': 'dashboard',
        'delete_key': 'deleteKey',
        'expires': 'expires',
        'external': 'external',
        'key': 'key',
        'name': 'name'
    }

    def __init__(self, result=None, dashboard=None, delete_key=None, expires=0, external=False, key=None, name=None, _configuration=None):  # noqa: E501
        """CreateDashboardSnapshotCommand - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._result = None
        self._dashboard = None
        self._delete_key = None
        self._expires = None
        self._external = None
        self._key = None
        self._name = None
        self.discriminator = None

        if result is not None:
            self.result = result
        self.dashboard = dashboard
        if delete_key is not None:
            self.delete_key = delete_key
        if expires is not None:
            self.expires = expires
        if external is not None:
            self.external = external
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name

    @property
    def result(self):
        """Gets the result of this CreateDashboardSnapshotCommand.  # noqa: E501


        :return: The result of this CreateDashboardSnapshotCommand.  # noqa: E501
        :rtype: DashboardSnapshot
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this CreateDashboardSnapshotCommand.


        :param result: The result of this CreateDashboardSnapshotCommand.  # noqa: E501
        :type: DashboardSnapshot
        """

        self._result = result

    @property
    def dashboard(self):
        """Gets the dashboard of this CreateDashboardSnapshotCommand.  # noqa: E501


        :return: The dashboard of this CreateDashboardSnapshotCommand.  # noqa: E501
        :rtype: Json
        """
        return self._dashboard

    @dashboard.setter
    def dashboard(self, dashboard):
        """Sets the dashboard of this CreateDashboardSnapshotCommand.


        :param dashboard: The dashboard of this CreateDashboardSnapshotCommand.  # noqa: E501
        :type: Json
        """
        if self._configuration.client_side_validation and dashboard is None:
            raise ValueError("Invalid value for `dashboard`, must not be `None`")  # noqa: E501

        self._dashboard = dashboard

    @property
    def delete_key(self):
        """Gets the delete_key of this CreateDashboardSnapshotCommand.  # noqa: E501

        Unique key used to delete the snapshot. It is different from the `key` so that only the creator can delete the snapshot. Required if `external` is `true`.  # noqa: E501

        :return: The delete_key of this CreateDashboardSnapshotCommand.  # noqa: E501
        :rtype: str
        """
        return self._delete_key

    @delete_key.setter
    def delete_key(self, delete_key):
        """Sets the delete_key of this CreateDashboardSnapshotCommand.

        Unique key used to delete the snapshot. It is different from the `key` so that only the creator can delete the snapshot. Required if `external` is `true`.  # noqa: E501

        :param delete_key: The delete_key of this CreateDashboardSnapshotCommand.  # noqa: E501
        :type: str
        """

        self._delete_key = delete_key

    @property
    def expires(self):
        """Gets the expires of this CreateDashboardSnapshotCommand.  # noqa: E501

        When the snapshot should expire in seconds in seconds. Default is never to expire.  # noqa: E501

        :return: The expires of this CreateDashboardSnapshotCommand.  # noqa: E501
        :rtype: int
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this CreateDashboardSnapshotCommand.

        When the snapshot should expire in seconds in seconds. Default is never to expire.  # noqa: E501

        :param expires: The expires of this CreateDashboardSnapshotCommand.  # noqa: E501
        :type: int
        """

        self._expires = expires

    @property
    def external(self):
        """Gets the external of this CreateDashboardSnapshotCommand.  # noqa: E501

        these are passed when storing an external snapshot ref Save the snapshot on an external server rather than locally.  # noqa: E501

        :return: The external of this CreateDashboardSnapshotCommand.  # noqa: E501
        :rtype: bool
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this CreateDashboardSnapshotCommand.

        these are passed when storing an external snapshot ref Save the snapshot on an external server rather than locally.  # noqa: E501

        :param external: The external of this CreateDashboardSnapshotCommand.  # noqa: E501
        :type: bool
        """

        self._external = external

    @property
    def key(self):
        """Gets the key of this CreateDashboardSnapshotCommand.  # noqa: E501

        Define the unique key. Required if `external` is `true`.  # noqa: E501

        :return: The key of this CreateDashboardSnapshotCommand.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CreateDashboardSnapshotCommand.

        Define the unique key. Required if `external` is `true`.  # noqa: E501

        :param key: The key of this CreateDashboardSnapshotCommand.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this CreateDashboardSnapshotCommand.  # noqa: E501

        Snapshot name  # noqa: E501

        :return: The name of this CreateDashboardSnapshotCommand.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateDashboardSnapshotCommand.

        Snapshot name  # noqa: E501

        :param name: The name of this CreateDashboardSnapshotCommand.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateDashboardSnapshotCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDashboardSnapshotCommand):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateDashboardSnapshotCommand):
            return True

        return self.to_dict() != other.to_dict()
