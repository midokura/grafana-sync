# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Matcher(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_equal': 'bool',
        'is_regex': 'bool',
        'name': 'str',
        'value': 'str'
    }

    attribute_map = {
        'is_equal': 'isEqual',
        'is_regex': 'isRegex',
        'name': 'name',
        'value': 'value'
    }

    def __init__(self, is_equal=None, is_regex=None, name=None, value=None, _configuration=None):  # noqa: E501
        """Matcher - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_equal = None
        self._is_regex = None
        self._name = None
        self._value = None
        self.discriminator = None

        if is_equal is not None:
            self.is_equal = is_equal
        self.is_regex = is_regex
        self.name = name
        self.value = value

    @property
    def is_equal(self):
        """Gets the is_equal of this Matcher.  # noqa: E501

        is equal  # noqa: E501

        :return: The is_equal of this Matcher.  # noqa: E501
        :rtype: bool
        """
        return self._is_equal

    @is_equal.setter
    def is_equal(self, is_equal):
        """Sets the is_equal of this Matcher.

        is equal  # noqa: E501

        :param is_equal: The is_equal of this Matcher.  # noqa: E501
        :type: bool
        """

        self._is_equal = is_equal

    @property
    def is_regex(self):
        """Gets the is_regex of this Matcher.  # noqa: E501

        is regex  # noqa: E501

        :return: The is_regex of this Matcher.  # noqa: E501
        :rtype: bool
        """
        return self._is_regex

    @is_regex.setter
    def is_regex(self, is_regex):
        """Sets the is_regex of this Matcher.

        is regex  # noqa: E501

        :param is_regex: The is_regex of this Matcher.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_regex is None:
            raise ValueError("Invalid value for `is_regex`, must not be `None`")  # noqa: E501

        self._is_regex = is_regex

    @property
    def name(self):
        """Gets the name of this Matcher.  # noqa: E501

        name  # noqa: E501

        :return: The name of this Matcher.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Matcher.

        name  # noqa: E501

        :param name: The name of this Matcher.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def value(self):
        """Gets the value of this Matcher.  # noqa: E501

        value  # noqa: E501

        :return: The value of this Matcher.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Matcher.

        value  # noqa: E501

        :param value: The value of this Matcher.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Matcher, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Matcher):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Matcher):
            return True

        return self.to_dict() != other.to_dict()
