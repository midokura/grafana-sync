# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AddBuiltInRoleCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'built_in_role': 'str',
        '_global': 'bool',
        'role_uid': 'str'
    }

    attribute_map = {
        'built_in_role': 'builtInRole',
        '_global': 'global',
        'role_uid': 'roleUid'
    }

    def __init__(self, built_in_role=None, _global=None, role_uid=None, _configuration=None):  # noqa: E501
        """AddBuiltInRoleCommand - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._built_in_role = None
        self.__global = None
        self._role_uid = None
        self.discriminator = None

        if built_in_role is not None:
            self.built_in_role = built_in_role
        if _global is not None:
            self._global = _global
        if role_uid is not None:
            self.role_uid = role_uid

    @property
    def built_in_role(self):
        """Gets the built_in_role of this AddBuiltInRoleCommand.  # noqa: E501


        :return: The built_in_role of this AddBuiltInRoleCommand.  # noqa: E501
        :rtype: str
        """
        return self._built_in_role

    @built_in_role.setter
    def built_in_role(self, built_in_role):
        """Sets the built_in_role of this AddBuiltInRoleCommand.


        :param built_in_role: The built_in_role of this AddBuiltInRoleCommand.  # noqa: E501
        :type: str
        """
        allowed_values = ["Viewer", " Editor", " Admin", " Grafana Admin"]  # noqa: E501
        if (self._configuration.client_side_validation and
                built_in_role not in allowed_values):
            raise ValueError(
                "Invalid value for `built_in_role` ({0}), must be one of {1}"  # noqa: E501
                .format(built_in_role, allowed_values)
            )

        self._built_in_role = built_in_role

    @property
    def _global(self):
        """Gets the _global of this AddBuiltInRoleCommand.  # noqa: E501

        A flag indicating if the assignment is global or not. If set to false, the default org ID of the authenticated user will be used from the request to create organization local assignment. Refer to the Built-in role assignments for more information.  # noqa: E501

        :return: The _global of this AddBuiltInRoleCommand.  # noqa: E501
        :rtype: bool
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """Sets the _global of this AddBuiltInRoleCommand.

        A flag indicating if the assignment is global or not. If set to false, the default org ID of the authenticated user will be used from the request to create organization local assignment. Refer to the Built-in role assignments for more information.  # noqa: E501

        :param _global: The _global of this AddBuiltInRoleCommand.  # noqa: E501
        :type: bool
        """

        self.__global = _global

    @property
    def role_uid(self):
        """Gets the role_uid of this AddBuiltInRoleCommand.  # noqa: E501


        :return: The role_uid of this AddBuiltInRoleCommand.  # noqa: E501
        :rtype: str
        """
        return self._role_uid

    @role_uid.setter
    def role_uid(self, role_uid):
        """Sets the role_uid of this AddBuiltInRoleCommand.


        :param role_uid: The role_uid of this AddBuiltInRoleCommand.  # noqa: E501
        :type: str
        """

        self._role_uid = role_uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddBuiltInRoleCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddBuiltInRoleCommand):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddBuiltInRoleCommand):
            return True

        return self.to_dict() != other.to_dict()
