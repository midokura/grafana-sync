# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DashboardACLInfoDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'dashboard_id': 'int',
        'folder_id': 'int',
        'inherited': 'bool',
        'is_folder': 'bool',
        'permission': 'PermissionType',
        'permission_name': 'str',
        'role': 'str',
        'slug': 'str',
        'team': 'str',
        'team_avatar_url': 'str',
        'team_email': 'str',
        'team_id': 'int',
        'title': 'str',
        'uid': 'str',
        'updated': 'datetime',
        'url': 'str',
        'user_avatar_url': 'str',
        'user_email': 'str',
        'user_id': 'int',
        'user_login': 'str'
    }

    attribute_map = {
        'created': 'created',
        'dashboard_id': 'dashboardId',
        'folder_id': 'folderId',
        'inherited': 'inherited',
        'is_folder': 'isFolder',
        'permission': 'permission',
        'permission_name': 'permissionName',
        'role': 'role',
        'slug': 'slug',
        'team': 'team',
        'team_avatar_url': 'teamAvatarUrl',
        'team_email': 'teamEmail',
        'team_id': 'teamId',
        'title': 'title',
        'uid': 'uid',
        'updated': 'updated',
        'url': 'url',
        'user_avatar_url': 'userAvatarUrl',
        'user_email': 'userEmail',
        'user_id': 'userId',
        'user_login': 'userLogin'
    }

    def __init__(self, created=None, dashboard_id=None, folder_id=None, inherited=None, is_folder=None, permission=None, permission_name=None, role=None, slug=None, team=None, team_avatar_url=None, team_email=None, team_id=None, title=None, uid=None, updated=None, url=None, user_avatar_url=None, user_email=None, user_id=None, user_login=None, _configuration=None):  # noqa: E501
        """DashboardACLInfoDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created = None
        self._dashboard_id = None
        self._folder_id = None
        self._inherited = None
        self._is_folder = None
        self._permission = None
        self._permission_name = None
        self._role = None
        self._slug = None
        self._team = None
        self._team_avatar_url = None
        self._team_email = None
        self._team_id = None
        self._title = None
        self._uid = None
        self._updated = None
        self._url = None
        self._user_avatar_url = None
        self._user_email = None
        self._user_id = None
        self._user_login = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if dashboard_id is not None:
            self.dashboard_id = dashboard_id
        if folder_id is not None:
            self.folder_id = folder_id
        if inherited is not None:
            self.inherited = inherited
        if is_folder is not None:
            self.is_folder = is_folder
        if permission is not None:
            self.permission = permission
        if permission_name is not None:
            self.permission_name = permission_name
        if role is not None:
            self.role = role
        if slug is not None:
            self.slug = slug
        if team is not None:
            self.team = team
        if team_avatar_url is not None:
            self.team_avatar_url = team_avatar_url
        if team_email is not None:
            self.team_email = team_email
        if team_id is not None:
            self.team_id = team_id
        if title is not None:
            self.title = title
        if uid is not None:
            self.uid = uid
        if updated is not None:
            self.updated = updated
        if url is not None:
            self.url = url
        if user_avatar_url is not None:
            self.user_avatar_url = user_avatar_url
        if user_email is not None:
            self.user_email = user_email
        if user_id is not None:
            self.user_id = user_id
        if user_login is not None:
            self.user_login = user_login

    @property
    def created(self):
        """Gets the created of this DashboardACLInfoDTO.  # noqa: E501


        :return: The created of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DashboardACLInfoDTO.


        :param created: The created of this DashboardACLInfoDTO.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this DashboardACLInfoDTO.  # noqa: E501


        :return: The dashboard_id of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: int
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this DashboardACLInfoDTO.


        :param dashboard_id: The dashboard_id of this DashboardACLInfoDTO.  # noqa: E501
        :type: int
        """

        self._dashboard_id = dashboard_id

    @property
    def folder_id(self):
        """Gets the folder_id of this DashboardACLInfoDTO.  # noqa: E501


        :return: The folder_id of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: int
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this DashboardACLInfoDTO.


        :param folder_id: The folder_id of this DashboardACLInfoDTO.  # noqa: E501
        :type: int
        """

        self._folder_id = folder_id

    @property
    def inherited(self):
        """Gets the inherited of this DashboardACLInfoDTO.  # noqa: E501


        :return: The inherited of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: bool
        """
        return self._inherited

    @inherited.setter
    def inherited(self, inherited):
        """Sets the inherited of this DashboardACLInfoDTO.


        :param inherited: The inherited of this DashboardACLInfoDTO.  # noqa: E501
        :type: bool
        """

        self._inherited = inherited

    @property
    def is_folder(self):
        """Gets the is_folder of this DashboardACLInfoDTO.  # noqa: E501


        :return: The is_folder of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_folder

    @is_folder.setter
    def is_folder(self, is_folder):
        """Sets the is_folder of this DashboardACLInfoDTO.


        :param is_folder: The is_folder of this DashboardACLInfoDTO.  # noqa: E501
        :type: bool
        """

        self._is_folder = is_folder

    @property
    def permission(self):
        """Gets the permission of this DashboardACLInfoDTO.  # noqa: E501


        :return: The permission of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: PermissionType
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this DashboardACLInfoDTO.


        :param permission: The permission of this DashboardACLInfoDTO.  # noqa: E501
        :type: PermissionType
        """

        self._permission = permission

    @property
    def permission_name(self):
        """Gets the permission_name of this DashboardACLInfoDTO.  # noqa: E501


        :return: The permission_name of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._permission_name

    @permission_name.setter
    def permission_name(self, permission_name):
        """Sets the permission_name of this DashboardACLInfoDTO.


        :param permission_name: The permission_name of this DashboardACLInfoDTO.  # noqa: E501
        :type: str
        """

        self._permission_name = permission_name

    @property
    def role(self):
        """Gets the role of this DashboardACLInfoDTO.  # noqa: E501


        :return: The role of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this DashboardACLInfoDTO.


        :param role: The role of this DashboardACLInfoDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["Viewer", "Editor", "Admin"]  # noqa: E501
        if (self._configuration.client_side_validation and
                role not in allowed_values):
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def slug(self):
        """Gets the slug of this DashboardACLInfoDTO.  # noqa: E501


        :return: The slug of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this DashboardACLInfoDTO.


        :param slug: The slug of this DashboardACLInfoDTO.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def team(self):
        """Gets the team of this DashboardACLInfoDTO.  # noqa: E501


        :return: The team of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this DashboardACLInfoDTO.


        :param team: The team of this DashboardACLInfoDTO.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def team_avatar_url(self):
        """Gets the team_avatar_url of this DashboardACLInfoDTO.  # noqa: E501


        :return: The team_avatar_url of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._team_avatar_url

    @team_avatar_url.setter
    def team_avatar_url(self, team_avatar_url):
        """Sets the team_avatar_url of this DashboardACLInfoDTO.


        :param team_avatar_url: The team_avatar_url of this DashboardACLInfoDTO.  # noqa: E501
        :type: str
        """

        self._team_avatar_url = team_avatar_url

    @property
    def team_email(self):
        """Gets the team_email of this DashboardACLInfoDTO.  # noqa: E501


        :return: The team_email of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._team_email

    @team_email.setter
    def team_email(self, team_email):
        """Sets the team_email of this DashboardACLInfoDTO.


        :param team_email: The team_email of this DashboardACLInfoDTO.  # noqa: E501
        :type: str
        """

        self._team_email = team_email

    @property
    def team_id(self):
        """Gets the team_id of this DashboardACLInfoDTO.  # noqa: E501


        :return: The team_id of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this DashboardACLInfoDTO.


        :param team_id: The team_id of this DashboardACLInfoDTO.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def title(self):
        """Gets the title of this DashboardACLInfoDTO.  # noqa: E501


        :return: The title of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DashboardACLInfoDTO.


        :param title: The title of this DashboardACLInfoDTO.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def uid(self):
        """Gets the uid of this DashboardACLInfoDTO.  # noqa: E501


        :return: The uid of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this DashboardACLInfoDTO.


        :param uid: The uid of this DashboardACLInfoDTO.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def updated(self):
        """Gets the updated of this DashboardACLInfoDTO.  # noqa: E501


        :return: The updated of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this DashboardACLInfoDTO.


        :param updated: The updated of this DashboardACLInfoDTO.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def url(self):
        """Gets the url of this DashboardACLInfoDTO.  # noqa: E501


        :return: The url of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DashboardACLInfoDTO.


        :param url: The url of this DashboardACLInfoDTO.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def user_avatar_url(self):
        """Gets the user_avatar_url of this DashboardACLInfoDTO.  # noqa: E501


        :return: The user_avatar_url of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._user_avatar_url

    @user_avatar_url.setter
    def user_avatar_url(self, user_avatar_url):
        """Sets the user_avatar_url of this DashboardACLInfoDTO.


        :param user_avatar_url: The user_avatar_url of this DashboardACLInfoDTO.  # noqa: E501
        :type: str
        """

        self._user_avatar_url = user_avatar_url

    @property
    def user_email(self):
        """Gets the user_email of this DashboardACLInfoDTO.  # noqa: E501


        :return: The user_email of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this DashboardACLInfoDTO.


        :param user_email: The user_email of this DashboardACLInfoDTO.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    @property
    def user_id(self):
        """Gets the user_id of this DashboardACLInfoDTO.  # noqa: E501


        :return: The user_id of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DashboardACLInfoDTO.


        :param user_id: The user_id of this DashboardACLInfoDTO.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def user_login(self):
        """Gets the user_login of this DashboardACLInfoDTO.  # noqa: E501


        :return: The user_login of this DashboardACLInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._user_login

    @user_login.setter
    def user_login(self, user_login):
        """Sets the user_login of this DashboardACLInfoDTO.


        :param user_login: The user_login of this DashboardACLInfoDTO.  # noqa: E501
        :type: str
        """

        self._user_login = user_login

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardACLInfoDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardACLInfoDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardACLInfoDTO):
            return True

        return self.to_dict() != other.to_dict()
