# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WechatConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_id': 'str',
        'api_secret': 'Secret',
        'api_url': 'URL',
        'corp_id': 'str',
        'http_config': 'HTTPClientConfig',
        'message': 'str',
        'message_type': 'str',
        'send_resolved': 'bool',
        'to_party': 'str',
        'to_tag': 'str',
        'to_user': 'str'
    }

    attribute_map = {
        'agent_id': 'agent_id',
        'api_secret': 'api_secret',
        'api_url': 'api_url',
        'corp_id': 'corp_id',
        'http_config': 'http_config',
        'message': 'message',
        'message_type': 'message_type',
        'send_resolved': 'send_resolved',
        'to_party': 'to_party',
        'to_tag': 'to_tag',
        'to_user': 'to_user'
    }

    def __init__(self, agent_id=None, api_secret=None, api_url=None, corp_id=None, http_config=None, message=None, message_type=None, send_resolved=None, to_party=None, to_tag=None, to_user=None, _configuration=None):  # noqa: E501
        """WechatConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._agent_id = None
        self._api_secret = None
        self._api_url = None
        self._corp_id = None
        self._http_config = None
        self._message = None
        self._message_type = None
        self._send_resolved = None
        self._to_party = None
        self._to_tag = None
        self._to_user = None
        self.discriminator = None

        if agent_id is not None:
            self.agent_id = agent_id
        if api_secret is not None:
            self.api_secret = api_secret
        if api_url is not None:
            self.api_url = api_url
        if corp_id is not None:
            self.corp_id = corp_id
        if http_config is not None:
            self.http_config = http_config
        if message is not None:
            self.message = message
        if message_type is not None:
            self.message_type = message_type
        if send_resolved is not None:
            self.send_resolved = send_resolved
        if to_party is not None:
            self.to_party = to_party
        if to_tag is not None:
            self.to_tag = to_tag
        if to_user is not None:
            self.to_user = to_user

    @property
    def agent_id(self):
        """Gets the agent_id of this WechatConfig.  # noqa: E501


        :return: The agent_id of this WechatConfig.  # noqa: E501
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this WechatConfig.


        :param agent_id: The agent_id of this WechatConfig.  # noqa: E501
        :type: str
        """

        self._agent_id = agent_id

    @property
    def api_secret(self):
        """Gets the api_secret of this WechatConfig.  # noqa: E501


        :return: The api_secret of this WechatConfig.  # noqa: E501
        :rtype: Secret
        """
        return self._api_secret

    @api_secret.setter
    def api_secret(self, api_secret):
        """Sets the api_secret of this WechatConfig.


        :param api_secret: The api_secret of this WechatConfig.  # noqa: E501
        :type: Secret
        """

        self._api_secret = api_secret

    @property
    def api_url(self):
        """Gets the api_url of this WechatConfig.  # noqa: E501


        :return: The api_url of this WechatConfig.  # noqa: E501
        :rtype: URL
        """
        return self._api_url

    @api_url.setter
    def api_url(self, api_url):
        """Sets the api_url of this WechatConfig.


        :param api_url: The api_url of this WechatConfig.  # noqa: E501
        :type: URL
        """

        self._api_url = api_url

    @property
    def corp_id(self):
        """Gets the corp_id of this WechatConfig.  # noqa: E501


        :return: The corp_id of this WechatConfig.  # noqa: E501
        :rtype: str
        """
        return self._corp_id

    @corp_id.setter
    def corp_id(self, corp_id):
        """Sets the corp_id of this WechatConfig.


        :param corp_id: The corp_id of this WechatConfig.  # noqa: E501
        :type: str
        """

        self._corp_id = corp_id

    @property
    def http_config(self):
        """Gets the http_config of this WechatConfig.  # noqa: E501


        :return: The http_config of this WechatConfig.  # noqa: E501
        :rtype: HTTPClientConfig
        """
        return self._http_config

    @http_config.setter
    def http_config(self, http_config):
        """Sets the http_config of this WechatConfig.


        :param http_config: The http_config of this WechatConfig.  # noqa: E501
        :type: HTTPClientConfig
        """

        self._http_config = http_config

    @property
    def message(self):
        """Gets the message of this WechatConfig.  # noqa: E501


        :return: The message of this WechatConfig.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this WechatConfig.


        :param message: The message of this WechatConfig.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def message_type(self):
        """Gets the message_type of this WechatConfig.  # noqa: E501


        :return: The message_type of this WechatConfig.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this WechatConfig.


        :param message_type: The message_type of this WechatConfig.  # noqa: E501
        :type: str
        """

        self._message_type = message_type

    @property
    def send_resolved(self):
        """Gets the send_resolved of this WechatConfig.  # noqa: E501


        :return: The send_resolved of this WechatConfig.  # noqa: E501
        :rtype: bool
        """
        return self._send_resolved

    @send_resolved.setter
    def send_resolved(self, send_resolved):
        """Sets the send_resolved of this WechatConfig.


        :param send_resolved: The send_resolved of this WechatConfig.  # noqa: E501
        :type: bool
        """

        self._send_resolved = send_resolved

    @property
    def to_party(self):
        """Gets the to_party of this WechatConfig.  # noqa: E501


        :return: The to_party of this WechatConfig.  # noqa: E501
        :rtype: str
        """
        return self._to_party

    @to_party.setter
    def to_party(self, to_party):
        """Sets the to_party of this WechatConfig.


        :param to_party: The to_party of this WechatConfig.  # noqa: E501
        :type: str
        """

        self._to_party = to_party

    @property
    def to_tag(self):
        """Gets the to_tag of this WechatConfig.  # noqa: E501


        :return: The to_tag of this WechatConfig.  # noqa: E501
        :rtype: str
        """
        return self._to_tag

    @to_tag.setter
    def to_tag(self, to_tag):
        """Sets the to_tag of this WechatConfig.


        :param to_tag: The to_tag of this WechatConfig.  # noqa: E501
        :type: str
        """

        self._to_tag = to_tag

    @property
    def to_user(self):
        """Gets the to_user of this WechatConfig.  # noqa: E501


        :return: The to_user of this WechatConfig.  # noqa: E501
        :rtype: str
        """
        return self._to_user

    @to_user.setter
    def to_user(self, to_user):
        """Sets the to_user of this WechatConfig.


        :param to_user: The to_user of this WechatConfig.  # noqa: E501
        :type: str
        """

        self._to_user = to_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WechatConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WechatConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WechatConfig):
            return True

        return self.to_dict() != other.to_dict()
