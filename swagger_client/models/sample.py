# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Sample(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metric': 'Labels',
        't': 'int',
        'v': 'float'
    }

    attribute_map = {
        'metric': 'Metric',
        't': 'T',
        'v': 'V'
    }

    def __init__(self, metric=None, t=None, v=None, _configuration=None):  # noqa: E501
        """Sample - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._metric = None
        self._t = None
        self._v = None
        self.discriminator = None

        if metric is not None:
            self.metric = metric
        if t is not None:
            self.t = t
        if v is not None:
            self.v = v

    @property
    def metric(self):
        """Gets the metric of this Sample.  # noqa: E501


        :return: The metric of this Sample.  # noqa: E501
        :rtype: Labels
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this Sample.


        :param metric: The metric of this Sample.  # noqa: E501
        :type: Labels
        """

        self._metric = metric

    @property
    def t(self):
        """Gets the t of this Sample.  # noqa: E501


        :return: The t of this Sample.  # noqa: E501
        :rtype: int
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this Sample.


        :param t: The t of this Sample.  # noqa: E501
        :type: int
        """

        self._t = t

    @property
    def v(self):
        """Gets the v of this Sample.  # noqa: E501


        :return: The v of this Sample.  # noqa: E501
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """Sets the v of this Sample.


        :param v: The v of this Sample.  # noqa: E501
        :type: float
        """

        self._v = v

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sample, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sample):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Sample):
            return True

        return self.to_dict() != other.to_dict()
