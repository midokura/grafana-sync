# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AlertRuleGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'folder_uid': 'str',
        'interval': 'int',
        'rules': 'list[AlertRule]',
        'title': 'str'
    }

    attribute_map = {
        'folder_uid': 'folderUid',
        'interval': 'interval',
        'rules': 'rules',
        'title': 'title'
    }

    def __init__(self, folder_uid=None, interval=None, rules=None, title=None, _configuration=None):  # noqa: E501
        """AlertRuleGroup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._folder_uid = None
        self._interval = None
        self._rules = None
        self._title = None
        self.discriminator = None

        if folder_uid is not None:
            self.folder_uid = folder_uid
        if interval is not None:
            self.interval = interval
        if rules is not None:
            self.rules = rules
        if title is not None:
            self.title = title

    @property
    def folder_uid(self):
        """Gets the folder_uid of this AlertRuleGroup.  # noqa: E501


        :return: The folder_uid of this AlertRuleGroup.  # noqa: E501
        :rtype: str
        """
        return self._folder_uid

    @folder_uid.setter
    def folder_uid(self, folder_uid):
        """Sets the folder_uid of this AlertRuleGroup.


        :param folder_uid: The folder_uid of this AlertRuleGroup.  # noqa: E501
        :type: str
        """

        self._folder_uid = folder_uid

    @property
    def interval(self):
        """Gets the interval of this AlertRuleGroup.  # noqa: E501


        :return: The interval of this AlertRuleGroup.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this AlertRuleGroup.


        :param interval: The interval of this AlertRuleGroup.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def rules(self):
        """Gets the rules of this AlertRuleGroup.  # noqa: E501


        :return: The rules of this AlertRuleGroup.  # noqa: E501
        :rtype: list[AlertRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this AlertRuleGroup.


        :param rules: The rules of this AlertRuleGroup.  # noqa: E501
        :type: list[AlertRule]
        """

        self._rules = rules

    @property
    def title(self):
        """Gets the title of this AlertRuleGroup.  # noqa: E501


        :return: The title of this AlertRuleGroup.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AlertRuleGroup.


        :param title: The title of this AlertRuleGroup.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertRuleGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertRuleGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlertRuleGroup):
            return True

        return self.to_dict() != other.to_dict()
