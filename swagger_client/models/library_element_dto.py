# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LibraryElementDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'folder_id': 'int',
        'folder_uid': 'str',
        'id': 'int',
        'kind': 'int',
        'meta': 'LibraryElementDTOMeta',
        'model': 'object',
        'name': 'str',
        'org_id': 'int',
        'type': 'str',
        'uid': 'str',
        'version': 'int'
    }

    attribute_map = {
        'description': 'description',
        'folder_id': 'folderId',
        'folder_uid': 'folderUid',
        'id': 'id',
        'kind': 'kind',
        'meta': 'meta',
        'model': 'model',
        'name': 'name',
        'org_id': 'orgId',
        'type': 'type',
        'uid': 'uid',
        'version': 'version'
    }

    def __init__(self, description=None, folder_id=None, folder_uid=None, id=None, kind=None, meta=None, model=None, name=None, org_id=None, type=None, uid=None, version=None, _configuration=None):  # noqa: E501
        """LibraryElementDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._folder_id = None
        self._folder_uid = None
        self._id = None
        self._kind = None
        self._meta = None
        self._model = None
        self._name = None
        self._org_id = None
        self._type = None
        self._uid = None
        self._version = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if folder_id is not None:
            self.folder_id = folder_id
        if folder_uid is not None:
            self.folder_uid = folder_uid
        if id is not None:
            self.id = id
        if kind is not None:
            self.kind = kind
        if meta is not None:
            self.meta = meta
        if model is not None:
            self.model = model
        if name is not None:
            self.name = name
        if org_id is not None:
            self.org_id = org_id
        if type is not None:
            self.type = type
        if uid is not None:
            self.uid = uid
        if version is not None:
            self.version = version

    @property
    def description(self):
        """Gets the description of this LibraryElementDTO.  # noqa: E501


        :return: The description of this LibraryElementDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LibraryElementDTO.


        :param description: The description of this LibraryElementDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def folder_id(self):
        """Gets the folder_id of this LibraryElementDTO.  # noqa: E501


        :return: The folder_id of this LibraryElementDTO.  # noqa: E501
        :rtype: int
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this LibraryElementDTO.


        :param folder_id: The folder_id of this LibraryElementDTO.  # noqa: E501
        :type: int
        """

        self._folder_id = folder_id

    @property
    def folder_uid(self):
        """Gets the folder_uid of this LibraryElementDTO.  # noqa: E501


        :return: The folder_uid of this LibraryElementDTO.  # noqa: E501
        :rtype: str
        """
        return self._folder_uid

    @folder_uid.setter
    def folder_uid(self, folder_uid):
        """Sets the folder_uid of this LibraryElementDTO.


        :param folder_uid: The folder_uid of this LibraryElementDTO.  # noqa: E501
        :type: str
        """

        self._folder_uid = folder_uid

    @property
    def id(self):
        """Gets the id of this LibraryElementDTO.  # noqa: E501


        :return: The id of this LibraryElementDTO.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LibraryElementDTO.


        :param id: The id of this LibraryElementDTO.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this LibraryElementDTO.  # noqa: E501


        :return: The kind of this LibraryElementDTO.  # noqa: E501
        :rtype: int
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this LibraryElementDTO.


        :param kind: The kind of this LibraryElementDTO.  # noqa: E501
        :type: int
        """

        self._kind = kind

    @property
    def meta(self):
        """Gets the meta of this LibraryElementDTO.  # noqa: E501


        :return: The meta of this LibraryElementDTO.  # noqa: E501
        :rtype: LibraryElementDTOMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this LibraryElementDTO.


        :param meta: The meta of this LibraryElementDTO.  # noqa: E501
        :type: LibraryElementDTOMeta
        """

        self._meta = meta

    @property
    def model(self):
        """Gets the model of this LibraryElementDTO.  # noqa: E501


        :return: The model of this LibraryElementDTO.  # noqa: E501
        :rtype: object
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this LibraryElementDTO.


        :param model: The model of this LibraryElementDTO.  # noqa: E501
        :type: object
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this LibraryElementDTO.  # noqa: E501


        :return: The name of this LibraryElementDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LibraryElementDTO.


        :param name: The name of this LibraryElementDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self):
        """Gets the org_id of this LibraryElementDTO.  # noqa: E501


        :return: The org_id of this LibraryElementDTO.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this LibraryElementDTO.


        :param org_id: The org_id of this LibraryElementDTO.  # noqa: E501
        :type: int
        """

        self._org_id = org_id

    @property
    def type(self):
        """Gets the type of this LibraryElementDTO.  # noqa: E501


        :return: The type of this LibraryElementDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LibraryElementDTO.


        :param type: The type of this LibraryElementDTO.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this LibraryElementDTO.  # noqa: E501


        :return: The uid of this LibraryElementDTO.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this LibraryElementDTO.


        :param uid: The uid of this LibraryElementDTO.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def version(self):
        """Gets the version of this LibraryElementDTO.  # noqa: E501


        :return: The version of this LibraryElementDTO.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this LibraryElementDTO.


        :param version: The version of this LibraryElementDTO.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LibraryElementDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryElementDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LibraryElementDTO):
            return True

        return self.to_dict() != other.to_dict()
