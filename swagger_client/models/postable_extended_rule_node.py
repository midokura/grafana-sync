# coding: utf-8

"""
    Grafana HTTP API.

    The Grafana backend exposes an HTTP API, the same API is used by the frontend to do everything from saving dashboards, creating users and updating data sources.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: hello@grafana.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PostableExtendedRuleNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert': 'str',
        'annotations': 'dict(str, str)',
        'expr': 'str',
        '_for': 'Duration',
        'grafana_alert': 'PostableGrafanaRule',
        'labels': 'dict(str, str)',
        'record': 'str'
    }

    attribute_map = {
        'alert': 'alert',
        'annotations': 'annotations',
        'expr': 'expr',
        '_for': 'for',
        'grafana_alert': 'grafana_alert',
        'labels': 'labels',
        'record': 'record'
    }

    def __init__(self, alert=None, annotations=None, expr=None, _for=None, grafana_alert=None, labels=None, record=None, _configuration=None):  # noqa: E501
        """PostableExtendedRuleNode - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._alert = None
        self._annotations = None
        self._expr = None
        self.__for = None
        self._grafana_alert = None
        self._labels = None
        self._record = None
        self.discriminator = None

        if alert is not None:
            self.alert = alert
        if annotations is not None:
            self.annotations = annotations
        if expr is not None:
            self.expr = expr
        if _for is not None:
            self._for = _for
        if grafana_alert is not None:
            self.grafana_alert = grafana_alert
        if labels is not None:
            self.labels = labels
        if record is not None:
            self.record = record

    @property
    def alert(self):
        """Gets the alert of this PostableExtendedRuleNode.  # noqa: E501


        :return: The alert of this PostableExtendedRuleNode.  # noqa: E501
        :rtype: str
        """
        return self._alert

    @alert.setter
    def alert(self, alert):
        """Sets the alert of this PostableExtendedRuleNode.


        :param alert: The alert of this PostableExtendedRuleNode.  # noqa: E501
        :type: str
        """

        self._alert = alert

    @property
    def annotations(self):
        """Gets the annotations of this PostableExtendedRuleNode.  # noqa: E501


        :return: The annotations of this PostableExtendedRuleNode.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this PostableExtendedRuleNode.


        :param annotations: The annotations of this PostableExtendedRuleNode.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def expr(self):
        """Gets the expr of this PostableExtendedRuleNode.  # noqa: E501


        :return: The expr of this PostableExtendedRuleNode.  # noqa: E501
        :rtype: str
        """
        return self._expr

    @expr.setter
    def expr(self, expr):
        """Sets the expr of this PostableExtendedRuleNode.


        :param expr: The expr of this PostableExtendedRuleNode.  # noqa: E501
        :type: str
        """

        self._expr = expr

    @property
    def _for(self):
        """Gets the _for of this PostableExtendedRuleNode.  # noqa: E501


        :return: The _for of this PostableExtendedRuleNode.  # noqa: E501
        :rtype: Duration
        """
        return self.__for

    @_for.setter
    def _for(self, _for):
        """Sets the _for of this PostableExtendedRuleNode.


        :param _for: The _for of this PostableExtendedRuleNode.  # noqa: E501
        :type: Duration
        """

        self.__for = _for

    @property
    def grafana_alert(self):
        """Gets the grafana_alert of this PostableExtendedRuleNode.  # noqa: E501


        :return: The grafana_alert of this PostableExtendedRuleNode.  # noqa: E501
        :rtype: PostableGrafanaRule
        """
        return self._grafana_alert

    @grafana_alert.setter
    def grafana_alert(self, grafana_alert):
        """Sets the grafana_alert of this PostableExtendedRuleNode.


        :param grafana_alert: The grafana_alert of this PostableExtendedRuleNode.  # noqa: E501
        :type: PostableGrafanaRule
        """

        self._grafana_alert = grafana_alert

    @property
    def labels(self):
        """Gets the labels of this PostableExtendedRuleNode.  # noqa: E501


        :return: The labels of this PostableExtendedRuleNode.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PostableExtendedRuleNode.


        :param labels: The labels of this PostableExtendedRuleNode.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def record(self):
        """Gets the record of this PostableExtendedRuleNode.  # noqa: E501


        :return: The record of this PostableExtendedRuleNode.  # noqa: E501
        :rtype: str
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this PostableExtendedRuleNode.


        :param record: The record of this PostableExtendedRuleNode.  # noqa: E501
        :type: str
        """

        self._record = record

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostableExtendedRuleNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostableExtendedRuleNode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostableExtendedRuleNode):
            return True

        return self.to_dict() != other.to_dict()
